{"version":3,"file":"static/js/619.b9616e29.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/rpc-websockets/src/lib/client/websocket.browser.ts","../node_modules/rpc-websockets/src/lib/client.ts","../node_modules/rpc-websockets/src/lib/utils.ts","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/utils/guarded-array-utils.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/timing.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solana/web3.js/src/index.ts","../node_modules/@solana/spl-token/src/constants.ts","../node_modules/@solana/buffer-layout-utils/src/base.ts","../node_modules/@solana/buffer-layout-utils/src/bigint.ts","../node_modules/@solana/buffer-layout-utils/src/decimal.ts","../node_modules/@solana/buffer-layout-utils/src/native.ts","../node_modules/@solana/buffer-layout-utils/src/web3.ts","../node_modules/@solana/spl-token/src/errors.ts","../node_modules/@solana/spl-token/src/extensions/accountType.ts","../node_modules/@solana/spl-token/src/state/multisig.ts","../node_modules/@solana/spl-token/src/state/account.ts","../node_modules/@solana/spl-token/src/state/mint.ts","../node_modules/@solana/spl-token/src/instructions/types.ts","../node_modules/@solana/spl-token/src/instructions/transferChecked.ts","../node_modules/@solana/spl-token/src/instructions/internal.ts","../node_modules/@solana/spl-token/src/instructions/associatedTokenAccount.ts","../node_modules/@swapkit/toolbox-solana/dist/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\n\"use strict\"\n\nimport { EventEmitter } from \"eventemitter3\"\n\nimport {\n    BrowserWebSocketType,\n    NodeWebSocketType,\n    IWSClientAdditionalOptions,\n} from \"./client.types.js\"\n\nclass WebSocketBrowserImpl extends EventEmitter\n{\n    socket: BrowserWebSocketType\n\n    /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n    constructor(address: string, options: {}, protocols?: string | string[])\n    {\n        super()\n\n        this.socket = new window.WebSocket(address, protocols)\n\n        this.socket.onopen = () => this.emit(\"open\")\n        this.socket.onmessage = (event) => this.emit(\"message\", event.data)\n        this.socket.onerror = (error) => this.emit(\"error\", error)\n        this.socket.onclose = (event) =>\n        {\n            this.emit(\"close\", event.code, event.reason)\n        }\n    }\n\n    /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n    send(\n        data: Parameters<BrowserWebSocketType[\"send\"]>[0],\n        optionsOrCallback: (\n      error?: Error\n    ) => void | Parameters<NodeWebSocketType[\"send\"]>[1],\n        callback?: () => void\n    )\n    {\n        const cb = callback || optionsOrCallback\n\n        try\n        {\n            this.socket.send(data)\n            cb()\n        }\n        catch (error)\n        {\n            cb(error)\n        }\n    }\n\n    /**\n   * Closes an underlying socket\n   * @method\n   * @param {Number} code - status code explaining why the connection is being closed\n   * @param {String} reason - a description why the connection is closing\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    close(code?: number, reason?: string)\n    {\n        this.socket.close(code, reason)\n    }\n\n    addEventListener<K extends keyof WebSocketEventMap>(\n        type: K,\n        listener: (ev: WebSocketEventMap[K]) => any,\n        options?: boolean | AddEventListenerOptions\n    ): void\n    {\n        this.socket.addEventListener(type, listener, options)\n    }\n}\n\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\nexport function WebSocket(\n    address: string,\n    options: IWSClientAdditionalOptions\n)\n{\n    return new WebSocketBrowserImpl(address, options)\n}\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\n\"use strict\"\n\nimport NodeWebSocket from \"ws\"\nimport { EventEmitter } from \"eventemitter3\"\nimport {\n    ICommonWebSocket,\n    IWSClientAdditionalOptions,\n    NodeWebSocketType,\n    ICommonWebSocketFactory,\n} from \"./client/client.types.js\"\n\nimport { DataPack, DefaultDataPack } from \"./utils.js\"\n\ninterface IQueueElement {\n  promise: [\n    Parameters<ConstructorParameters<typeof Promise>[0]>[0],\n    Parameters<ConstructorParameters<typeof Promise>[0]>[1]\n  ];\n  timeout?: ReturnType<typeof setTimeout>;\n}\n\nexport interface IQueue {\n  [x: number]: IQueueElement;\n}\n\nexport interface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\nexport class CommonClient extends EventEmitter\n{\n    private address: string\n    private rpc_id: number\n    private queue: IQueue\n    private options: IWSClientAdditionalOptions & NodeWebSocket.ClientOptions\n    private autoconnect: boolean\n    private ready: boolean\n    private reconnect: boolean\n    private reconnect_timer_id: NodeJS.Timeout\n    private reconnect_interval: number\n    private max_reconnects: number\n    private rest_options: IWSClientAdditionalOptions &\n    NodeWebSocket.ClientOptions\n    private current_reconnects: number\n    private generate_request_id: (\n    method: string,\n    params: object | Array<any>\n  ) => number\n    private socket: ICommonWebSocket\n    private webSocketFactory: ICommonWebSocketFactory\n    private dataPack: DataPack<object, string>\n\n    /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @param {DataPack} dataPack - data pack contains encoder and decoder\n   * @return {CommonClient}\n   */\n    constructor(\n        webSocketFactory: ICommonWebSocketFactory,\n        address = \"ws://localhost:8080\",\n        {\n            autoconnect = true,\n            reconnect = true,\n            reconnect_interval = 1000,\n            max_reconnects = 5,\n            ...rest_options\n        } = {},\n        generate_request_id?: (\n      method: string,\n      params: object | Array<any>\n    ) => number,\n        dataPack?: DataPack<object, string>\n    )\n    {\n        super()\n\n        this.webSocketFactory = webSocketFactory\n\n        this.queue = {}\n        this.rpc_id = 0\n\n        this.address = address\n        this.autoconnect = autoconnect\n        this.ready = false\n        this.reconnect = reconnect\n        this.reconnect_timer_id = undefined\n        this.reconnect_interval = reconnect_interval\n        this.max_reconnects = max_reconnects\n        this.rest_options = rest_options\n        this.current_reconnects = 0\n        this.generate_request_id = generate_request_id || (() => ++this.rpc_id)\n\n        if (!dataPack) this.dataPack = new DefaultDataPack()\n        else this.dataPack = dataPack\n\n        if (this.autoconnect)\n            this._connect(this.address, {\n                autoconnect: this.autoconnect,\n                reconnect: this.reconnect,\n                reconnect_interval: this.reconnect_interval,\n                max_reconnects: this.max_reconnects,\n                ...this.rest_options,\n            })\n    }\n\n    /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n    connect()\n    {\n        if (this.socket) return\n\n        this._connect(this.address, {\n            autoconnect: this.autoconnect,\n            reconnect: this.reconnect,\n            reconnect_interval: this.reconnect_interval,\n            max_reconnects: this.max_reconnects,\n            ...this.rest_options,\n        })\n    }\n\n    /**\n   * Calls a registered RPC method on server.\n   * @method\n   * @param {String} method - RPC method name\n   * @param {Object|Array} params - optional method parameters\n   * @param {Number} timeout - RPC reply timeout value\n   * @param {Object} ws_opts - options passed to ws\n   * @return {Promise}\n   */\n    call(\n        method: string,\n        params?: IWSRequestParams,\n        timeout?: number,\n        ws_opts?: Parameters<NodeWebSocketType[\"send\"]>[1]\n    )\n    {\n        if (!ws_opts && \"object\" === typeof timeout)\n        {\n            ws_opts = timeout\n            timeout = null\n        }\n\n        return new Promise((resolve, reject) =>\n        {\n            if (!this.ready) return reject(new Error(\"socket not ready\"))\n\n            const rpc_id = this.generate_request_id(method, params)\n\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params: params || undefined,\n                id: rpc_id,\n            }\n\n            this.socket.send(this.dataPack.encode(message), ws_opts, (error) =>\n            {\n                if (error) return reject(error)\n\n                this.queue[rpc_id] = { promise: [resolve, reject] }\n\n                if (timeout)\n                {\n                    this.queue[rpc_id].timeout = setTimeout(() =>\n                    {\n                        delete this.queue[rpc_id]\n                        reject(new Error(\"reply timeout\"))\n                    }, timeout)\n                }\n            })\n        })\n    }\n\n    /**\n   * Logins with the other side of the connection.\n   * @method\n   * @param {Object} params - Login credentials object\n   * @return {Promise}\n   */\n    async login(params: IWSRequestParams)\n    {\n        const resp = await this.call(\"rpc.login\", params)\n\n        if (!resp) throw new Error(\"authentication failed\")\n\n        return resp\n    }\n\n    /**\n   * Fetches a list of client's methods registered on server.\n   * @method\n   * @return {Array}\n   */\n    async listMethods()\n    {\n        return await this.call(\"__listMethods\")\n    }\n\n    /**\n   * Sends a JSON-RPC 2.0 notification to server.\n   * @method\n   * @param {String} method - RPC method name\n   * @param {Object} params - optional method parameters\n   * @return {Promise}\n   */\n    notify(method: string, params?: IWSRequestParams)\n    {\n        return new Promise<void>((resolve, reject) =>\n        {\n            if (!this.ready) return reject(new Error(\"socket not ready\"))\n\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params,\n            }\n\n            this.socket.send(this.dataPack.encode(message), (error) =>\n            {\n                if (error) return reject(error)\n\n                resolve()\n            })\n        })\n    }\n\n    /**\n   * Subscribes for a defined event.\n   * @method\n   * @param {String|Array} event - event name\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    async subscribe(event: string | Array<string>)\n    {\n        if (typeof event === \"string\") event = [event]\n\n        const result = await this.call(\"rpc.on\", event)\n\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\n                \"Failed subscribing to an event '\" + event + \"' with: \" + result[event]\n            )\n\n        return result\n    }\n\n    /**\n   * Unsubscribes from a defined event.\n   * @method\n   * @param {String|Array} event - event name\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    async unsubscribe(event: string | Array<string>)\n    {\n        if (typeof event === \"string\") event = [event]\n\n        const result = await this.call(\"rpc.off\", event)\n\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\"Failed unsubscribing from an event with: \" + result)\n\n        return result\n    }\n\n    /**\n   * Closes a WebSocket connection gracefully.\n   * @method\n   * @param {Number} code - socket close code\n   * @param {String} data - optional data to be sent before closing\n   * @return {Undefined}\n   */\n    close(code?: number, data?: string)\n    {\n        this.socket.close(code || 1000, data)\n    }\n\n    /**\n   * Enable / disable automatic reconnection.\n   * @method\n   * @param {Boolean} reconnect - enable / disable reconnection\n   * @return {Undefined}\n   */\n    setAutoReconnect(reconnect: boolean)\n    {\n        this.reconnect = reconnect\n    }\n\n    /**\n   * Set the interval between reconnection attempts.\n   * @method\n   * @param {Number} interval - reconnection interval in milliseconds\n   * @return {Undefined}\n   */\n    setReconnectInterval(interval: number)\n    {\n        this.reconnect_interval = interval\n    }\n\n    /**\n   * Set the maximum number of reconnection attempts.\n   * @method\n   * @param {Number} max_reconnects - maximum reconnection attempts\n   * @return {Undefined}\n   */\n    setMaxReconnects(max_reconnects: number)\n    {\n        this.max_reconnects = max_reconnects\n    }\n\n    /**\n   * Connection/Message handler.\n   * @method\n   * @private\n   * @param {String} address - WebSocket API address\n   * @param {Object} options - ws options object\n   * @return {Undefined}\n   */\n    private _connect(\n        address: string,\n        options: IWSClientAdditionalOptions & NodeWebSocket.ClientOptions\n    )\n    {\n        clearTimeout(this.reconnect_timer_id)\n        this.socket = this.webSocketFactory(address, options)\n\n        this.socket.addEventListener(\"open\", () =>\n        {\n            this.ready = true\n            this.emit(\"open\")\n            this.current_reconnects = 0\n        })\n\n        this.socket.addEventListener(\"message\", ({ data: message }) =>\n        {\n            if (message instanceof ArrayBuffer)\n                message = Buffer.from(message).toString()\n\n            try\n            {\n                message = this.dataPack.decode(message)\n            }\n            catch (error)\n            {\n                return\n            }\n\n            // check if any listeners are attached and forward event\n            if (message.notification && this.listeners(message.notification).length)\n            {\n                if (!Object.keys(message.params).length)\n                    return this.emit(message.notification)\n\n                const args = [message.notification]\n\n                if (message.params.constructor === Object) args.push(message.params)\n                // using for-loop instead of unshift/spread because performance is better\n                else\n                    for (let i = 0; i < message.params.length; i++)\n                        args.push(message.params[i])\n\n                // run as microtask so that pending queue messages are resolved first\n                // eslint-disable-next-line prefer-spread\n                return Promise.resolve().then(() =>\n                {\n                    // eslint-disable-next-line prefer-spread\n                    this.emit.apply(this, args)\n                })\n            }\n\n            if (!this.queue[message.id])\n            {\n                // general JSON RPC 2.0 events\n                if (message.method)\n                {\n                    // run as microtask so that pending queue messages are resolved first\n                    return Promise.resolve().then(() =>\n                    {\n                        this.emit(message.method, message?.params)\n                    })\n                }\n\n                return\n            }\n\n            // reject early since server's response is invalid\n            if (\"error\" in message === \"result\" in message)\n                this.queue[message.id].promise[1](\n                    new Error(\n                        \"Server response malformed. Response must include either \\\"result\\\"\" +\n              \" or \\\"error\\\", but not both.\"\n                    )\n                )\n\n            if (this.queue[message.id].timeout)\n                clearTimeout(this.queue[message.id].timeout)\n\n            if (message.error) this.queue[message.id].promise[1](message.error)\n            else this.queue[message.id].promise[0](message.result)\n\n            delete this.queue[message.id]\n        })\n\n        this.socket.addEventListener(\"error\", (error) => this.emit(\"error\", error))\n\n        this.socket.addEventListener(\"close\", ({ code, reason }) =>\n        {\n            if (this.ready)\n            // Delay close event until internal state is updated\n                setTimeout(() => this.emit(\"close\", code, reason), 0)\n\n            this.ready = false\n            this.socket = undefined\n\n            if (code === 1000) return\n\n            this.current_reconnects++\n\n            if (\n                this.reconnect &&\n        (this.max_reconnects > this.current_reconnects ||\n          this.max_reconnects === 0)\n            )\n                this.reconnect_timer_id = setTimeout(\n                    () => this._connect(address, options),\n                    this.reconnect_interval\n                )\n        })\n    }\n}\n","\"use strict\"\n\nexport interface DataPack<\n  T,\n  R extends string | ArrayBufferLike | Blob | ArrayBufferView\n> {\n  encode(value: T): R;\n  decode(value: R): T;\n}\n\nexport class DefaultDataPack implements DataPack<Object, string>\n{\n    encode(value: Object): string\n    {\n        return JSON.stringify(value)\n    }\n\n    decode(value: string): Object\n    {\n        return JSON.parse(value)\n    }\n}\n","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from './connection';\nimport {TransactionSignature} from './transaction';\n\nexport class SendTransactionError extends Error {\n  private signature: TransactionSignature;\n  private transactionMessage: string;\n  private transactionLogs: string[] | Promise<string[]> | undefined;\n\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs,\n  }: {\n    action: 'send' | 'simulate';\n    signature: TransactionSignature;\n    transactionMessage: string;\n    logs?: string[];\n  }) {\n    const maybeLogsOutput = logs\n      ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. `\n      : '';\n    const guideText =\n      '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message: string;\n    switch (action) {\n      case 'send':\n        message =\n          `Transaction ${signature} resulted in an error. \\n` +\n          `${transactionMessage}. ` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      case 'simulate':\n        message =\n          `Simulation failed. \\nMessage: ${transactionMessage}. \\n` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      default: {\n        message = `Unknown action '${((a: never) => a)(action)}'`;\n      }\n    }\n    super(message);\n\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n\n  get transactionError(): {message: string; logs?: string[]} {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs)\n        ? this.transactionLogs\n        : undefined,\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs(): string[] | undefined {\n    const cachedLogs = this.transactionLogs;\n    if (\n      cachedLogs != null &&\n      typeof cachedLogs === 'object' &&\n      'then' in cachedLogs\n    ) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n\n  async getLogs(connection: Connection): Promise<string[]> {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection\n          .getTransaction(this.signature)\n          .then(tx => {\n            if (tx && tx.meta && tx.meta.logMessages) {\n              const logs = tx.meta.logMessages;\n              this.transactionLogs = logs;\n              resolve(logs);\n            } else {\n              reject(new Error('Log messages not found'));\n            }\n          })\n          .catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export const Headers: typeof globalThis.Headers = globalThis.Headers;\nexport const Request: typeof globalThis.Request = globalThis.Request;\nexport const Response: typeof globalThis.Response = globalThis.Response;\nexport default globalThis.fetch;\n","import {\n  CommonClient,\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n  WebSocket as createRpc,\n} from 'rpc-websockets';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends CommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket as ReturnType<typeof createRpc>;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<CommonClient['call']>\n  ): ReturnType<CommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<CommonClient['notify']>\n  ): ReturnType<CommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to agave-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","import { PublicKey } from '@solana/web3.js';\n\n/** Address of the SPL Token program */\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n\n/** Address of the SPL Token 2022 program */\nexport const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb');\n\n/** Address of the SPL Associated Token Account program */\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\n/** Address of the special mint for wrapped native SOL in spl-token */\nexport const NATIVE_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\n/** Address of the special mint for wrapped native SOL in spl-token-2022 */\nexport const NATIVE_MINT_2022 = new PublicKey('9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP');\n\n/** Check that the token program provided is not `Tokenkeg...`, useful when using extensions */\nexport function programSupportsExtensions(programId: PublicKey): boolean {\n    if (programId.equals(TOKEN_PROGRAM_ID)) {\n        return false;\n    } else {\n        return true;\n    }\n}\n","import { Layout } from '@solana/buffer-layout';\n\nexport interface EncodeDecode<T> {\n    decode(buffer: Buffer, offset?: number): T;\n    encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nexport const encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n","import { blob, Layout } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base';\n\nexport const bigInt =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntLE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferLE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const bigIntBE =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntBE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferBE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const u64 = bigInt(8);\n\nexport const u64be = bigIntBE(8);\n\nexport const u128 = bigInt(16);\n\nexport const u128be = bigIntBE(16);\n\nexport const u192 = bigInt(24);\n\nexport const u192be = bigIntBE(24);\n\nexport const u256 = bigInt(32);\n\nexport const u256be = bigIntBE(32);\n","import { Layout } from '@solana/buffer-layout';\nimport BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base';\nimport { u128 } from './bigint';\n\nexport const WAD = new BigNumber('1e+18');\n\nexport const decimal = (property?: string): Layout<BigNumber> => {\n    const layout = u128(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const decimalLayout = layout as Layout<unknown> as Layout<BigNumber>;\n\n    decimalLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset).toString();\n        return new BigNumber(src).div(WAD);\n    };\n\n    decimalLayout.encode = (decimal: BigNumber, buffer: Buffer, offset: number) => {\n        const src = BigInt(decimal.times(WAD).integerValue().toString());\n        return encode(src, buffer, offset);\n    };\n\n    return decimalLayout;\n};\n","import { Layout, u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base';\n\nexport const bool = (property?: string): Layout<boolean> => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const boolLayout = layout as Layout<unknown> as Layout<boolean>;\n\n    boolLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n\n    boolLayout.encode = (bool: boolean, buffer: Buffer, offset: number) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n\n    return boolLayout;\n};\n","import { blob, Layout } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base';\n\nexport const publicKey = (property?: string): Layout<PublicKey> => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const publicKeyLayout = layout as Layout<unknown> as Layout<PublicKey>;\n\n    publicKeyLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n\n    publicKeyLayout.encode = (publicKey: PublicKey, buffer: Buffer, offset: number) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n\n    return publicKeyLayout;\n};\n","/** Base class for errors */\nexport abstract class TokenError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    name = 'TokenAccountNotFoundError';\n}\n\n/** Thrown if a program state account is not a valid Account */\nexport class TokenInvalidAccountError extends TokenError {\n    name = 'TokenInvalidAccountError';\n}\n\n/** Thrown if a program state account does not contain valid data */\nexport class TokenInvalidAccountDataError extends TokenError {\n    name = 'TokenInvalidAccountDataError';\n}\n\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    name = 'TokenInvalidAccountOwnerError';\n}\n\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    name = 'TokenInvalidAccountSizeError';\n}\n\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    name = 'TokenInvalidMintError';\n}\n\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    name = 'TokenInvalidOwnerError';\n}\n\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    name = 'TokenOwnerOffCurveError';\n}\n\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    name = 'TokenInvalidInstructionProgramError';\n}\n\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    name = 'TokenInvalidInstructionKeysError';\n}\n\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    name = 'TokenInvalidInstructionDataError';\n}\n\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    name = 'TokenInvalidInstructionTypeError';\n}\n\n/** Thrown if the program does not support the desired instruction */\nexport class TokenUnsupportedInstructionError extends TokenError {\n    name = 'TokenUnsupportedInstructionError';\n}\n\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nexport class TokenTransferHookAccountNotFound extends TokenError {\n    name = 'TokenTransferHookAccountNotFound';\n}\n\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nexport class TokenTransferHookInvalidSeed extends TokenError {\n    name = 'TokenTransferHookInvalidSeed';\n}\n\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\n    name = 'TokenTransferHookAccountDataNotFound';\n}\n","export enum AccountType {\n    Uninitialized,\n    Mint,\n    Account,\n}\nexport const ACCOUNT_TYPE_SIZE = 1;\n","import { struct, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\n\n/** Information about a multisig */\nexport interface Multisig {\n    /** Address of the multisig */\n    address: PublicKey;\n    /** Number of signers required */\n    m: number;\n    /** Number of possible signers, corresponds to the number of `signers` that are valid */\n    n: number;\n    /** Is this mint initialized */\n    isInitialized: boolean;\n    /** Full set of signers, of which `n` are valid */\n    signer1: PublicKey;\n    signer2: PublicKey;\n    signer3: PublicKey;\n    signer4: PublicKey;\n    signer5: PublicKey;\n    signer6: PublicKey;\n    signer7: PublicKey;\n    signer8: PublicKey;\n    signer9: PublicKey;\n    signer10: PublicKey;\n    signer11: PublicKey;\n}\n\n/** Multisig as stored by the program */\nexport type RawMultisig = Omit<Multisig, 'address'>;\n\n/** Buffer layout for de/serializing a multisig */\nexport const MultisigLayout = struct<RawMultisig>([\n    u8('m'),\n    u8('n'),\n    bool('isInitialized'),\n    publicKey('signer1'),\n    publicKey('signer2'),\n    publicKey('signer3'),\n    publicKey('signer4'),\n    publicKey('signer5'),\n    publicKey('signer6'),\n    publicKey('signer7'),\n    publicKey('signer8'),\n    publicKey('signer9'),\n    publicKey('signer10'),\n    publicKey('signer11'),\n]);\n\n/** Byte length of a multisig */\nexport const MULTISIG_SIZE = MultisigLayout.span;\n\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nexport async function getMultisig(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Multisig> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n}\n\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nexport function unpackMultisig(\n    address: PublicKey,\n    info: AccountInfo<Buffer> | null,\n    programId = TOKEN_PROGRAM_ID\n): Multisig {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length != MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const multisig = MultisigLayout.decode(info.data);\n\n    return { address, ...multisig };\n}\n\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMultisig(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n}\n","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidAccountSizeError,\n} from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport type { ExtensionType } from '../extensions/extensionType.js';\nimport { getAccountLen } from '../extensions/extensionType.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n\n/** Information about a token account */\nexport interface Account {\n    /** Address of the account */\n    address: PublicKey;\n    /** Mint associated with the account */\n    mint: PublicKey;\n    /** Owner of the account */\n    owner: PublicKey;\n    /** Number of tokens the account holds */\n    amount: bigint;\n    /** Authority that can transfer tokens from the account */\n    delegate: PublicKey | null;\n    /** Number of tokens the delegate is authorized to transfer */\n    delegatedAmount: bigint;\n    /** True if the account is initialized */\n    isInitialized: boolean;\n    /** True if the account is frozen */\n    isFrozen: boolean;\n    /** True if the account is a native token account */\n    isNative: boolean;\n    /**\n     * If the account is a native token account, it must be rent-exempt. The rent-exempt reserve is the amount that must\n     * remain in the balance until the account is closed.\n     */\n    rentExemptReserve: bigint | null;\n    /** Optional authority to close the account */\n    closeAuthority: PublicKey | null;\n    tlvData: Buffer;\n}\n\n/** Token account state as stored by the program */\nexport enum AccountState {\n    Uninitialized = 0,\n    Initialized = 1,\n    Frozen = 2,\n}\n\n/** Token account as stored by the program */\nexport interface RawAccount {\n    mint: PublicKey;\n    owner: PublicKey;\n    amount: bigint;\n    delegateOption: 1 | 0;\n    delegate: PublicKey;\n    state: AccountState;\n    isNativeOption: 1 | 0;\n    isNative: bigint;\n    delegatedAmount: bigint;\n    closeAuthorityOption: 1 | 0;\n    closeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct<RawAccount>([\n    publicKey('mint'),\n    publicKey('owner'),\n    u64('amount'),\n    u32('delegateOption'),\n    publicKey('delegate'),\n    u8('state'),\n    u32('isNativeOption'),\n    u64('isNative'),\n    u64('delegatedAmount'),\n    u32('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Account> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackAccount(address, info, programId);\n}\n\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getMultipleAccounts(\n    connection: Connection,\n    addresses: PublicKey[],\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Account[]> {\n    const infos = await connection.getMultipleAccountsInfo(addresses, commitment);\n    return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n}\n\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n}\n\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccountWithExtensions(\n    connection: Connection,\n    extensions: ExtensionType[],\n    commitment?: Commitment\n): Promise<number> {\n    const accountLen = getAccountLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n}\n\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\nexport function unpackAccount(\n    address: PublicKey,\n    info: AccountInfo<Buffer> | null,\n    programId = TOKEN_PROGRAM_ID\n): Account {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const rawAccount = AccountLayout.decode(info.data.slice(0, ACCOUNT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > ACCOUNT_SIZE) {\n        if (info.data.length === MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Account) throw new TokenInvalidAccountError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n        tlvData,\n    };\n}\n","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidAccountSizeError,\n    TokenInvalidMintError,\n    TokenOwnerOffCurveError,\n} from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport type { ExtensionType } from '../extensions/extensionType.js';\nimport { getMintLen } from '../extensions/extensionType.js';\nimport { ACCOUNT_SIZE } from './account.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n\n/** Information about a mint */\nexport interface Mint {\n    /** Address of the mint */\n    address: PublicKey;\n    /**\n     * Optional authority used to mint new tokens. The mint authority may only be provided during mint creation.\n     * If no mint authority is present then the mint has a fixed supply and no further tokens may be minted.\n     */\n    mintAuthority: PublicKey | null;\n    /** Total supply of tokens */\n    supply: bigint;\n    /** Number of base 10 digits to the right of the decimal place */\n    decimals: number;\n    /** Is this mint initialized */\n    isInitialized: boolean;\n    /** Optional authority to freeze token accounts */\n    freezeAuthority: PublicKey | null;\n    /** Additional data for extension */\n    tlvData: Buffer;\n}\n\n/** Mint as stored by the program */\nexport interface RawMint {\n    mintAuthorityOption: 1 | 0;\n    mintAuthority: PublicKey;\n    supply: bigint;\n    decimals: number;\n    isInitialized: boolean;\n    freezeAuthorityOption: 1 | 0;\n    freezeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a mint */\nexport const MintLayout = struct<RawMint>([\n    u32('mintAuthorityOption'),\n    publicKey('mintAuthority'),\n    u64('supply'),\n    u8('decimals'),\n    bool('isInitialized'),\n    u32('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n\n/** Byte length of a mint */\nexport const MINT_SIZE = MintLayout.span;\n\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nexport async function getMint(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Mint> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n}\n\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nexport function unpackMint(address: PublicKey, info: AccountInfo<Buffer> | null, programId = TOKEN_PROGRAM_ID): Mint {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < MINT_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const rawMint = MintLayout.decode(info.data.slice(0, MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > MINT_SIZE) {\n        if (info.data.length <= ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data.length === MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Mint) throw new TokenInvalidMintError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\n\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMint(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n}\n\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMintWithExtensions(\n    connection: Connection,\n    extensions: ExtensionType[],\n    commitment?: Commitment\n): Promise<number> {\n    const mintLen = getMintLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n}\n\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nexport async function getAssociatedTokenAddress(\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) throw new TokenOwnerOffCurveError();\n\n    const [address] = await PublicKey.findProgramAddress(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedTokenProgramId\n    );\n\n    return address;\n}\n\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nexport function getAssociatedTokenAddressSync(\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): PublicKey {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) throw new TokenOwnerOffCurveError();\n\n    const [address] = PublicKey.findProgramAddressSync(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedTokenProgramId\n    );\n\n    return address;\n}\n","/** Instructions defined by the program */\nexport enum TokenInstruction {\n    InitializeMint = 0,\n    InitializeAccount = 1,\n    InitializeMultisig = 2,\n    Transfer = 3,\n    Approve = 4,\n    Revoke = 5,\n    SetAuthority = 6,\n    MintTo = 7,\n    Burn = 8,\n    CloseAccount = 9,\n    FreezeAccount = 10,\n    ThawAccount = 11,\n    TransferChecked = 12,\n    ApproveChecked = 13,\n    MintToChecked = 14,\n    BurnChecked = 15,\n    InitializeAccount2 = 16,\n    SyncNative = 17,\n    InitializeAccount3 = 18,\n    InitializeMultisig2 = 19,\n    InitializeMint2 = 20,\n    GetAccountDataSize = 21,\n    InitializeImmutableOwner = 22,\n    AmountToUiAmount = 23,\n    UiAmountToAmount = 24,\n    InitializeMintCloseAuthority = 25,\n    TransferFeeExtension = 26,\n    ConfidentialTransferExtension = 27,\n    DefaultAccountStateExtension = 28,\n    Reallocate = 29,\n    MemoTransferExtension = 30,\n    CreateNativeMint = 31,\n    InitializeNonTransferableMint = 32,\n    InterestBearingMintExtension = 33,\n    CpiGuardExtension = 34,\n    InitializePermanentDelegate = 35,\n    TransferHookExtension = 36,\n    // ConfidentialTransferFeeExtension = 37,\n    // WithdrawalExcessLamports = 38,\n    MetadataPointerExtension = 39,\n    GroupPointerExtension = 40,\n    GroupMemberPointerExtension = 41,\n}\n","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface TransferCheckedInstructionData {\n    instruction: TokenInstruction.TransferChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const transferCheckedInstructionData = struct<TransferCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedInstruction(\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(transferCheckedInstructionData.span);\n    transferCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid TransferChecked instruction */\nexport interface DecodedTransferCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        mint: AccountMeta;\n        destination: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.TransferChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedTransferCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { source, mint, destination, owner, multiSigners },\n        data,\n    } = decodeTransferCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferChecked) throw new TokenInvalidInstructionTypeError();\n    if (!source || !mint || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated TransferChecked instruction */\nexport interface DecodedTransferCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedInstructionUnchecked({\n    programId,\n    keys: [source, mint, destination, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedTransferCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferCheckedInstructionData.decode(data),\n    };\n}\n","import type { AccountMeta, Signer } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\n\n/** @internal */\nexport function addSigners(\n    keys: AccountMeta[],\n    ownerOrAuthority: PublicKey,\n    multiSigners: (Signer | PublicKey)[]\n): AccountMeta[] {\n    if (multiSigners.length) {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });\n        for (const signer of multiSigners) {\n            keys.push({\n                pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n                isSigner: true,\n                isWritable: false,\n            });\n        }\n    } else {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });\n    }\n    return keys;\n}\n","import type { PublicKey } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\n\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.alloc(0),\n        programId,\n        associatedTokenProgramId\n    );\n}\n\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.from([1]),\n        programId,\n        associatedTokenProgramId\n    );\n}\n\nfunction buildAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    instructionData: Buffer,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: instructionData,\n    });\n}\n\n/**\n * Construct a RecoverNested instruction\n *\n * @param nestedAssociatedToken             Nested associated token account (must be owned by `ownerAssociatedToken`)\n * @param nestedMint                        Token mint for the nested associated token account\n * @param destinationAssociatedToken        Wallet's associated token account\n * @param ownerAssociatedToken              Owner associated token account address (must be owned by `owner`)\n * @param ownerMint                         Token mint for the owner associated token account\n * @param owner                             Wallet address for the owner associated token account\n * @param programId                         SPL Token program account\n * @param associatedTokenProgramId          SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRecoverNestedInstruction(\n    nestedAssociatedToken: PublicKey,\n    nestedMint: PublicKey,\n    destinationAssociatedToken: PublicKey,\n    ownerAssociatedToken: PublicKey,\n    ownerMint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: nestedAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: nestedMint, isSigner: false, isWritable: false },\n        { pubkey: destinationAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerMint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: true, isWritable: true },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.from([2]),\n    });\n}\n","import{mnemonicToSeedSync as MJ} from\"@scure/bip39\";import{AccountLayout as OJ,TOKEN_PROGRAM_ID as WJ,createAssociatedTokenAccountInstruction as kJ,createTransferCheckedInstruction as CJ,getAccount as SJ,getAssociatedTokenAddress as h0,getMint as DJ} from\"@solana/spl-token\";import{Connection as HJ,Keypair as wJ,PublicKey as I8,SystemProgram as AJ,Transaction as r0,sendAndConfirmTransaction as LJ} from\"@solana/web3.js\";import{AssetValue as n0,Chain as a0,DerivationPath as RJ,RPCUrl as BJ,SwapKitError as i0,SwapKitNumber as gJ} from\"@swapkit/helpers\";var I0=function($){if(!Number.isSafeInteger($)||$<0)throw new Error(`positive integer expected, not ${$}`)};function Y$($){return $ instanceof Uint8Array||$!=null&&typeof $===\"object\"&&$.constructor.name===\"Uint8Array\"}var d=function($,...J){if(!Y$($))throw new Error(\"Uint8Array expected\");if(J.length>0&&!J.includes($.length))throw new Error(`Uint8Array expected of length ${J}, not of length=${$.length}`)},K0=function($){if(typeof $!==\"function\"||typeof $.create!==\"function\")throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");I0($.outputLen),I0($.blockLen)},G8=function($,J=!0){if($.destroyed)throw new Error(\"Hash instance has been destroyed\");if(J&&$.finished)throw new Error(\"Hash#digest() has already been called\")},G0=function($,J){d($);const Q=J.outputLen;if($.length<Q)throw new Error(`digestInto() expects output buffer of length at least ${Q}`)};var R8=typeof globalThis===\"object\"&&\"crypto\"in globalThis?globalThis.crypto:void 0;function _8($){d($);let J=\"\";for(let Q=0;Q<$.length;Q++)J+=I$[$[Q]];return J}var V0=function($){if($>=t._0&&$<=t._9)return $-t._0;if($>=t._A&&$<=t._F)return $-(t._A-10);if($>=t._a&&$<=t._f)return $-(t._a-10);return};function j0($){if(typeof $!==\"string\")throw new Error(\"hex string expected, got \"+typeof $);const J=$.length,Q=J/2;if(J%2)throw new Error(\"padded hex string expected, got unpadded hex of length \"+J);const q=new Uint8Array(Q);for(let N=0,X=0;N<Q;N++,X+=2){const I=V0($.charCodeAt(X)),K=V0($.charCodeAt(X+1));if(I===void 0||K===void 0){const Y=$[X]+$[X+1];throw new Error('hex string expected, got non-hex character \"'+Y+'\" at index '+X)}q[N]=I*16+K}return q}function W8($){if(typeof $!==\"string\")throw new Error(`utf8ToBytes expected string, got ${typeof $}`);return new Uint8Array((new TextEncoder()).encode($))}function k8($){if(typeof $===\"string\")$=W8($);return d($),$}function C8(...$){let J=0;for(let q=0;q<$.length;q++){const N=$[q];d(N),J+=N.length}const Q=new Uint8Array(J);for(let q=0,N=0;q<$.length;q++){const X=$[q];Q.set(X,N),N+=X.length}return Q}function V8($){const J=(q)=>$().update(k8(q)).digest(),Q=$();return J.outputLen=Q.outputLen,J.blockLen=Q.blockLen,J.create=()=>$(),J}function z0($=32){if(R8&&typeof R8.getRandomValues===\"function\")return R8.getRandomValues(new Uint8Array($));throw new Error(\"crypto.getRandomValues must be defined\")}/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */var X8=($)=>new DataView($.buffer,$.byteOffset,$.byteLength),l=($,J)=>$<<32-J|$>>>J,O8=($,J)=>$<<J|$>>>32-J>>>0,dJ=new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68;var I$=Array.from({length:256},($,J)=>J.toString(16).padStart(2,\"0\")),t={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};class S8{clone(){return this._cloneInto()}}var lJ={}.toString;var K$=function($,J,Q,q){if(typeof $.setBigUint64===\"function\")return $.setBigUint64(J,Q,q);const N=BigInt(32),X=BigInt(4294967295),I=Number(Q>>N&X),K=Number(Q&X),Y=q?4:0,V=q?0:4;$.setUint32(J+Y,I,q),$.setUint32(J+V,K,q)},U0=($,J,Q)=>$&J^~$&Q,T0=($,J,Q)=>$&J^$&Q^J&Q;class Z8 extends S8{constructor($,J,Q,q){super();this.blockLen=$,this.outputLen=J,this.padOffset=Q,this.isLE=q,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array($),this.view=X8(this.buffer)}update($){G8(this);const{view:J,buffer:Q,blockLen:q}=this;$=k8($);const N=$.length;for(let X=0;X<N;){const I=Math.min(q-this.pos,N-X);if(I===q){const K=X8($);for(;q<=N-X;X+=q)this.process(K,X);continue}if(Q.set($.subarray(X,X+I),this.pos),this.pos+=I,X+=I,this.pos===q)this.process(J,0),this.pos=0}return this.length+=$.length,this.roundClean(),this}digestInto($){G8(this),G0($,this),this.finished=!0;const{buffer:J,view:Q,blockLen:q,isLE:N}=this;let{pos:X}=this;if(J[X++]=128,this.buffer.subarray(X).fill(0),this.padOffset>q-X)this.process(Q,0),X=0;for(let Z=X;Z<q;Z++)J[Z]=0;K$(Q,q-8,BigInt(this.length*8),N),this.process(Q,0);const I=X8($),K=this.outputLen;if(K%4)throw new Error(\"_sha2: outputLen should be aligned to 32bit\");const Y=K/4,V=this.get();if(Y>V.length)throw new Error(\"_sha2: outputLen bigger than state\");for(let Z=0;Z<Y;Z++)I.setUint32(4*Z,V[Z],N)}digest(){const{buffer:$,outputLen:J}=this;this.digestInto($);const Q=$.slice(0,J);return this.destroy(),Q}_cloneInto($){$||($=new this.constructor),$.set(...this.get());const{blockLen:J,buffer:Q,length:q,finished:N,destroyed:X,pos:I}=this;if($.length=q,$.pos=I,$.finished=N,$.destroyed=X,q%J)$.buffer.set(Q);return $}}var M0=function($,J=!1){if(J)return{h:Number($&B8),l:Number($>>x8&B8)};return{h:Number($>>x8&B8)|0,l:Number($&B8)|0}},G$=function($,J=!1){let Q=new Uint32Array($.length),q=new Uint32Array($.length);for(let N=0;N<$.length;N++){const{h:X,l:I}=M0($[N],J);[Q[N],q[N]]=[X,I]}return[Q,q]},w$=function($,J,Q,q){const N=(J>>>0)+(q>>>0);return{h:$+Q+(N/4294967296|0)|0,l:N|0}},B8=BigInt(4294967295),x8=BigInt(32),V$=($,J)=>BigInt($>>>0)<<x8|BigInt(J>>>0),j$=($,J,Q)=>$>>>Q,z$=($,J,Q)=>$<<32-Q|J>>>Q,U$=($,J,Q)=>$>>>Q|J<<32-Q,T$=($,J,Q)=>$<<32-Q|J>>>Q,M$=($,J,Q)=>$<<64-Q|J>>>Q-32,O$=($,J,Q)=>$>>>Q-32|J<<64-Q,W$=($,J)=>J,k$=($,J)=>$,C$=($,J,Q)=>$<<Q|J>>>32-Q,S$=($,J,Q)=>J<<Q|$>>>32-Q,D$=($,J,Q)=>J<<Q-32|$>>>64-Q,H$=($,J,Q)=>$<<Q-32|J>>>64-Q,A$=($,J,Q)=>($>>>0)+(J>>>0)+(Q>>>0),L$=($,J,Q,q)=>J+Q+q+($/4294967296|0)|0,R$=($,J,Q,q)=>($>>>0)+(J>>>0)+(Q>>>0)+(q>>>0),B$=($,J,Q,q,N)=>J+Q+q+N+($/4294967296|0)|0,g$=($,J,Q,q,N)=>($>>>0)+(J>>>0)+(Q>>>0)+(q>>>0)+(N>>>0),E$=($,J,Q,q,N,X)=>J+Q+q+N+X+($/4294967296|0)|0;var v$={fromBig:M0,split:G$,toBig:V$,shrSH:j$,shrSL:z$,rotrSH:U$,rotrSL:T$,rotrBH:M$,rotrBL:O$,rotr32H:W$,rotr32L:k$,rotlSH:C$,rotlSL:S$,rotlBH:D$,rotlBL:H$,add:w$,add3L:A$,add3H:L$,add4L:R$,add4H:B$,add5H:E$,add5L:g$},M=v$;var[P$,f$]=(()=>M.split([\"0x428a2f98d728ae22\",\"0x7137449123ef65cd\",\"0xb5c0fbcfec4d3b2f\",\"0xe9b5dba58189dbbc\",\"0x3956c25bf348b538\",\"0x59f111f1b605d019\",\"0x923f82a4af194f9b\",\"0xab1c5ed5da6d8118\",\"0xd807aa98a3030242\",\"0x12835b0145706fbe\",\"0x243185be4ee4b28c\",\"0x550c7dc3d5ffb4e2\",\"0x72be5d74f27b896f\",\"0x80deb1fe3b1696b1\",\"0x9bdc06a725c71235\",\"0xc19bf174cf692694\",\"0xe49b69c19ef14ad2\",\"0xefbe4786384f25e3\",\"0x0fc19dc68b8cd5b5\",\"0x240ca1cc77ac9c65\",\"0x2de92c6f592b0275\",\"0x4a7484aa6ea6e483\",\"0x5cb0a9dcbd41fbd4\",\"0x76f988da831153b5\",\"0x983e5152ee66dfab\",\"0xa831c66d2db43210\",\"0xb00327c898fb213f\",\"0xbf597fc7beef0ee4\",\"0xc6e00bf33da88fc2\",\"0xd5a79147930aa725\",\"0x06ca6351e003826f\",\"0x142929670a0e6e70\",\"0x27b70a8546d22ffc\",\"0x2e1b21385c26c926\",\"0x4d2c6dfc5ac42aed\",\"0x53380d139d95b3df\",\"0x650a73548baf63de\",\"0x766a0abb3c77b2a8\",\"0x81c2c92e47edaee6\",\"0x92722c851482353b\",\"0xa2bfe8a14cf10364\",\"0xa81a664bbc423001\",\"0xc24b8b70d0f89791\",\"0xc76c51a30654be30\",\"0xd192e819d6ef5218\",\"0xd69906245565a910\",\"0xf40e35855771202a\",\"0x106aa07032bbd1b8\",\"0x19a4c116b8d2d0c8\",\"0x1e376c085141ab53\",\"0x2748774cdf8eeb99\",\"0x34b0bcb5e19b48a8\",\"0x391c0cb3c5c95a63\",\"0x4ed8aa4ae3418acb\",\"0x5b9cca4f7763e373\",\"0x682e6ff3d6b2b8a3\",\"0x748f82ee5defb2fc\",\"0x78a5636f43172f60\",\"0x84c87814a1f0ab72\",\"0x8cc702081a6439ec\",\"0x90befffa23631e28\",\"0xa4506cebde82bde9\",\"0xbef9a3f7b2c67915\",\"0xc67178f2e372532b\",\"0xca273eceea26619c\",\"0xd186b8c721c0c207\",\"0xeada7dd6cde0eb1e\",\"0xf57d4f7fee6ed178\",\"0x06f067aa72176fba\",\"0x0a637dc5a2c898a6\",\"0x113f9804bef90dae\",\"0x1b710b35131c471b\",\"0x28db77f523047d84\",\"0x32caab7b40c72493\",\"0x3c9ebe0a15c9bebc\",\"0x431d67c49c100d4c\",\"0x4cc5d4becb3e42b6\",\"0x597f299cfc657e2a\",\"0x5fcb6fab3ad6faec\",\"0x6c44198c4a475817\"].map(($)=>BigInt($))))(),$8=new Uint32Array(80),J8=new Uint32Array(80);class O0 extends Z8{constructor(){super(128,64,16,!1);this.Ah=1779033703|0,this.Al=4089235720|0,this.Bh=3144134277|0,this.Bl=2227873595|0,this.Ch=1013904242|0,this.Cl=4271175723|0,this.Dh=2773480762|0,this.Dl=1595750129|0,this.Eh=1359893119|0,this.El=2917565137|0,this.Fh=2600822924|0,this.Fl=725511199|0,this.Gh=528734635|0,this.Gl=4215389547|0,this.Hh=1541459225|0,this.Hl=327033209|0}get(){const{Ah:$,Al:J,Bh:Q,Bl:q,Ch:N,Cl:X,Dh:I,Dl:K,Eh:Y,El:V,Fh:Z,Fl:U,Gh:z,Gl:w,Hh:S,Hl:B}=this;return[$,J,Q,q,N,X,I,K,Y,V,Z,U,z,w,S,B]}set($,J,Q,q,N,X,I,K,Y,V,Z,U,z,w,S,B){this.Ah=$|0,this.Al=J|0,this.Bh=Q|0,this.Bl=q|0,this.Ch=N|0,this.Cl=X|0,this.Dh=I|0,this.Dl=K|0,this.Eh=Y|0,this.El=V|0,this.Fh=Z|0,this.Fl=U|0,this.Gh=z|0,this.Gl=w|0,this.Hh=S|0,this.Hl=B|0}process($,J){for(let W=0;W<16;W++,J+=4)$8[W]=$.getUint32(J),J8[W]=$.getUint32(J+=4);for(let W=16;W<80;W++){const b=$8[W-15]|0,L=J8[W-15]|0,O=M.rotrSH(b,L,1)^M.rotrSH(b,L,8)^M.shrSH(b,L,7),r=M.rotrSL(b,L,1)^M.rotrSL(b,L,8)^M.shrSL(b,L,7),u=$8[W-2]|0,y=J8[W-2]|0,N8=M.rotrSH(u,y,19)^M.rotrBH(u,y,61)^M.shrSH(u,y,6),K8=M.rotrSL(u,y,19)^M.rotrBL(u,y,61)^M.shrSL(u,y,6),n=M.add4L(r,K8,J8[W-7],J8[W-16]),T8=M.add4H(n,O,N8,$8[W-7],$8[W-16]);$8[W]=T8|0,J8[W]=n|0}let{Ah:Q,Al:q,Bh:N,Bl:X,Ch:I,Cl:K,Dh:Y,Dl:V,Eh:Z,El:U,Fh:z,Fl:w,Gh:S,Gl:B,Hh:v,Hl:_}=this;for(let W=0;W<80;W++){const b=M.rotrSH(Z,U,14)^M.rotrSH(Z,U,18)^M.rotrBH(Z,U,41),L=M.rotrSL(Z,U,14)^M.rotrSL(Z,U,18)^M.rotrBL(Z,U,41),O=Z&z^~Z&S,r=U&w^~U&B,u=M.add5L(_,L,r,f$[W],J8[W]),y=M.add5H(u,v,b,O,P$[W],$8[W]),N8=u|0,K8=M.rotrSH(Q,q,28)^M.rotrBH(Q,q,34)^M.rotrBH(Q,q,39),n=M.rotrSL(Q,q,28)^M.rotrBL(Q,q,34)^M.rotrBL(Q,q,39),T8=Q&N^Q&I^N&I,M8=q&X^q&K^X&K;v=S|0,_=B|0,S=z|0,B=w|0,z=Z|0,w=U|0,{h:Z,l:U}=M.add(Y|0,V|0,y|0,N8|0),Y=I|0,V=K|0,I=N|0,K=X|0,N=Q|0,X=q|0;const w8=M.add3L(N8,n,M8);Q=M.add3H(w8,y,K8,T8),q=w8|0}({h:Q,l:q}=M.add(this.Ah|0,this.Al|0,Q|0,q|0)),{h:N,l:X}=M.add(this.Bh|0,this.Bl|0,N|0,X|0),{h:I,l:K}=M.add(this.Ch|0,this.Cl|0,I|0,K|0),{h:Y,l:V}=M.add(this.Dh|0,this.Dl|0,Y|0,V|0),{h:Z,l:U}=M.add(this.Eh|0,this.El|0,Z|0,U|0),{h:z,l:w}=M.add(this.Fh|0,this.Fl|0,z|0,w|0),{h:S,l:B}=M.add(this.Gh|0,this.Gl|0,S|0,B|0),{h:v,l:_}=M.add(this.Hh|0,this.Hl|0,v|0,_|0),this.set(Q,q,N,X,I,K,Y,V,Z,U,z,w,S,B,v,_)}roundClean(){$8.fill(0),J8.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}var j8=V8(()=>new O0);function y8($){return $ instanceof Uint8Array||$!=null&&typeof $===\"object\"&&$.constructor.name===\"Uint8Array\"}function c8($){if(!y8($))throw new Error(\"Uint8Array expected\")}function g8($){c8($);let J=\"\";for(let Q=0;Q<$.length;Q++)J+=_$[$[Q]];return J}function k0($){if(typeof $!==\"string\")throw new Error(\"hex string expected, got \"+typeof $);return BigInt($===\"\"?\"0\":`0x${$}`)}var W0=function($){if($>=s._0&&$<=s._9)return $-s._0;if($>=s._A&&$<=s._F)return $-(s._A-10);if($>=s._a&&$<=s._f)return $-(s._a-10);return};function C0($){if(typeof $!==\"string\")throw new Error(\"hex string expected, got \"+typeof $);const J=$.length,Q=J/2;if(J%2)throw new Error(\"padded hex string expected, got unpadded hex of length \"+J);const q=new Uint8Array(Q);for(let N=0,X=0;N<Q;N++,X+=2){const I=W0($.charCodeAt(X)),K=W0($.charCodeAt(X+1));if(I===void 0||K===void 0){const Y=$[X]+$[X+1];throw new Error('hex string expected, got non-hex character \"'+Y+'\" at index '+X)}q[N]=I*16+K}return q}function S0($){return k0(g8($))}function z8($){return c8($),k0(g8(Uint8Array.from($).reverse()))}function u8($,J){return C0($.toString(16).padStart(J*2,\"0\"))}function D8($,J){return u8($,J).reverse()}function i($,J,Q){let q;if(typeof J===\"string\")try{q=C0(J)}catch(X){throw new Error(`${$} must be valid hex string, got \"${J}\". Cause: ${X}`)}else if(y8(J))q=Uint8Array.from(J);else throw new Error(`${$} must be hex string or Uint8Array`);const N=q.length;if(typeof Q===\"number\"&&N!==Q)throw new Error(`${$} expected ${Q} bytes, got ${N}`);return q}function m8(...$){let J=0;for(let q=0;q<$.length;q++){const N=$[q];c8(N),J+=N.length}const Q=new Uint8Array(J);for(let q=0,N=0;q<$.length;q++){const X=$[q];Q.set(X,N),N+=X.length}return Q}function U8($,J,Q={}){const q=(N,X,I)=>{const K=x$[X];if(typeof K!==\"function\")throw new Error(`Invalid validator \"${X}\", expected function`);const Y=$[N];if(I&&Y===void 0)return;if(!K(Y,$))throw new Error(`Invalid param ${String(N)}=${Y} (${typeof Y}), expected ${X}`)};for(let[N,X]of Object.entries(J))q(N,X,!1);for(let[N,X]of Object.entries(Q))q(N,X,!0);return $}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */var eJ=BigInt(0),F$=BigInt(1),b$=BigInt(2),_$=Array.from({length:256},($,J)=>J.toString(16).padStart(2,\"0\")),s={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102},D0=($)=>(b$<<BigInt($-1))-F$;var x$={bigint:($)=>typeof $===\"bigint\",function:($)=>typeof $===\"function\",boolean:($)=>typeof $===\"boolean\",string:($)=>typeof $===\"string\",stringOrUint8Array:($)=>typeof $===\"string\"||y8($),isSafeInteger:($)=>Number.isSafeInteger($),array:($)=>Array.isArray($),field:($,J)=>J.Fp.isValid($),hash:($)=>typeof $===\"function\"&&Number.isSafeInteger($.outputLen)};function E($,J){const Q=$%J;return Q>=P?Q:J+Q}function d$($,J,Q){if(Q<=P||J<P)throw new Error(\"Expected power/modulo > 0\");if(Q===g)return P;let q=g;while(J>P){if(J&g)q=q*$%Q;$=$*$%Q,J>>=g}return q}function p($,J,Q){let q=$;while(J-- >P)q*=q,q%=Q;return q}function A0($,J){if($===P||J<=P)throw new Error(`invert: expected positive integers, got n=${$} mod=${J}`);let Q=E($,J),q=J,N=P,X=g,I=g,K=P;while(Q!==P){const V=q/Q,Z=q%Q,U=N-I*V,z=X-K*V;q=Q,Q=Z,N=I,X=K,I=U,K=z}if(q!==g)throw new Error(\"invert: does not exist\");return E(N,J)}function l$($){const J=($-g)/Y8;let Q,q,N;for(Q=$-g,q=0;Q%Y8===P;Q/=Y8,q++);for(N=Y8;N<$&&d$(N,J,$)!==$-g;N++);if(q===1){const I=($+g)/d8;return function K(Y,V){const Z=Y.pow(V,I);if(!Y.eql(Y.sqr(Z),V))throw new Error(\"Cannot find square root\");return Z}}const X=(Q+g)/Y8;return function I(K,Y){if(K.pow(Y,J)===K.neg(K.ONE))throw new Error(\"Cannot find square root\");let V=q,Z=K.pow(K.mul(K.ONE,N),Q),U=K.pow(Y,X),z=K.pow(Y,Q);while(!K.eql(z,K.ONE)){if(K.eql(z,K.ZERO))return K.ZERO;let w=1;for(let B=K.sqr(z);w<V;w++){if(K.eql(B,K.ONE))break;B=K.sqr(B)}const S=K.pow(Z,g<<BigInt(V-w-1));Z=K.sqr(S),U=K.mul(U,S),z=K.mul(z,Z),V=w}return U}}function p$($){if($%d8===c$){const J=($+g)/d8;return function Q(q,N){const X=q.pow(N,J);if(!q.eql(q.sqr(X),N))throw new Error(\"Cannot find square root\");return X}}if($%w0===H0){const J=($-H0)/w0;return function Q(q,N){const X=q.mul(N,Y8),I=q.pow(X,J),K=q.mul(N,I),Y=q.mul(q.mul(K,Y8),I),V=q.mul(K,q.sub(Y,q.ONE));if(!q.eql(q.sqr(V),N))throw new Error(\"Cannot find square root\");return V}}if($%m$===u$);return l$($)}function R0($){const J={ORDER:\"bigint\",MASK:\"bigint\",BYTES:\"isSafeInteger\",BITS:\"isSafeInteger\"},Q=h$.reduce((q,N)=>{return q[N]=\"function\",q},J);return U8($,Q)}function i$($,J,Q){if(Q<P)throw new Error(\"Expected power > 0\");if(Q===P)return $.ONE;if(Q===g)return J;let q=$.ONE,N=J;while(Q>P){if(Q&g)q=$.mul(q,N);N=$.sqr(N),Q>>=g}return q}function r$($,J){const Q=new Array(J.length),q=J.reduce((X,I,K)=>{if($.is0(I))return X;return Q[K]=X,$.mul(X,I)},$.ONE),N=$.inv(q);return J.reduceRight((X,I,K)=>{if($.is0(I))return X;return Q[K]=$.mul(X,Q[K]),$.mul(X,I)},N),Q}function l8($,J){const Q=J!==void 0?J:$.toString(2).length,q=Math.ceil(Q/8);return{nBitLength:Q,nByteLength:q}}function B0($,J,Q=!1,q={}){if($<=P)throw new Error(`Expected Field ORDER > 0, got ${$}`);const{nBitLength:N,nByteLength:X}=l8($,J);if(X>2048)throw new Error(\"Field lengths over 2048 bytes are not supported\");const I=p$($),K=Object.freeze({ORDER:$,BITS:N,BYTES:X,MASK:D0(N),ZERO:P,ONE:g,create:(Y)=>E(Y,$),isValid:(Y)=>{if(typeof Y!==\"bigint\")throw new Error(`Invalid field element: expected bigint, got ${typeof Y}`);return P<=Y&&Y<$},is0:(Y)=>Y===P,isOdd:(Y)=>(Y&g)===g,neg:(Y)=>E(-Y,$),eql:(Y,V)=>Y===V,sqr:(Y)=>E(Y*Y,$),add:(Y,V)=>E(Y+V,$),sub:(Y,V)=>E(Y-V,$),mul:(Y,V)=>E(Y*V,$),pow:(Y,V)=>i$(K,Y,V),div:(Y,V)=>E(Y*A0(V,$),$),sqrN:(Y)=>Y*Y,addN:(Y,V)=>Y+V,subN:(Y,V)=>Y-V,mulN:(Y,V)=>Y*V,inv:(Y)=>A0(Y,$),sqrt:q.sqrt||((Y)=>I(K,Y)),invertBatch:(Y)=>r$(K,Y),cmov:(Y,V,Z)=>Z?V:Y,toBytes:(Y)=>Q?D8(Y,X):u8(Y,X),fromBytes:(Y)=>{if(Y.length!==X)throw new Error(`Fp.fromBytes: expected ${X}, got ${Y.length}`);return Q?z8(Y):S0(Y)}});return Object.freeze(K)}function g0($,J){if(!$.isOdd)throw new Error(\"Field doesn't have isOdd\");const Q=$.sqrt(J);return $.isOdd(Q)?$.neg(Q):Q}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */var P=BigInt(0),g=BigInt(1),Y8=BigInt(2),c$=BigInt(3),d8=BigInt(4),H0=BigInt(5),w0=BigInt(8),u$=BigInt(9),m$=BigInt(16),L0=($,J)=>(E($,J)&g)===g,h$=[\"create\",\"isValid\",\"is0\",\"neg\",\"inv\",\"sqrt\",\"sqr\",\"eql\",\"add\",\"sub\",\"mul\",\"pow\",\"div\",\"addN\",\"subN\",\"mulN\",\"sqrN\"];function E0($,J){const Q=(N,X)=>{const I=X.negate();return N?I:X},q=(N)=>{const X=Math.ceil(J/N)+1,I=2**(N-1);return{windows:X,windowSize:I}};return{constTimeNegate:Q,unsafeLadder(N,X){let I=$.ZERO,K=N;while(X>n$){if(X&p8)I=I.add(K);K=K.double(),X>>=p8}return I},precomputeWindow(N,X){const{windows:I,windowSize:K}=q(X),Y=[];let V=N,Z=V;for(let U=0;U<I;U++){Z=V,Y.push(Z);for(let z=1;z<K;z++)Z=Z.add(V),Y.push(Z);V=Z.double()}return Y},wNAF(N,X,I){const{windows:K,windowSize:Y}=q(N);let{ZERO:V,BASE:Z}=$;const U=BigInt(2**N-1),z=2**N,w=BigInt(N);for(let S=0;S<K;S++){const B=S*Y;let v=Number(I&U);if(I>>=w,v>Y)v-=z,I+=p8;const _=B,W=B+Math.abs(v)-1,b=S%2!==0,L=v<0;if(v===0)Z=Z.add(Q(b,X[_]));else V=V.add(Q(L,X[W]))}return{p:V,f:Z}},wNAFCached(N,X,I,K){const Y=N._WINDOW_SIZE||1;let V=X.get(N);if(!V){if(V=this.precomputeWindow(N,Y),Y!==1)X.set(N,K(V))}return this.wNAF(Y,V,I)}}}function v0($){return R0($.Fp),U8($,{n:\"bigint\",h:\"bigint\",Gx:\"field\",Gy:\"field\"},{nBitLength:\"isSafeInteger\",nByteLength:\"isSafeInteger\"}),Object.freeze({...l8($.n,$.nBitLength),...$,...{p:$.Fp.ORDER}})}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */var n$=BigInt(0),p8=BigInt(1);var t$=function($){const J=v0($);return U8($,{hash:\"function\",a:\"bigint\",d:\"bigint\",randomBytes:\"function\"},{adjustScalarBytes:\"function\",domain:\"function\",uvRatio:\"function\",mapToCurve:\"function\"}),Object.freeze({...J})};function v8($){const J=t$($),{Fp:Q,n:q,prehash:N,hash:X,randomBytes:I,nByteLength:K,h:Y}=J,V=E8<<BigInt(K*8)-c,Z=Q.create,U=J.uvRatio||((G,j)=>{try{return{isValid:!0,value:Q.sqrt(G*Q.inv(j))}}catch(T){return{isValid:!1,value:h}}}),z=J.adjustScalarBytes||((G)=>G),w=J.domain||((G,j,T)=>{if(j.length||T)throw new Error(\"Contexts/pre-hash are not supported\");return G}),S=(G)=>typeof G===\"bigint\"&&h<G,B=(G,j)=>S(G)&&S(j)&&G<j,v=(G)=>G===h||B(G,V);function _(G,j){if(B(G,j))return G;throw new Error(`Expected valid scalar < ${j}, got ${typeof G} ${G}`)}function W(G){return G===h?G:_(G,q)}const b=new Map;function L(G){if(!(G instanceof O))throw new Error(\"ExtendedPoint expected\")}class O{constructor(G,j,T,k){if(this.ex=G,this.ey=j,this.ez=T,this.et=k,!v(G))throw new Error(\"x required\");if(!v(j))throw new Error(\"y required\");if(!v(T))throw new Error(\"z required\");if(!v(k))throw new Error(\"t required\")}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static fromAffine(G){if(G instanceof O)throw new Error(\"extended point not allowed\");const{x:j,y:T}=G||{};if(!v(j)||!v(T))throw new Error(\"invalid affine point\");return new O(j,T,c,Z(j*T))}static normalizeZ(G){const j=Q.invertBatch(G.map((T)=>T.ez));return G.map((T,k)=>T.toAffine(j[k])).map(O.fromAffine)}_setWindowSize(G){this._WINDOW_SIZE=G,b.delete(this)}assertValidity(){const{a:G,d:j}=J;if(this.is0())throw new Error(\"bad point: ZERO\");const{ex:T,ey:k,ez:D,et:A}=this,H=Z(T*T),C=Z(k*k),R=Z(D*D),f=Z(R*R),F=Z(H*G),m=Z(R*Z(F+C)),x=Z(f+Z(j*Z(H*C)));if(m!==x)throw new Error(\"bad point: equation left != right (1)\");const a=Z(T*k),o=Z(D*A);if(a!==o)throw new Error(\"bad point: equation left != right (2)\")}equals(G){L(G);const{ex:j,ey:T,ez:k}=this,{ex:D,ey:A,ez:H}=G,C=Z(j*H),R=Z(D*k),f=Z(T*H),F=Z(A*k);return C===R&&f===F}is0(){return this.equals(O.ZERO)}negate(){return new O(Z(-this.ex),this.ey,this.ez,Z(-this.et))}double(){const{a:G}=J,{ex:j,ey:T,ez:k}=this,D=Z(j*j),A=Z(T*T),H=Z(E8*Z(k*k)),C=Z(G*D),R=j+T,f=Z(Z(R*R)-D-A),F=C+A,m=F-H,x=C-A,a=Z(f*m),o=Z(F*x),A8=Z(f*x),L8=Z(m*F);return new O(a,o,L8,A8)}add(G){L(G);const{a:j,d:T}=J,{ex:k,ey:D,ez:A,et:H}=this,{ex:C,ey:R,ez:f,et:F}=G;if(j===BigInt(-1)){const J0=Z((D-k)*(R+C)),Q0=Z((D+k)*(R-C)),b8=Z(Q0-J0);if(b8===h)return this.double();const q0=Z(A*E8*F),N0=Z(H*E8*f),X0=N0+q0,Z0=Q0+J0,Y0=N0-q0,q$=Z(X0*b8),N$=Z(Z0*Y0),X$=Z(X0*Y0),Z$=Z(b8*Z0);return new O(q$,N$,Z$,X$)}const m=Z(k*C),x=Z(D*R),a=Z(H*T*F),o=Z(A*f),A8=Z((k+D)*(C+R)-m-x),L8=o-a,e8=o+a,$0=Z(x-j*m),e0=Z(A8*L8),$$=Z(e8*$0),J$=Z(A8*$0),Q$=Z(L8*e8);return new O(e0,$$,Q$,J$)}subtract(G){return this.add(G.negate())}wNAF(G){return y.wNAFCached(this,b,G,O.normalizeZ)}multiply(G){const{p:j,f:T}=this.wNAF(_(G,q));return O.normalizeZ([j,T])[0]}multiplyUnsafe(G){let j=W(G);if(j===h)return u;if(this.equals(u)||j===c)return this;if(this.equals(r))return this.wNAF(j).p;return y.unsafeLadder(this,j)}isSmallOrder(){return this.multiplyUnsafe(Y).is0()}isTorsionFree(){return y.unsafeLadder(this,q).is0()}toAffine(G){const{ex:j,ey:T,ez:k}=this,D=this.is0();if(G==null)G=D?a$:Q.inv(k);const A=Z(j*G),H=Z(T*G),C=Z(k*G);if(D)return{x:h,y:c};if(C!==c)throw new Error(\"invZ was invalid\");return{x:A,y:H}}clearCofactor(){const{h:G}=J;if(G===c)return this;return this.multiplyUnsafe(G)}static fromHex(G,j=!1){const{d:T,a:k}=J,D=Q.BYTES;G=i(\"pointHex\",G,D);const A=G.slice(),H=G[D-1];A[D-1]=H&~128;const C=z8(A);if(C===h);else if(j)_(C,V);else _(C,Q.ORDER);const R=Z(C*C),f=Z(R-c),F=Z(T*R-k);let{isValid:m,value:x}=U(f,F);if(!m)throw new Error(\"Point.fromHex: invalid y coordinate\");const a=(x&c)===c,o=(H&128)!==0;if(!j&&x===h&&o)throw new Error(\"Point.fromHex: x=0 and x_0=1\");if(o!==a)x=Z(-x);return O.fromAffine({x,y:C})}static fromPrivateKey(G){return n(G).point}toRawBytes(){const{x:G,y:j}=this.toAffine(),T=D8(j,Q.BYTES);return T[T.length-1]|=G&c?128:0,T}toHex(){return g8(this.toRawBytes())}}O.BASE=new O(J.Gx,J.Gy,c,Z(J.Gx*J.Gy)),O.ZERO=new O(h,c,c,h);const{BASE:r,ZERO:u}=O,y=E0(O,K*8);function N8(G){return E(G,q)}function K8(G){return N8(z8(G))}function n(G){const j=K;G=i(\"private key\",G,j);const T=i(\"hashed private key\",X(G),2*j),k=z(T.slice(0,j)),D=T.slice(j,2*j),A=K8(k),H=r.multiply(A),C=H.toRawBytes();return{head:k,prefix:D,scalar:A,point:H,pointBytes:C}}function T8(G){return n(G).pointBytes}function M8(G=new Uint8Array,...j){const T=m8(...j);return K8(X(w(T,i(\"context\",G),!!N)))}function w8(G,j,T={}){if(G=i(\"message\",G),N)G=N(G);const{prefix:k,scalar:D,pointBytes:A}=n(j),H=M8(T.context,k,G),C=r.multiply(H).toRawBytes(),R=M8(T.context,C,A,G),f=N8(H+R*D);W(f);const F=m8(C,D8(f,Q.BYTES));return i(\"result\",F,K*2)}const t0=o$;function s0(G,j,T,k=t0){const{context:D,zip215:A}=k,H=Q.BYTES;if(G=i(\"signature\",G,2*H),j=i(\"message\",j),N)j=N(j);const C=z8(G.slice(H,2*H));let R,f,F;try{R=O.fromHex(T,A),f=O.fromHex(G.slice(0,H),A),F=r.multiplyUnsafe(C)}catch(a){return!1}if(!A&&R.isSmallOrder())return!1;const m=M8(D,f.toRawBytes(),R.toRawBytes(),j);return f.add(R.multiplyUnsafe(m)).subtract(F).clearCofactor().equals(O.ZERO)}return r._setWindowSize(8),{CURVE:J,getPublicKey:T8,sign:w8,verify:s0,ExtendedPoint:O,utils:{getExtendedPublicKey:n,randomPrivateKey:()=>I(Q.BYTES),precompute(G=8,j=O.BASE){return j._setWindowSize(G),j.multiply(BigInt(3)),j}}}}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */var h=BigInt(0),c=BigInt(1),E8=BigInt(2),a$=BigInt(8),o$={zip215:!0};var QJ=function($){const J=i8,q=$*$%J*$%J,N=p(q,h8,J)*q%J,X=p(N,s$,J)*$%J,I=p(X,e$,J)*X%J,K=p(I,f0,J)*I%J,Y=p(K,$J,J)*K%J,V=p(Y,JJ,J)*Y%J,Z=p(V,F0,J)*V%J,U=p(Z,F0,J)*V%J,z=p(U,f0,J)*I%J;return{pow_p_5_8:p(z,h8,J)*$%J,b2:q}},qJ=function($){return $[0]&=248,$[31]&=127,$[31]|=64,$},NJ=function($,J){const Q=i8,q=E(J*J*J,Q),N=E(q*q*J,Q),X=QJ($*N).pow_p_5_8;let I=E($*q*X,Q);const K=E(J*I*I,Q),Y=I,V=E(I*P0,Q),Z=K===$,U=K===E(-$,Q),z=K===E(-$*P0,Q);if(Z)I=Y;if(U||z)I=V;if(L0(I,Q))I=E(-I,Q);return{isValid:Z||U,value:I}},b0=function($,J,Q){if(J.length>255)throw new Error(\"Context is too big\");return C8(W8(\"SigEd25519 no Ed25519 collisions\"),new Uint8Array([Q?1:0,J.length]),J,$)};/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */var i8=BigInt(\"57896044618658097711785492504343953926634992332820282019728792003956564819949\"),P0=BigInt(\"19681161376707505956807079304988542015446066515923890162744021073123829784752\"),zQ=BigInt(0),s$=BigInt(1),h8=BigInt(2),e$=BigInt(5),f0=BigInt(10),$J=BigInt(20),JJ=BigInt(40),F0=BigInt(80);var e=B0(i8,void 0,!0),r8={a:BigInt(-1),d:BigInt(\"37095705934669439343138083508754565189542113879843219016388785533085940283555\"),Fp:e,n:BigInt(\"7237005577332262213973186563042994240857116359379907606001950938285454250989\"),h:BigInt(8),Gx:BigInt(\"15112221349535400772501151409588531511454012693041857206046113283949847762202\"),Gy:BigInt(\"46316835694926478169428394003475163141307993866256225615783033603165251855960\"),hash:j8,randomBytes:z0,adjustScalarBytes:qJ,uvRatio:NJ},P8=v8(r8),UQ=v8({...r8,domain:b0}),TQ=v8({...r8,domain:b0,prehash:j8});var XJ=(e.ORDER+BigInt(3))/BigInt(8),MQ=e.pow(h8,XJ),OQ=e.sqrt(e.neg(e.ONE)),WQ=(e.ORDER-BigInt(5))/BigInt(8),kQ=BigInt(486662),CQ=g0(e,e.neg(BigInt(486664)));var SQ=BigInt(\"25063068953384623474111414158702152701244531502492656460079210482610430750235\"),DQ=BigInt(\"54469307008909316920995813868745141605393597292927456921205312896311721017578\"),HQ=BigInt(\"1159843021668779879193775521855586647937357759715417654439879720876111806838\"),wQ=BigInt(\"40440834346308536858101042469323190826248399146238708352240133220865137265952\");var AQ=BigInt(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");class n8 extends S8{constructor($,J){super();this.finished=!1,this.destroyed=!1,K0($);const Q=k8(J);if(this.iHash=$.create(),typeof this.iHash.update!==\"function\")throw new Error(\"Expected instance of class which extends utils.Hash\");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const q=this.blockLen,N=new Uint8Array(q);N.set(Q.length>q?$.create().update(Q).digest():Q);for(let X=0;X<N.length;X++)N[X]^=54;this.iHash.update(N),this.oHash=$.create();for(let X=0;X<N.length;X++)N[X]^=54^92;this.oHash.update(N),N.fill(0)}update($){return G8(this),this.iHash.update($),this}digestInto($){G8(this),d($,this.outputLen),this.finished=!0,this.iHash.digestInto($),this.oHash.update($),this.oHash.digestInto($),this.destroy()}digest(){const $=new Uint8Array(this.oHash.outputLen);return this.digestInto($),$}_cloneInto($){$||($=Object.create(Object.getPrototypeOf(this),{}));const{oHash:J,iHash:Q,finished:q,destroyed:N,blockLen:X,outputLen:I}=this;return $=$,$.finished=q,$.destroyed=N,$.blockLen=X,$.outputLen=I,$.oHash=J._cloneInto($.oHash),$.iHash=Q._cloneInto($.iHash),$}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}var f8=($,J,Q)=>new n8($,J).update(Q).digest();f8.create=($,J)=>new n8($,J);var _0=function($,J,Q,q){if($===0)return J^Q^q;else if($===1)return J&Q|~J&q;else if($===2)return(J|~Q)^q;else if($===3)return J&q|Q&~q;else return J^(Q|~q)},ZJ=new Uint8Array([7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8]),x0=new Uint8Array(new Array(16).fill(0).map(($,J)=>J)),YJ=x0.map(($)=>(9*$+5)%16),a8=[x0],o8=[YJ];for(let $=0;$<4;$++)for(let J of[a8,o8])J.push(J[$].map((Q)=>ZJ[Q]));var y0=[[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8],[12,13,11,15,6,9,9,7,12,15,11,13,7,8,7,7],[13,15,14,11,7,7,6,8,13,14,13,12,5,5,6,9],[14,11,12,14,8,6,5,5,15,12,15,14,9,9,8,6],[15,12,13,13,9,5,8,6,14,11,12,11,8,6,5,5]].map(($)=>new Uint8Array($)),IJ=a8.map(($,J)=>$.map((Q)=>y0[J][Q])),KJ=o8.map(($,J)=>$.map((Q)=>y0[J][Q])),GJ=new Uint32Array([0,1518500249,1859775393,2400959708,2840853838]),VJ=new Uint32Array([1352829926,1548603684,1836072691,2053994217,0]),F8=new Uint32Array(16);class c0 extends Z8{constructor(){super(64,20,8,!0);this.h0=1732584193|0,this.h1=4023233417|0,this.h2=2562383102|0,this.h3=271733878|0,this.h4=3285377520|0}get(){const{h0:$,h1:J,h2:Q,h3:q,h4:N}=this;return[$,J,Q,q,N]}set($,J,Q,q,N){this.h0=$|0,this.h1=J|0,this.h2=Q|0,this.h3=q|0,this.h4=N|0}process($,J){for(let z=0;z<16;z++,J+=4)F8[z]=$.getUint32(J,!0);let Q=this.h0|0,q=Q,N=this.h1|0,X=N,I=this.h2|0,K=I,Y=this.h3|0,V=Y,Z=this.h4|0,U=Z;for(let z=0;z<5;z++){const w=4-z,S=GJ[z],B=VJ[z],v=a8[z],_=o8[z],W=IJ[z],b=KJ[z];for(let L=0;L<16;L++){const O=O8(Q+_0(z,N,I,Y)+F8[v[L]]+S,W[L])+Z|0;Q=Z,Z=Y,Y=O8(I,10)|0,I=N,N=O}for(let L=0;L<16;L++){const O=O8(q+_0(w,X,K,V)+F8[_[L]]+B,b[L])+U|0;q=U,U=V,V=O8(K,10)|0,K=X,X=O}}this.set(this.h1+I+V|0,this.h2+Y+U|0,this.h3+Z+q|0,this.h4+Q+X|0,this.h0+N+K|0)}roundClean(){F8.fill(0)}destroy(){this.destroyed=!0,this.buffer.fill(0),this.set(0,0,0,0,0)}}var u0=V8(()=>new c0);var jJ=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),Q8=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),q8=new Uint32Array(64);class m0 extends Z8{constructor(){super(64,32,8,!1);this.A=Q8[0]|0,this.B=Q8[1]|0,this.C=Q8[2]|0,this.D=Q8[3]|0,this.E=Q8[4]|0,this.F=Q8[5]|0,this.G=Q8[6]|0,this.H=Q8[7]|0}get(){const{A:$,B:J,C:Q,D:q,E:N,F:X,G:I,H:K}=this;return[$,J,Q,q,N,X,I,K]}set($,J,Q,q,N,X,I,K){this.A=$|0,this.B=J|0,this.C=Q|0,this.D=q|0,this.E=N|0,this.F=X|0,this.G=I|0,this.H=K|0}process($,J){for(let Z=0;Z<16;Z++,J+=4)q8[Z]=$.getUint32(J,!1);for(let Z=16;Z<64;Z++){const U=q8[Z-15],z=q8[Z-2],w=l(U,7)^l(U,18)^U>>>3,S=l(z,17)^l(z,19)^z>>>10;q8[Z]=S+q8[Z-7]+w+q8[Z-16]|0}let{A:Q,B:q,C:N,D:X,E:I,F:K,G:Y,H:V}=this;for(let Z=0;Z<64;Z++){const U=l(I,6)^l(I,11)^l(I,25),z=V+U+U0(I,K,Y)+jJ[Z]+q8[Z]|0,S=(l(Q,2)^l(Q,13)^l(Q,22))+T0(Q,q,N)|0;V=Y,Y=K,K=I,I=X+z|0,X=N,N=q,q=Q,Q=z+S|0}Q=Q+this.A|0,q=q+this.B|0,N=N+this.C|0,X=X+this.D|0,I=I+this.E|0,K=K+this.F|0,Y=Y+this.G|0,V=V+this.H|0,this.set(Q,q,N,X,I,K,Y,V)}roundClean(){q8.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}var d0=V8(()=>new m0);var p0=function($,...J){if(typeof $===\"string\")$=j0($);return d($,...J),$};/*! micro-key-producer - MIT License (c) 2024 Paul Miller (paulmillr.com) */var zJ=W8(\"ed25519 seed\"),t8=2147483648,l0=new Uint8Array([0]),UJ=($)=>u0(d0($)),TJ=($)=>X8($).getUint32(0,!1),s8=($)=>{if(!Number.isSafeInteger($)||$<0||$>4294967295)throw new Error(`Invalid number=${$}. Should be from 0 to 2 ** 32 - 1`);const J=new Uint8Array(4);return X8(J).setUint32(0,$,!1),J};class H8{get publicKeyRaw(){return P8.getPublicKey(this.privateKey)}get publicKey(){return C8(l0,this.publicKeyRaw)}get pubHash(){return UJ(this.publicKey)}get fingerprint(){return TJ(this.pubHash)}get fingerprintHex(){return _8(s8(this.fingerprint))}get parentFingerprintHex(){return _8(s8(this.parentFingerprint))}static fromMasterSeed($){if($=p0($),8*$.length<128||8*$.length>512)throw new Error(`HDKey: wrong seed length=${$.length}. Should be between 128 and 512 bits; 256 bits is advised)`);const J=f8(j8,zJ,$);return new H8({privateKey:J.slice(0,32),chainCode:J.slice(32)})}constructor($){if(this.depth=0,this.index=0,this.parentFingerprint=0,!$||typeof $!==\"object\")throw new Error(\"HDKey.constructor must not be called directly\");if(d($.privateKey,32),d($.chainCode,32),this.depth=$.depth||0,this.index=$.index||0,this.parentFingerprint=$.parentFingerprint||0,!this.depth){if(this.parentFingerprint||this.index)throw new Error(\"HDKey: zero depth with non-zero index/parent fingerprint\")}this.chainCode=$.chainCode,this.privateKey=$.privateKey}derive($,J=!1){if(!/^[mM]'?/.test($))throw new Error('Path must start with \"m\" or \"M\"');if(/^[mM]'?$/.test($))return this;const Q=$.replace(/^[mM]'?\\//,\"\").split(\"/\");let q=this;for(let N of Q){const X=/^(\\d+)('?)$/.exec(N);if(!X||X.length!==3)throw new Error(`Invalid child index: ${N}`);let I=+X[1];if(!Number.isSafeInteger(I)||I>=t8)throw new Error(\"Invalid index\");if(J||X[2]===\"'\")I+=t8;q=q.deriveChild(I)}return q}deriveChild($){if($<t8)throw new Error(`Non-hardened child derivation not possible for Ed25519 (index=${$})`);const J=C8(l0,this.privateKey,s8($)),Q=f8(j8,this.chainCode,J);return new H8({chainCode:Q.slice(32),depth:this.depth+1,parentFingerprint:this.fingerprint,index:$,privateKey:Q.slice(0,32)})}sign($){return P8.sign($,this.privateKey)}verify($,J){return J=p0(J,64),P8.verify(J,$,this.publicKeyRaw)}}var o0=function($){try{const J=new I8($);return I8.isOnCurve(J.toBuffer())}catch(J){return!1}},EJ=function({phrase:$,derivationPath:J=RJ.SOL}){const Q=MJ($),q=H8.fromMasterSeed(Q);return wJ.fromSeed(q.derive(J,!0).privateKey)},vJ=function($){return $.publicKey.toString()};async function PJ({connection:$,address:J}){const Q=await $.getTokenAccountsByOwner(new I8(J),{programId:WJ}),q=[];for await(let N of Q.value){const X=OJ.decode(N.account.data),{decimals:I,address:K}=await DJ($,X.mint);if(X.amount>BigInt(0))q.push(new n0({value:gJ.fromBigInt(X.amount,I),decimal:I,identifier:`${a0.Solana}.TOKEN-${K.toString()}`}))}return q}var fJ=function($){return async(J)=>{const Q=await $.getBalance(new I8(J)),q=await PJ({connection:$,address:J});return[n0.from({chain:a0.Solana,value:BigInt(Q)}),...q]}};async function FJ({tokenAddress:$,recipient:J,from:Q,connection:q,amount:N,decimals:X}){const I=new r0,K=new I8($),Y=await h0(K,Q),V=new I8(J),Z=await h0(K,V);try{return await SJ(q,Z),I.add(CJ(Y,K,Z,Q,N,X))}catch(U){return I.add(kJ(Q,Z,V,K))}}var bJ=function($){return async({recipient:J,assetValue:Q,fromKeypair:q})=>{if(!o0(J))throw new i0(\"core_transaction_invalid_sender_address\");const N=Q.isGasAsset?new r0().add(AJ.transfer({fromPubkey:q.publicKey,lamports:Q.getValue(\"number\"),toPubkey:new I8(J)})):Q.address?await FJ({amount:Q.getValue(\"number\"),connection:$,decimals:Q.decimal,from:q.publicKey,recipient:J,tokenAddress:Q.address}):void 0;if(!N)throw new i0(\"core_transaction_invalid_sender_address\");const X=await $.getLatestBlockhash();return N.recentBlockhash=X.blockhash,N.feePayer=q.publicKey,LJ($,N,[q])}},_J=({rpcUrl:$=BJ.Solana}={})=>{const J=new HJ($,\"confirmed\");return{createKeysForPath:EJ,getAddressFromKeys:vJ,getBalance:fJ(J),transfer:bJ(J),validateAddress:o0}};export{_J as SOLToolbox};\n\n//# debugId=7D08096CB2C2CE0864756E2164756E21\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["buffer_1","require","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","buf","reversed","reverse","hex","BigInt","num","width","padStart","__createBinding","this","o","m","k","k2","defineProperty","enumerable","get","__setModuleDefault","__decorate","decorators","target","key","desc","d","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","__importStar","mod","__esModule","result","__importDefault","deserializeUnchecked","deserialize","serialize","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","encoding","textDecoder","TextDecoder","fatal","default","INITIAL_LENGTH","message","super","fieldPath","originalMessage","addToFieldPath","fieldName","splice","join","alloc","maybeResize","concat","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","subarray","writeString","str","writeFixedArray","array","writeArray","fn","elem","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","args","apply","code","indexOf","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","len","readString","readFixedArray","readArray","capitalizeFirstLetter","string","charAt","toUpperCase","serializeField","schema","fieldType","writer","item","kind","type","size","forEach","val","serializeStruct","error","obj","borshSerialize","structSchema","map","field","deserializeField","reader","arr","Map","set","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","uuid","generateRequest","ClientBrowser","callServer","options","reviver","replacer","generator","version","notificationIdNull","module","request","method","params","id","callback","self","isBatch","hasCallback","err","JSON","stringify","response","_parseResponse","responseText","parse","isError","res","isNotError","filter","jsonrpc","getRandomValues","rnds8","rng","crypto","msCrypto","REGEX","test","byteToHex","substr","toLowerCase","validate","rnds","random","WebSocketBrowserImpl","EventEmitter","socket","address","protocols","window","WebSocket","onopen","emit","onmessage","event","data","onerror","onclose","reason","send","optionsOrCallback","cb","close","addEventListener","listener","CommonClient","autoconnect","ready","reconnect","reconnect_timer_id","reconnect_interval","max_reconnects","rest_options","current_reconnects","generate_request_id","webSocketFactory","dataPack","queue","rpc_id","DefaultDataPack","_connect","connect","timeout","ws_opts","Promise","resolve","reject","promise","setTimeout","login","resp","listMethods","notify","subscribe","unsubscribe","setAutoReconnect","setReconnectInterval","interval","setMaxReconnects","clearTimeout","ArrayBuffer","notification","listeners","keys","then","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","isOnCurve","ExtendedPoint","fromHex","sign","verify","toBuffer","isBuffer","byteLength","Struct","properties","SOLANA_SCHEMA","decodeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","unique","equals","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","Symbol","toStringTag","createWithSeed","fromPublicKey","seed","programId","publicKeyBytes","sha256","createProgramAddressSync","seeds","createProgramAddress","findProgramAddressSync","nonce","seedsWithNonce","findProgramAddress","pubkeyData","_PublicKey","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","signature","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","decodeLength","bytes","encodeLength","rem_len","assert","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","writableSigners","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","addressTableLookupsCount","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SendTransactionError","action","transactionMessage","logs","maybeLogsOutput","guideText","transactionLogs","transactionError","cachedLogs","getLogs","getTransaction","tx","logMessages","catch","SolanaJSONRPCError","customMessage","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","u64","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","createAccount","lamports","space","fromPubkey","newAccountPubkey","transfer","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","nonceInitialize","authorized","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","allocate","Loader","getMinNumSignatures","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","context","getSlot","slot","round","MS_PER_SLOT","objToString","objKeys","isArrayProp","max","propVal","toStr","isFinite","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","fetchImpl","globalThis","fetch","RpcWebSocketClient","url","rpc","underlyingSocket","readyState","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","coerce","instance","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","unknown","optional","any","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","number","notificationResultAndContext","versionedMessageFromResponse","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","_commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","fastStableStringify$1","unsafeRes","confirmTransactionInitialTimeout","putativeUrl","assertEndpointUrl","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","makeWebsocketUrl","customFetch","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","aborted","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","clientSubscriptionId","log","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","recentSlot","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","isValidPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","ecdsaSign","msgHash","privKey","toCompactRawBytes","recovery","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","_Lockup","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","maybeLockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","rentExemptReserve","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","UpdateValidatorIdentity","voteAuthorizeWithSeedArgs","Voter","VoteProgram","initializeAccount","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","website","details","keybaseUsername","TOKEN_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","bigIntBE","toBigIntBE","toBufferBE","BigNumber","bool","u8","boolLayout","publicKeyLayout","TokenError","TokenAccountNotFoundError","TokenInvalidAccountError","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","TokenInvalidMintError","TokenOwnerOffCurveError","AccountType","ACCOUNT_TYPE_SIZE","MultisigLayout","struct","MULTISIG_SIZE","AccountState","AccountLayout","u32","ACCOUNT_SIZE","unpackAccount","rawAccount","tlvData","Account","delegateOption","delegatedAmount","isInitialized","Uninitialized","isFrozen","Frozen","isNative","isNativeOption","closeAuthority","closeAuthorityOption","MintLayout","MINT_SIZE","getMint","rawMint","Mint","mintAuthority","mintAuthorityOption","supply","freezeAuthority","freezeAuthorityOption","unpackMint","getAssociatedTokenAddress","allowOwnerOffCurve","associatedTokenProgramId","TokenInstruction","transferCheckedInstructionData","createTransferCheckedInstruction","destination","multiSigners","ownerOrAuthority","addSigners","TransferChecked","buildAssociatedTokenAccountInstruction","associatedToken","I0","$","isSafeInteger","J","Y$","G8","destroyed","finished","R8","_8","Q","I$","V0","t","_0","_9","_A","_F","_a","_f","W8","TextEncoder","k8","C8","q","N","X","V8","update","digest","outputLen","blockLen","X8","DataView","l","O8","Uint32Array","S8","clone","_cloneInto","U0","T0","Z8","padOffset","isLE","pos","view","I","min","process","K","roundClean","digestInto","G0","Z","setBigUint64","Y","V","setUint32","K$","destroy","M0","h","B8","x8","M","fromBig","toBig","V$","shrSH","j$","shrSL","z$","rotrSH","U$","rotrSL","T$","rotrBH","M$","rotrBL","O$","rotr32H","W$","rotr32L","k$","rotlSH","C$","rotlSL","S$","rotlBH","D$","rotlBL","H$","add3L","A$","add3H","L$","add4L","R$","add4H","B$","add5H","E$","add5L","g$","P$","f$","$8","J8","O0","Ah","Al","Bh","Bl","Ch","Cl","Dh","Dl","Eh","El","Fh","Fl","Gh","Gl","Hh","Hl","U","z","w","S","B","W","getUint32","L","O","u","N8","K8","T8","M8","w8","j8","y8","c8","g8","_$","k0","W0","s","C0","charCodeAt","z8","D8","m8","U8","x$","F$","b$","D0","bigint","function","stringOrUint8Array","Fp","isValid","E","P","d$","g","A0","p$","d8","c$","eql","sqr","w0","H0","mul","Y8","sub","ONE","neg","ZERO","l$","l8","nBitLength","nByteLength","h$","v0","ORDER","MASK","BYTES","BITS","R0","Gx","Gy","n$","p8","v8","a","randomBytes","adjustScalarBytes","domain","uvRatio","mapToCurve","t$","prehash","E8","G","j","sqrt","inv","T","ex","ey","ez","et","toAffine","fromAffine","normalizeZ","invertBatch","_setWindowSize","_WINDOW_SIZE","assertValidity","is0","D","A","H","C","R","f","F","negate","double","A8","L8","J0","Q0","b8","q0","N0","X0","Z0","Y0","q$","N$","X$","Z$","e8","$0","e0","$$","J$","Q$","subtract","wNAF","wNAFCached","multiply","multiplyUnsafe","unsafeLadder","isSmallOrder","isTorsionFree","a$","clearCofactor","fromPrivateKey","point","toRawBytes","toHex","BASE","windows","windowSize","constTimeNegate","precomputeWindow","abs","E0","head","scalar","pointBytes","t0","o$","CURVE","zip215","getExtendedPublicKey","precompute","b0","i8","P0","s$","h8","e$","f0","$J","JJ","F0","isOdd","i$","div","sqrN","addN","subN","mulN","reduceRight","r$","cmov","fromBytes","S0","B0","r8","pow_p_5_8","b2","QJ","L0","P8","XJ","g0","n8","K0","iHash","oHash","getPrototypeOf","f8","ZJ","x0","YJ","a8","o8","y0","IJ","KJ","GJ","VJ","F8","c0","h0","h1","h2","h3","h4","u0","jJ","Q8","q8","m0","d0","p0","j0","zJ","t8","l0","s8","H8","publicKeyRaw","pubHash","fingerprint","fingerprintHex","parentFingerprintHex","parentFingerprint","fromMasterSeed","chainCode","depth","derive","replace","exec","deriveChild","o0","I8","EJ","phrase","derivationPath","RJ","SOL","MJ","wJ","vJ","fJ","WJ","OJ","DJ","n0","gJ","fromBigInt","decimal","identifier","a0","Solana","PJ","chain","FJ","r0","SJ","CJ","kJ","bJ","assetValue","fromKeypair","i0","isGasAsset","AJ","getValue","LJ","_J","rpcUrl","BJ","HJ","createKeysForPath","getAddressFromKeys","validateAddress","inRange","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","temp","input","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}