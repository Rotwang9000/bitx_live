{"version":3,"file":"static/js/157.e815f5ea.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../../src/error.ts","../../src/utils.ts","../../src/struct.ts","../../src/structs/utilities.ts","../../src/structs/types.ts","../../src/structs/coercions.ts","../node_modules/rpc-websockets/src/lib/client/websocket.browser.ts","../node_modules/rpc-websockets/src/lib/client.ts","../node_modules/rpc-websockets/src/lib/utils.ts","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/utils/guarded-array-utils.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/timing.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@solana/buffer-layout-utils/src/base.ts","../node_modules/@solana/buffer-layout-utils/src/bigint.ts","../node_modules/@solana/buffer-layout-utils/src/decimal.ts","../node_modules/@solana/buffer-layout-utils/src/native.ts","../node_modules/@solana/buffer-layout-utils/src/web3.ts","../node_modules/@solana/spl-token/src/constants.ts","../node_modules/@solana/spl-token/src/errors.ts","../node_modules/@solana/spl-token/src/extensions/accountType.ts","../node_modules/@solana/spl-token/src/instructions/associatedTokenAccount.ts","../node_modules/@solana/spl-token/src/instructions/types.ts","../node_modules/@solana/spl-token/src/instructions/transferChecked.ts","../node_modules/@solana/spl-token/src/instructions/internal.ts","../node_modules/@solana/spl-token/src/state/account.ts","../node_modules/@solana/spl-token/src/state/mint.ts","../node_modules/@solana/spl-token/src/state/multisig.ts","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,null,null,null,null,null,null,"/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\n\"use strict\"\n\nimport { EventEmitter } from \"eventemitter3\"\n\nimport {\n    BrowserWebSocketType,\n    NodeWebSocketType,\n    IWSClientAdditionalOptions,\n} from \"./client.types.js\"\n\nclass WebSocketBrowserImpl extends EventEmitter\n{\n    socket: BrowserWebSocketType\n\n    /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n    constructor(address: string, options: {}, protocols?: string | string[])\n    {\n        super()\n\n        this.socket = new window.WebSocket(address, protocols)\n\n        this.socket.onopen = () => this.emit(\"open\")\n        this.socket.onmessage = (event) => this.emit(\"message\", event.data)\n        this.socket.onerror = (error) => this.emit(\"error\", error)\n        this.socket.onclose = (event) =>\n        {\n            this.emit(\"close\", event.code, event.reason)\n        }\n    }\n\n    /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n    send(\n        data: Parameters<BrowserWebSocketType[\"send\"]>[0],\n        optionsOrCallback: (\n      error?: Error\n    ) => void | Parameters<NodeWebSocketType[\"send\"]>[1],\n        callback?: () => void\n    )\n    {\n        const cb = callback || optionsOrCallback\n\n        try\n        {\n            this.socket.send(data)\n            cb()\n        }\n        catch (error)\n        {\n            cb(error)\n        }\n    }\n\n    /**\n   * Closes an underlying socket\n   * @method\n   * @param {Number} code - status code explaining why the connection is being closed\n   * @param {String} reason - a description why the connection is closing\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    close(code?: number, reason?: string)\n    {\n        this.socket.close(code, reason)\n    }\n\n    addEventListener<K extends keyof WebSocketEventMap>(\n        type: K,\n        listener: (ev: WebSocketEventMap[K]) => any,\n        options?: boolean | AddEventListenerOptions\n    ): void\n    {\n        this.socket.addEventListener(type, listener, options)\n    }\n}\n\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\nexport function WebSocket(\n    address: string,\n    options: IWSClientAdditionalOptions\n)\n{\n    return new WebSocketBrowserImpl(address, options)\n}\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\n\"use strict\"\n\nimport NodeWebSocket from \"ws\"\nimport { EventEmitter } from \"eventemitter3\"\nimport {\n    ICommonWebSocket,\n    IWSClientAdditionalOptions,\n    NodeWebSocketType,\n    ICommonWebSocketFactory,\n} from \"./client/client.types.js\"\n\nimport { DataPack, DefaultDataPack } from \"./utils.js\"\n\ninterface IQueueElement {\n  promise: [\n    Parameters<ConstructorParameters<typeof Promise>[0]>[0],\n    Parameters<ConstructorParameters<typeof Promise>[0]>[1]\n  ];\n  timeout?: ReturnType<typeof setTimeout>;\n}\n\nexport interface IQueue {\n  [x: number]: IQueueElement;\n}\n\nexport interface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\nexport class CommonClient extends EventEmitter\n{\n    private address: string\n    private rpc_id: number\n    private queue: IQueue\n    private options: IWSClientAdditionalOptions & NodeWebSocket.ClientOptions\n    private autoconnect: boolean\n    private ready: boolean\n    private reconnect: boolean\n    private reconnect_timer_id: NodeJS.Timeout\n    private reconnect_interval: number\n    private max_reconnects: number\n    private rest_options: IWSClientAdditionalOptions &\n    NodeWebSocket.ClientOptions\n    private current_reconnects: number\n    private generate_request_id: (\n    method: string,\n    params: object | Array<any>\n  ) => number\n    private socket: ICommonWebSocket\n    private webSocketFactory: ICommonWebSocketFactory\n    private dataPack: DataPack<object, string>\n\n    /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @param {DataPack} dataPack - data pack contains encoder and decoder\n   * @return {CommonClient}\n   */\n    constructor(\n        webSocketFactory: ICommonWebSocketFactory,\n        address = \"ws://localhost:8080\",\n        {\n            autoconnect = true,\n            reconnect = true,\n            reconnect_interval = 1000,\n            max_reconnects = 5,\n            ...rest_options\n        } = {},\n        generate_request_id?: (\n      method: string,\n      params: object | Array<any>\n    ) => number,\n        dataPack?: DataPack<object, string>\n    )\n    {\n        super()\n\n        this.webSocketFactory = webSocketFactory\n\n        this.queue = {}\n        this.rpc_id = 0\n\n        this.address = address\n        this.autoconnect = autoconnect\n        this.ready = false\n        this.reconnect = reconnect\n        this.reconnect_timer_id = undefined\n        this.reconnect_interval = reconnect_interval\n        this.max_reconnects = max_reconnects\n        this.rest_options = rest_options\n        this.current_reconnects = 0\n        this.generate_request_id = generate_request_id || (() => ++this.rpc_id)\n\n        if (!dataPack) this.dataPack = new DefaultDataPack()\n        else this.dataPack = dataPack\n\n        if (this.autoconnect)\n            this._connect(this.address, {\n                autoconnect: this.autoconnect,\n                reconnect: this.reconnect,\n                reconnect_interval: this.reconnect_interval,\n                max_reconnects: this.max_reconnects,\n                ...this.rest_options,\n            })\n    }\n\n    /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n    connect()\n    {\n        if (this.socket) return\n\n        this._connect(this.address, {\n            autoconnect: this.autoconnect,\n            reconnect: this.reconnect,\n            reconnect_interval: this.reconnect_interval,\n            max_reconnects: this.max_reconnects,\n            ...this.rest_options,\n        })\n    }\n\n    /**\n   * Calls a registered RPC method on server.\n   * @method\n   * @param {String} method - RPC method name\n   * @param {Object|Array} params - optional method parameters\n   * @param {Number} timeout - RPC reply timeout value\n   * @param {Object} ws_opts - options passed to ws\n   * @return {Promise}\n   */\n    call(\n        method: string,\n        params?: IWSRequestParams,\n        timeout?: number,\n        ws_opts?: Parameters<NodeWebSocketType[\"send\"]>[1]\n    )\n    {\n        if (!ws_opts && \"object\" === typeof timeout)\n        {\n            ws_opts = timeout\n            timeout = null\n        }\n\n        return new Promise((resolve, reject) =>\n        {\n            if (!this.ready) return reject(new Error(\"socket not ready\"))\n\n            const rpc_id = this.generate_request_id(method, params)\n\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params: params || undefined,\n                id: rpc_id,\n            }\n\n            this.socket.send(this.dataPack.encode(message), ws_opts, (error) =>\n            {\n                if (error) return reject(error)\n\n                this.queue[rpc_id] = { promise: [resolve, reject] }\n\n                if (timeout)\n                {\n                    this.queue[rpc_id].timeout = setTimeout(() =>\n                    {\n                        delete this.queue[rpc_id]\n                        reject(new Error(\"reply timeout\"))\n                    }, timeout)\n                }\n            })\n        })\n    }\n\n    /**\n   * Logins with the other side of the connection.\n   * @method\n   * @param {Object} params - Login credentials object\n   * @return {Promise}\n   */\n    async login(params: IWSRequestParams)\n    {\n        const resp = await this.call(\"rpc.login\", params)\n\n        if (!resp) throw new Error(\"authentication failed\")\n\n        return resp\n    }\n\n    /**\n   * Fetches a list of client's methods registered on server.\n   * @method\n   * @return {Array}\n   */\n    async listMethods()\n    {\n        return await this.call(\"__listMethods\")\n    }\n\n    /**\n   * Sends a JSON-RPC 2.0 notification to server.\n   * @method\n   * @param {String} method - RPC method name\n   * @param {Object} params - optional method parameters\n   * @return {Promise}\n   */\n    notify(method: string, params?: IWSRequestParams)\n    {\n        return new Promise<void>((resolve, reject) =>\n        {\n            if (!this.ready) return reject(new Error(\"socket not ready\"))\n\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params,\n            }\n\n            this.socket.send(this.dataPack.encode(message), (error) =>\n            {\n                if (error) return reject(error)\n\n                resolve()\n            })\n        })\n    }\n\n    /**\n   * Subscribes for a defined event.\n   * @method\n   * @param {String|Array} event - event name\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    async subscribe(event: string | Array<string>)\n    {\n        if (typeof event === \"string\") event = [event]\n\n        const result = await this.call(\"rpc.on\", event)\n\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\n                \"Failed subscribing to an event '\" + event + \"' with: \" + result[event]\n            )\n\n        return result\n    }\n\n    /**\n   * Unsubscribes from a defined event.\n   * @method\n   * @param {String|Array} event - event name\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    async unsubscribe(event: string | Array<string>)\n    {\n        if (typeof event === \"string\") event = [event]\n\n        const result = await this.call(\"rpc.off\", event)\n\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\"Failed unsubscribing from an event with: \" + result)\n\n        return result\n    }\n\n    /**\n   * Closes a WebSocket connection gracefully.\n   * @method\n   * @param {Number} code - socket close code\n   * @param {String} data - optional data to be sent before closing\n   * @return {Undefined}\n   */\n    close(code?: number, data?: string)\n    {\n        this.socket.close(code || 1000, data)\n    }\n\n    /**\n   * Enable / disable automatic reconnection.\n   * @method\n   * @param {Boolean} reconnect - enable / disable reconnection\n   * @return {Undefined}\n   */\n    setAutoReconnect(reconnect: boolean)\n    {\n        this.reconnect = reconnect\n    }\n\n    /**\n   * Set the interval between reconnection attempts.\n   * @method\n   * @param {Number} interval - reconnection interval in milliseconds\n   * @return {Undefined}\n   */\n    setReconnectInterval(interval: number)\n    {\n        this.reconnect_interval = interval\n    }\n\n    /**\n   * Set the maximum number of reconnection attempts.\n   * @method\n   * @param {Number} max_reconnects - maximum reconnection attempts\n   * @return {Undefined}\n   */\n    setMaxReconnects(max_reconnects: number)\n    {\n        this.max_reconnects = max_reconnects\n    }\n\n    /**\n   * Connection/Message handler.\n   * @method\n   * @private\n   * @param {String} address - WebSocket API address\n   * @param {Object} options - ws options object\n   * @return {Undefined}\n   */\n    private _connect(\n        address: string,\n        options: IWSClientAdditionalOptions & NodeWebSocket.ClientOptions\n    )\n    {\n        clearTimeout(this.reconnect_timer_id)\n        this.socket = this.webSocketFactory(address, options)\n\n        this.socket.addEventListener(\"open\", () =>\n        {\n            this.ready = true\n            this.emit(\"open\")\n            this.current_reconnects = 0\n        })\n\n        this.socket.addEventListener(\"message\", ({ data: message }) =>\n        {\n            if (message instanceof ArrayBuffer)\n                message = Buffer.from(message).toString()\n\n            try\n            {\n                message = this.dataPack.decode(message)\n            }\n            catch (error)\n            {\n                return\n            }\n\n            // check if any listeners are attached and forward event\n            if (message.notification && this.listeners(message.notification).length)\n            {\n                if (!Object.keys(message.params).length)\n                    return this.emit(message.notification)\n\n                const args = [message.notification]\n\n                if (message.params.constructor === Object) args.push(message.params)\n                // using for-loop instead of unshift/spread because performance is better\n                else\n                    for (let i = 0; i < message.params.length; i++)\n                        args.push(message.params[i])\n\n                // run as microtask so that pending queue messages are resolved first\n                // eslint-disable-next-line prefer-spread\n                return Promise.resolve().then(() =>\n                {\n                    // eslint-disable-next-line prefer-spread\n                    this.emit.apply(this, args)\n                })\n            }\n\n            if (!this.queue[message.id])\n            {\n                // general JSON RPC 2.0 events\n                if (message.method)\n                {\n                    // run as microtask so that pending queue messages are resolved first\n                    return Promise.resolve().then(() =>\n                    {\n                        this.emit(message.method, message?.params)\n                    })\n                }\n\n                return\n            }\n\n            // reject early since server's response is invalid\n            if (\"error\" in message === \"result\" in message)\n                this.queue[message.id].promise[1](\n                    new Error(\n                        \"Server response malformed. Response must include either \\\"result\\\"\" +\n              \" or \\\"error\\\", but not both.\"\n                    )\n                )\n\n            if (this.queue[message.id].timeout)\n                clearTimeout(this.queue[message.id].timeout)\n\n            if (message.error) this.queue[message.id].promise[1](message.error)\n            else this.queue[message.id].promise[0](message.result)\n\n            delete this.queue[message.id]\n        })\n\n        this.socket.addEventListener(\"error\", (error) => this.emit(\"error\", error))\n\n        this.socket.addEventListener(\"close\", ({ code, reason }) =>\n        {\n            if (this.ready)\n            // Delay close event until internal state is updated\n                setTimeout(() => this.emit(\"close\", code, reason), 0)\n\n            this.ready = false\n            this.socket = undefined\n\n            if (code === 1000) return\n\n            this.current_reconnects++\n\n            if (\n                this.reconnect &&\n        (this.max_reconnects > this.current_reconnects ||\n          this.max_reconnects === 0)\n            )\n                this.reconnect_timer_id = setTimeout(\n                    () => this._connect(address, options),\n                    this.reconnect_interval\n                )\n        })\n    }\n}\n","\"use strict\"\n\nexport interface DataPack<\n  T,\n  R extends string | ArrayBufferLike | Blob | ArrayBufferView\n> {\n  encode(value: T): R;\n  decode(value: R): T;\n}\n\nexport class DefaultDataPack implements DataPack<Object, string>\n{\n    encode(value: Object): string\n    {\n        return JSON.stringify(value)\n    }\n\n    decode(value: string): Object\n    {\n        return JSON.parse(value)\n    }\n}\n","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from './connection';\nimport {TransactionSignature} from './transaction';\n\nexport class SendTransactionError extends Error {\n  private signature: TransactionSignature;\n  private transactionMessage: string;\n  private transactionLogs: string[] | Promise<string[]> | undefined;\n\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs,\n  }: {\n    action: 'send' | 'simulate';\n    signature: TransactionSignature;\n    transactionMessage: string;\n    logs?: string[];\n  }) {\n    const maybeLogsOutput = logs\n      ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. `\n      : '';\n    const guideText =\n      '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message: string;\n    switch (action) {\n      case 'send':\n        message =\n          `Transaction ${signature} resulted in an error. \\n` +\n          `${transactionMessage}. ` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      case 'simulate':\n        message =\n          `Simulation failed. \\nMessage: ${transactionMessage}. \\n` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      default: {\n        message = `Unknown action '${((a: never) => a)(action)}'`;\n      }\n    }\n    super(message);\n\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n\n  get transactionError(): {message: string; logs?: string[]} {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs)\n        ? this.transactionLogs\n        : undefined,\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs(): string[] | undefined {\n    const cachedLogs = this.transactionLogs;\n    if (\n      cachedLogs != null &&\n      typeof cachedLogs === 'object' &&\n      'then' in cachedLogs\n    ) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n\n  async getLogs(connection: Connection): Promise<string[]> {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection\n          .getTransaction(this.signature)\n          .then(tx => {\n            if (tx && tx.meta && tx.meta.logMessages) {\n              const logs = tx.meta.logMessages;\n              this.transactionLogs = logs;\n              resolve(logs);\n            } else {\n              reject(new Error('Log messages not found'));\n            }\n          })\n          .catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export const Headers: typeof globalThis.Headers = globalThis.Headers;\nexport const Request: typeof globalThis.Request = globalThis.Request;\nexport const Response: typeof globalThis.Response = globalThis.Response;\nexport default globalThis.fetch;\n","import {\n  CommonClient,\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n  WebSocket as createRpc,\n} from 'rpc-websockets';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends CommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket as ReturnType<typeof createRpc>;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<CommonClient['call']>\n  ): ReturnType<CommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<CommonClient['notify']>\n  ): ReturnType<CommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to agave-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n  /** Optional parameter used to include inner instructions in the simulation */\n  innerInstructions?: boolean;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n  innerInstructions?: ParsedInnerInstruction[] | null;\n};\nconst ParsedInstructionStruct = pick({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown(),\n});\n\nconst PartiallyDecodedInstructionStruct = pick({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string(),\n});\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n    innerInstructions: optional(\n      nullable(\n        array(\n          pick({\n            index: number(),\n            instructions: array(\n              union([\n                ParsedInstructionStruct,\n                PartiallyDecodedInstructionStruct,\n              ]),\n            ),\n          }),\n        ),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\nexport type AccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n}>;\n\nexport type ProgramAccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n  /**\n   * Filter results using various filter objects\n   * The resultant account must meet ALL filter criteria to be included in the returned results\n   */\n  filters?: GetProgramAccountsFilter[];\n}>;\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      if (\n        configOrSigners &&\n        typeof configOrSigners === 'object' &&\n        'innerInstructions' in configOrSigners\n      ) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    if (\n      configOrSigners &&\n      typeof configOrSigners === 'object' &&\n      'innerInstructions' in configOrSigners\n    ) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    config?: AccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitmentOrConfig?: Commitment | AccountSubscriptionConfig,\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n      config,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    config?: ProgramAccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitmentOrConfig?: Commitment | ProgramAccountSubscriptionConfig,\n    maybeFilters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      config\n        ? config\n        : maybeFilters\n          ? {filters: maybeFilters}\n          : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, validator logo URL */\n  iconUrl?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { Layout } from '@solana/buffer-layout';\n\nexport interface EncodeDecode<T> {\n    decode(buffer: Buffer, offset?: number): T;\n    encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nexport const encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n","import { blob, Layout } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base';\n\nexport const bigInt =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntLE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferLE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const bigIntBE =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntBE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferBE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const u64 = bigInt(8);\n\nexport const u64be = bigIntBE(8);\n\nexport const u128 = bigInt(16);\n\nexport const u128be = bigIntBE(16);\n\nexport const u192 = bigInt(24);\n\nexport const u192be = bigIntBE(24);\n\nexport const u256 = bigInt(32);\n\nexport const u256be = bigIntBE(32);\n","import { Layout } from '@solana/buffer-layout';\nimport BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base';\nimport { u128 } from './bigint';\n\nexport const WAD = new BigNumber('1e+18');\n\nexport const decimal = (property?: string): Layout<BigNumber> => {\n    const layout = u128(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const decimalLayout = layout as Layout<unknown> as Layout<BigNumber>;\n\n    decimalLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset).toString();\n        return new BigNumber(src).div(WAD);\n    };\n\n    decimalLayout.encode = (decimal: BigNumber, buffer: Buffer, offset: number) => {\n        const src = BigInt(decimal.times(WAD).integerValue().toString());\n        return encode(src, buffer, offset);\n    };\n\n    return decimalLayout;\n};\n","import { Layout, u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base';\n\nexport const bool = (property?: string): Layout<boolean> => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const boolLayout = layout as Layout<unknown> as Layout<boolean>;\n\n    boolLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n\n    boolLayout.encode = (bool: boolean, buffer: Buffer, offset: number) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n\n    return boolLayout;\n};\n","import { blob, Layout } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base';\n\nexport const publicKey = (property?: string): Layout<PublicKey> => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const publicKeyLayout = layout as Layout<unknown> as Layout<PublicKey>;\n\n    publicKeyLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n\n    publicKeyLayout.encode = (publicKey: PublicKey, buffer: Buffer, offset: number) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n\n    return publicKeyLayout;\n};\n","import { PublicKey } from '@solana/web3.js';\n\n/** Address of the SPL Token program */\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n\n/** Address of the SPL Token 2022 program */\nexport const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb');\n\n/** Address of the SPL Associated Token Account program */\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\n/** Address of the special mint for wrapped native SOL in spl-token */\nexport const NATIVE_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\n/** Address of the special mint for wrapped native SOL in spl-token-2022 */\nexport const NATIVE_MINT_2022 = new PublicKey('9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP');\n\n/** Check that the token program provided is not `Tokenkeg...`, useful when using extensions */\nexport function programSupportsExtensions(programId: PublicKey): boolean {\n    if (programId.equals(TOKEN_PROGRAM_ID)) {\n        return false;\n    } else {\n        return true;\n    }\n}\n","/** Base class for errors */\nexport abstract class TokenError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    name = 'TokenAccountNotFoundError';\n}\n\n/** Thrown if a program state account is not a valid Account */\nexport class TokenInvalidAccountError extends TokenError {\n    name = 'TokenInvalidAccountError';\n}\n\n/** Thrown if a program state account does not contain valid data */\nexport class TokenInvalidAccountDataError extends TokenError {\n    name = 'TokenInvalidAccountDataError';\n}\n\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    name = 'TokenInvalidAccountOwnerError';\n}\n\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    name = 'TokenInvalidAccountSizeError';\n}\n\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    name = 'TokenInvalidMintError';\n}\n\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    name = 'TokenInvalidOwnerError';\n}\n\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    name = 'TokenOwnerOffCurveError';\n}\n\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    name = 'TokenInvalidInstructionProgramError';\n}\n\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    name = 'TokenInvalidInstructionKeysError';\n}\n\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    name = 'TokenInvalidInstructionDataError';\n}\n\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    name = 'TokenInvalidInstructionTypeError';\n}\n\n/** Thrown if the program does not support the desired instruction */\nexport class TokenUnsupportedInstructionError extends TokenError {\n    name = 'TokenUnsupportedInstructionError';\n}\n\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nexport class TokenTransferHookAccountNotFound extends TokenError {\n    name = 'TokenTransferHookAccountNotFound';\n}\n\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nexport class TokenTransferHookInvalidSeed extends TokenError {\n    name = 'TokenTransferHookInvalidSeed';\n}\n\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\n    name = 'TokenTransferHookAccountDataNotFound';\n}\n","export enum AccountType {\n    Uninitialized,\n    Mint,\n    Account,\n}\nexport const ACCOUNT_TYPE_SIZE = 1;\n","import type { PublicKey } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\n\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.alloc(0),\n        programId,\n        associatedTokenProgramId\n    );\n}\n\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.from([1]),\n        programId,\n        associatedTokenProgramId\n    );\n}\n\nfunction buildAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    instructionData: Buffer,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: instructionData,\n    });\n}\n\n/**\n * Construct a RecoverNested instruction\n *\n * @param nestedAssociatedToken             Nested associated token account (must be owned by `ownerAssociatedToken`)\n * @param nestedMint                        Token mint for the nested associated token account\n * @param destinationAssociatedToken        Wallet's associated token account\n * @param ownerAssociatedToken              Owner associated token account address (must be owned by `owner`)\n * @param ownerMint                         Token mint for the owner associated token account\n * @param owner                             Wallet address for the owner associated token account\n * @param programId                         SPL Token program account\n * @param associatedTokenProgramId          SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRecoverNestedInstruction(\n    nestedAssociatedToken: PublicKey,\n    nestedMint: PublicKey,\n    destinationAssociatedToken: PublicKey,\n    ownerAssociatedToken: PublicKey,\n    ownerMint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: nestedAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: nestedMint, isSigner: false, isWritable: false },\n        { pubkey: destinationAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerMint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: true, isWritable: true },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.from([2]),\n    });\n}\n","/** Instructions defined by the program */\nexport enum TokenInstruction {\n    InitializeMint = 0,\n    InitializeAccount = 1,\n    InitializeMultisig = 2,\n    Transfer = 3,\n    Approve = 4,\n    Revoke = 5,\n    SetAuthority = 6,\n    MintTo = 7,\n    Burn = 8,\n    CloseAccount = 9,\n    FreezeAccount = 10,\n    ThawAccount = 11,\n    TransferChecked = 12,\n    ApproveChecked = 13,\n    MintToChecked = 14,\n    BurnChecked = 15,\n    InitializeAccount2 = 16,\n    SyncNative = 17,\n    InitializeAccount3 = 18,\n    InitializeMultisig2 = 19,\n    InitializeMint2 = 20,\n    GetAccountDataSize = 21,\n    InitializeImmutableOwner = 22,\n    AmountToUiAmount = 23,\n    UiAmountToAmount = 24,\n    InitializeMintCloseAuthority = 25,\n    TransferFeeExtension = 26,\n    ConfidentialTransferExtension = 27,\n    DefaultAccountStateExtension = 28,\n    Reallocate = 29,\n    MemoTransferExtension = 30,\n    CreateNativeMint = 31,\n    InitializeNonTransferableMint = 32,\n    InterestBearingMintExtension = 33,\n    CpiGuardExtension = 34,\n    InitializePermanentDelegate = 35,\n    TransferHookExtension = 36,\n    // ConfidentialTransferFeeExtension = 37,\n    // WithdrawalExcessLamports = 38,\n    MetadataPointerExtension = 39,\n    GroupPointerExtension = 40,\n    GroupMemberPointerExtension = 41,\n}\n","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface TransferCheckedInstructionData {\n    instruction: TokenInstruction.TransferChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const transferCheckedInstructionData = struct<TransferCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedInstruction(\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(transferCheckedInstructionData.span);\n    transferCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid TransferChecked instruction */\nexport interface DecodedTransferCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        mint: AccountMeta;\n        destination: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.TransferChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedTransferCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { source, mint, destination, owner, multiSigners },\n        data,\n    } = decodeTransferCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferChecked) throw new TokenInvalidInstructionTypeError();\n    if (!source || !mint || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated TransferChecked instruction */\nexport interface DecodedTransferCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedInstructionUnchecked({\n    programId,\n    keys: [source, mint, destination, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedTransferCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferCheckedInstructionData.decode(data),\n    };\n}\n","import type { AccountMeta, Signer } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\n\n/** @internal */\nexport function addSigners(\n    keys: AccountMeta[],\n    ownerOrAuthority: PublicKey,\n    multiSigners: (Signer | PublicKey)[]\n): AccountMeta[] {\n    if (multiSigners.length) {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });\n        for (const signer of multiSigners) {\n            keys.push({\n                pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n                isSigner: true,\n                isWritable: false,\n            });\n        }\n    } else {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });\n    }\n    return keys;\n}\n","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidAccountSizeError,\n} from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport type { ExtensionType } from '../extensions/extensionType.js';\nimport { getAccountLen } from '../extensions/extensionType.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n\n/** Information about a token account */\nexport interface Account {\n    /** Address of the account */\n    address: PublicKey;\n    /** Mint associated with the account */\n    mint: PublicKey;\n    /** Owner of the account */\n    owner: PublicKey;\n    /** Number of tokens the account holds */\n    amount: bigint;\n    /** Authority that can transfer tokens from the account */\n    delegate: PublicKey | null;\n    /** Number of tokens the delegate is authorized to transfer */\n    delegatedAmount: bigint;\n    /** True if the account is initialized */\n    isInitialized: boolean;\n    /** True if the account is frozen */\n    isFrozen: boolean;\n    /** True if the account is a native token account */\n    isNative: boolean;\n    /**\n     * If the account is a native token account, it must be rent-exempt. The rent-exempt reserve is the amount that must\n     * remain in the balance until the account is closed.\n     */\n    rentExemptReserve: bigint | null;\n    /** Optional authority to close the account */\n    closeAuthority: PublicKey | null;\n    tlvData: Buffer;\n}\n\n/** Token account state as stored by the program */\nexport enum AccountState {\n    Uninitialized = 0,\n    Initialized = 1,\n    Frozen = 2,\n}\n\n/** Token account as stored by the program */\nexport interface RawAccount {\n    mint: PublicKey;\n    owner: PublicKey;\n    amount: bigint;\n    delegateOption: 1 | 0;\n    delegate: PublicKey;\n    state: AccountState;\n    isNativeOption: 1 | 0;\n    isNative: bigint;\n    delegatedAmount: bigint;\n    closeAuthorityOption: 1 | 0;\n    closeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct<RawAccount>([\n    publicKey('mint'),\n    publicKey('owner'),\n    u64('amount'),\n    u32('delegateOption'),\n    publicKey('delegate'),\n    u8('state'),\n    u32('isNativeOption'),\n    u64('isNative'),\n    u64('delegatedAmount'),\n    u32('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Account> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackAccount(address, info, programId);\n}\n\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getMultipleAccounts(\n    connection: Connection,\n    addresses: PublicKey[],\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Account[]> {\n    const infos = await connection.getMultipleAccountsInfo(addresses, commitment);\n    return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n}\n\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n}\n\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccountWithExtensions(\n    connection: Connection,\n    extensions: ExtensionType[],\n    commitment?: Commitment\n): Promise<number> {\n    const accountLen = getAccountLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n}\n\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\nexport function unpackAccount(\n    address: PublicKey,\n    info: AccountInfo<Buffer> | null,\n    programId = TOKEN_PROGRAM_ID\n): Account {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const rawAccount = AccountLayout.decode(info.data.slice(0, ACCOUNT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > ACCOUNT_SIZE) {\n        if (info.data.length === MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Account) throw new TokenInvalidAccountError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n        tlvData,\n    };\n}\n","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidAccountSizeError,\n    TokenInvalidMintError,\n    TokenOwnerOffCurveError,\n} from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport type { ExtensionType } from '../extensions/extensionType.js';\nimport { getMintLen } from '../extensions/extensionType.js';\nimport { ACCOUNT_SIZE } from './account.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n\n/** Information about a mint */\nexport interface Mint {\n    /** Address of the mint */\n    address: PublicKey;\n    /**\n     * Optional authority used to mint new tokens. The mint authority may only be provided during mint creation.\n     * If no mint authority is present then the mint has a fixed supply and no further tokens may be minted.\n     */\n    mintAuthority: PublicKey | null;\n    /** Total supply of tokens */\n    supply: bigint;\n    /** Number of base 10 digits to the right of the decimal place */\n    decimals: number;\n    /** Is this mint initialized */\n    isInitialized: boolean;\n    /** Optional authority to freeze token accounts */\n    freezeAuthority: PublicKey | null;\n    /** Additional data for extension */\n    tlvData: Buffer;\n}\n\n/** Mint as stored by the program */\nexport interface RawMint {\n    mintAuthorityOption: 1 | 0;\n    mintAuthority: PublicKey;\n    supply: bigint;\n    decimals: number;\n    isInitialized: boolean;\n    freezeAuthorityOption: 1 | 0;\n    freezeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a mint */\nexport const MintLayout = struct<RawMint>([\n    u32('mintAuthorityOption'),\n    publicKey('mintAuthority'),\n    u64('supply'),\n    u8('decimals'),\n    bool('isInitialized'),\n    u32('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n\n/** Byte length of a mint */\nexport const MINT_SIZE = MintLayout.span;\n\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nexport async function getMint(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Mint> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n}\n\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nexport function unpackMint(address: PublicKey, info: AccountInfo<Buffer> | null, programId = TOKEN_PROGRAM_ID): Mint {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < MINT_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const rawMint = MintLayout.decode(info.data.slice(0, MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > MINT_SIZE) {\n        if (info.data.length <= ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data.length === MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Mint) throw new TokenInvalidMintError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\n\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMint(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n}\n\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMintWithExtensions(\n    connection: Connection,\n    extensions: ExtensionType[],\n    commitment?: Commitment\n): Promise<number> {\n    const mintLen = getMintLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n}\n\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nexport async function getAssociatedTokenAddress(\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) throw new TokenOwnerOffCurveError();\n\n    const [address] = await PublicKey.findProgramAddress(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedTokenProgramId\n    );\n\n    return address;\n}\n\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nexport function getAssociatedTokenAddressSync(\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): PublicKey {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) throw new TokenOwnerOffCurveError();\n\n    const [address] = PublicKey.findProgramAddressSync(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedTokenProgramId\n    );\n\n    return address;\n}\n","import { struct, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\n\n/** Information about a multisig */\nexport interface Multisig {\n    /** Address of the multisig */\n    address: PublicKey;\n    /** Number of signers required */\n    m: number;\n    /** Number of possible signers, corresponds to the number of `signers` that are valid */\n    n: number;\n    /** Is this mint initialized */\n    isInitialized: boolean;\n    /** Full set of signers, of which `n` are valid */\n    signer1: PublicKey;\n    signer2: PublicKey;\n    signer3: PublicKey;\n    signer4: PublicKey;\n    signer5: PublicKey;\n    signer6: PublicKey;\n    signer7: PublicKey;\n    signer8: PublicKey;\n    signer9: PublicKey;\n    signer10: PublicKey;\n    signer11: PublicKey;\n}\n\n/** Multisig as stored by the program */\nexport type RawMultisig = Omit<Multisig, 'address'>;\n\n/** Buffer layout for de/serializing a multisig */\nexport const MultisigLayout = struct<RawMultisig>([\n    u8('m'),\n    u8('n'),\n    bool('isInitialized'),\n    publicKey('signer1'),\n    publicKey('signer2'),\n    publicKey('signer3'),\n    publicKey('signer4'),\n    publicKey('signer5'),\n    publicKey('signer6'),\n    publicKey('signer7'),\n    publicKey('signer8'),\n    publicKey('signer9'),\n    publicKey('signer10'),\n    publicKey('signer11'),\n]);\n\n/** Byte length of a multisig */\nexport const MULTISIG_SIZE = MultisigLayout.span;\n\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nexport async function getMultisig(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Multisig> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n}\n\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nexport function unpackMultisig(\n    address: PublicKey,\n    info: AccountInfo<Buffer> | null,\n    programId = TOKEN_PROGRAM_ID\n): Multisig {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length != MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const multisig = MultisigLayout.decode(info.data);\n\n    return { address, ...multisig };\n}\n\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMultisig(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["buffer_1","require","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","StructError","failure","failures","cached","message","explanation","rest","path","msg","join","cause","isObject","x","isNonArrayObject","print","JSON","stringify","toFailure","result","context","struct","branch","type","refinement","key","toFailures","Symbol","iterator","r","run","options","coerce","mask","ctx","coercer","status","validator","k","s","entries","ts","t","Map","set","Set","add","refiner","Struct","props","schema","assert","validate","is","tuples","tuple","input","done","next","shiftIterator","define","array","Element","boolean","instance","Class","literal","constant","description","never","nullable","number","isNaN","optional","record","Key","Value","string","Structs","Never","max","keys","map","S","error","coerced","first","unknown","condition","WebSocketBrowserImpl","EventEmitter","socket","address","protocols","window","WebSocket","this","onopen","emit","onmessage","event","data","onerror","onclose","code","reason","send","optionsOrCallback","callback","cb","close","addEventListener","listener","parse","CommonClient","autoconnect","ready","reconnect","reconnect_timer_id","reconnect_interval","max_reconnects","rest_options","current_reconnects","generate_request_id","webSocketFactory","dataPack","queue","rpc_id","DefaultDataPack","_connect","connect","method","params","timeout","ws_opts","Promise","resolve","reject","jsonrpc","id","promise","setTimeout","login","resp","listMethods","notify","subscribe","unsubscribe","setAutoReconnect","setReconnectInterval","interval","setMaxReconnects","clearTimeout","ArrayBuffer","notification","listeners","args","then","apply","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","isOnCurve","ExtendedPoint","fromHex","sign","verify","toBuffer","arr","isBuffer","byteLength","properties","serialize","SOLANA_SCHEMA","deserialize","decodeUnchecked","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","super","_bn","isPublicKeyData","decoded","bs58","BN","unique","equals","eq","toBase58","toBytes","toJSON","buf","toArrayLike","zeroPad","alloc","toStringTag","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","createProgramAddress","findProgramAddressSync","nonce","seedsWithNonce","err","findProgramAddress","pubkeyData","_PublicKey","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","signature","defineProperty","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","str","chars","getAlloc","getItemAlloc","item","field","decodeLength","bytes","len","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","addressTableLookupsCount","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","sort","y","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SendTransactionError","action","transactionMessage","logs","maybeLogsOutput","guideText","transactionLogs","transactionError","cachedLogs","getLogs","getTransaction","tx","logMessages","catch","SolanaJSONRPCError","customMessage","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","u64","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","createAccount","lamports","space","fromPubkey","newAccountPubkey","transfer","BigInt","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","nonceInitialize","authorized","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","allocate","Loader","getMinNumSignatures","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","getSlot","slot","round","MS_PER_SLOT","objToString","objKeys","obj","val","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","fetchImpl","globalThis","fetch","RpcWebSocketClient","url","rpc","underlyingSocket","readyState","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","ParsedInstructionStruct","parsed","PartiallyDecodedInstructionStruct","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","innerInstructions","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","_commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","fastStableStringify$1","res","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","parseInt","makeWebsocketUrl","customFetch","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","request","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","unsafeRes","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","aborted","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","c","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","clientSubscriptionId","log","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","maybeFilters","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","recentSlot","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","isValidPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","ecdsaSign","msgHash","privKey","toCompactRawBytes","recovery","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","_Lockup","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","maybeLockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","rentExemptReserve","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","UpdateValidatorIdentity","voteAuthorizeWithSeedArgs","Voter","VoteProgram","initializeAccount","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","website","details","iconUrl","keybaseUsername","reversed","reverse","hex","num","width","padStart","__createBinding","o","m","k2","enumerable","__setModuleDefault","__decorate","decorators","target","desc","d","arguments","getOwnPropertyDescriptor","Reflect","decorate","__importStar","mod","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","fieldName","maybeResize","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","subarray","writeString","writeFixedArray","writeArray","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","charAt","toUpperCase","serializeField","fieldType","writer","serializeStruct","borshSerialize","structSchema","deserializeField","reader","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","module","self","isBatch","hasCallback","_parseResponse","responseText","isError","isNotError","getRandomValues","rnds8","rng","crypto","msCrypto","REGEX","byteToHex","toLowerCase","rnds","random","bigIntBE","toBigIntBE","toBufferBE","BigNumber","bool","u8","boolLayout","publicKeyLayout","TOKEN_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","TokenError","TokenAccountNotFoundError","TokenInvalidAccountError","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","TokenInvalidMintError","TokenOwnerOffCurveError","AccountType","ACCOUNT_TYPE_SIZE","createAssociatedTokenAccountInstruction","associatedToken","associatedTokenProgramId","buildAssociatedTokenAccountInstruction","TokenInstruction","transferCheckedInstructionData","createTransferCheckedInstruction","destination","multiSigners","ownerOrAuthority","addSigners","TransferChecked","AccountState","AccountLayout","u32","ACCOUNT_SIZE","getAccount","unpackAccount","rawAccount","tlvData","MULTISIG_SIZE","Account","delegateOption","delegatedAmount","isInitialized","Uninitialized","isFrozen","Frozen","isNative","isNativeOption","closeAuthority","closeAuthorityOption","MintLayout","MINT_SIZE","getMint","rawMint","Mint","mintAuthority","mintAuthorityOption","supply","freezeAuthority","freezeAuthorityOption","unpackMint","getAssociatedTokenAddress","allowOwnerOffCurve","MultisigLayout","inRange","a","min","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","pop","finished","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","u","charCodeAt","stringToCodePoints"],"sourceRoot":""}