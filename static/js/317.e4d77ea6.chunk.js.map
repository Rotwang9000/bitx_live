{"version":3,"file":"static/js/317.e4d77ea6.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@protobufjs+aspromise@1.1.2/node_modules/@protobufjs/aspromise/index.js","../node_modules/.pnpm/@protobufjs+base64@1.1.2/node_modules/@protobufjs/base64/index.js","../node_modules/.pnpm/@protobufjs+eventemitter@1.1.0/node_modules/@protobufjs/eventemitter/index.js","../node_modules/.pnpm/@protobufjs+float@1.0.2/node_modules/@protobufjs/float/index.js","../node_modules/.pnpm/@protobufjs+inquire@1.1.0/node_modules/@protobufjs/inquire/index.js","../node_modules/.pnpm/@protobufjs+utf8@1.1.0/node_modules/@protobufjs/utf8/index.js","../node_modules/.pnpm/@protobufjs+pool@1.1.0/node_modules/@protobufjs/pool/index.js","../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/util/longbits.js","../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/util/minimal.js","../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/writer.js","../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/writer_buffer.js","../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/reader.js","../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/reader_buffer.js","../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/rpc/service.js","../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/rpc.js","../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/roots.js","../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/index-minimal.js","../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/minimal.js","../node_modules/@swapkit/toolbox-cosmos/src/thorchainUtils/types/proto/MsgCompiled.ts"],"sourcesContent":["\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer\n            ? nativeBuffer.alloc(0)\n            : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","// @ts-nocheck\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader;\nconst $Writer = $protobuf.Writer;\nconst $util = $protobuf.util;\n\n// Exported root namespace\n\nconst $root = ($protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {})) as any;\n\n$root.common = (() => {\n  /**\n   * Namespace common.\n   * @exports common\n   * @namespace\n   */\n  const common = {};\n\n  common.Asset = (() => {\n    /**\n     * Properties of an Asset.\n     * @memberof common\n     * @interface IAsset\n     * @property {string|null} [chain] Asset chain\n     * @property {string|null} [symbol] Asset symbol\n     * @property {string|null} [ticker] Asset ticker\n     * @property {boolean|null} [synth] Asset synth\n     */\n\n    /**\n     * Constructs a new Asset.\n     * @memberof common\n     * @classdesc Represents an Asset.\n     * @implements IAsset\n     * @constructor\n     * @param {common.IAsset=} [properties] Properties to set\n     */\n    function Asset(properties) {\n      if (properties)\n        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Asset chain.\n     * @member {string} chain\n     * @memberof common.Asset\n     * @instance\n     */\n    Asset.prototype.chain = \"\";\n\n    /**\n     * Asset symbol.\n     * @member {string} symbol\n     * @memberof common.Asset\n     * @instance\n     */\n    Asset.prototype.symbol = \"\";\n\n    /**\n     * Asset ticker.\n     * @member {string} ticker\n     * @memberof common.Asset\n     * @instance\n     */\n    Asset.prototype.ticker = \"\";\n\n    /**\n     * Asset synth.\n     * @member {boolean} synth\n     * @memberof common.Asset\n     * @instance\n     */\n    Asset.prototype.synth = false;\n\n    /**\n     * Creates a new Asset instance using the specified properties.\n     * @function create\n     * @memberof common.Asset\n     * @static\n     * @param {common.IAsset=} [properties] Properties to set\n     * @returns {common.Asset} Asset instance\n     */\n    Asset.create = function create(properties) {\n      return new Asset(properties);\n    };\n\n    /**\n     * Encodes the specified Asset message. Does not implicitly {@link common.Asset.verify|verify} messages.\n     * @function encode\n     * @memberof common.Asset\n     * @static\n     * @param {common.IAsset} message Asset message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Asset.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.chain != null && Object.hasOwnProperty.call(message, \"chain\"))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.chain);\n      if (message.symbol != null && Object.hasOwnProperty.call(message, \"symbol\"))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.symbol);\n      if (message.ticker != null && Object.hasOwnProperty.call(message, \"ticker\"))\n        writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.ticker);\n      if (message.synth != null && Object.hasOwnProperty.call(message, \"synth\"))\n        writer.uint32(/* id 4, wireType 0 =*/ 32).bool(message.synth);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified Asset message, length delimited. Does not implicitly {@link common.Asset.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof common.Asset\n     * @static\n     * @param {common.IAsset} message Asset message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Asset.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Asset message from the specified reader or buffer.\n     * @function decode\n     * @memberof common.Asset\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {common.Asset} Asset\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Asset.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      const end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.common.Asset();\n      while (reader.pos < end) {\n        const tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.chain = reader.string();\n            break;\n          case 2:\n            message.symbol = reader.string();\n            break;\n          case 3:\n            message.ticker = reader.string();\n            break;\n          case 4:\n            message.synth = reader.bool();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes an Asset message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof common.Asset\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {common.Asset} Asset\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Asset.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Asset message.\n     * @function verify\n     * @memberof common.Asset\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Asset.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.chain != null && message.hasOwnProperty(\"chain\"))\n        if (!$util.isString(message.chain)) return \"chain: string expected\";\n      if (message.symbol != null && message.hasOwnProperty(\"symbol\"))\n        if (!$util.isString(message.symbol)) return \"symbol: string expected\";\n      if (message.ticker != null && message.hasOwnProperty(\"ticker\"))\n        if (!$util.isString(message.ticker)) return \"ticker: string expected\";\n      if (message.synth != null && message.hasOwnProperty(\"synth\"))\n        if (typeof message.synth !== \"boolean\") return \"synth: boolean expected\";\n      return null;\n    };\n\n    /**\n     * Creates an Asset message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof common.Asset\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {common.Asset} Asset\n     */\n    Asset.fromObject = function fromObject(object) {\n      if (object instanceof $root.common.Asset) return object;\n      const message = new $root.common.Asset();\n      if (object.chain != null) message.chain = String(object.chain);\n      if (object.symbol != null) message.symbol = String(object.symbol);\n      if (object.ticker != null) message.ticker = String(object.ticker);\n      if (object.synth != null) message.synth = Boolean(object.synth);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from an Asset message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof common.Asset\n     * @static\n     * @param {common.Asset} message Asset\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Asset.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      const object = {};\n      if (options.defaults) {\n        object.chain = \"\";\n        object.symbol = \"\";\n        object.ticker = \"\";\n        object.synth = false;\n      }\n      if (message.chain != null && message.hasOwnProperty(\"chain\")) object.chain = message.chain;\n      if (message.symbol != null && message.hasOwnProperty(\"symbol\"))\n        object.symbol = message.symbol;\n      if (message.ticker != null && message.hasOwnProperty(\"ticker\"))\n        object.ticker = message.ticker;\n      if (message.synth != null && message.hasOwnProperty(\"synth\")) object.synth = message.synth;\n      return object;\n    };\n\n    /**\n     * Converts this Asset to JSON.\n     * @function toJSON\n     * @memberof common.Asset\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Asset.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Asset;\n  })();\n\n  common.Coin = (() => {\n    /**\n     * Properties of a Coin.\n     * @memberof common\n     * @interface ICoin\n     * @property {common.IAsset|null} [asset] Coin asset\n     * @property {string|null} [amount] Coin amount\n     * @property {number|Long|null} [decimals] Coin decimals\n     */\n\n    /**\n     * Constructs a new Coin.\n     * @memberof common\n     * @classdesc Represents a Coin.\n     * @implements ICoin\n     * @constructor\n     * @param {common.ICoin=} [properties] Properties to set\n     */\n    function Coin(properties) {\n      if (properties)\n        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Coin asset.\n     * @member {common.IAsset|null|undefined} asset\n     * @memberof common.Coin\n     * @instance\n     */\n    Coin.prototype.asset = null;\n\n    /**\n     * Coin amount.\n     * @member {string} amount\n     * @memberof common.Coin\n     * @instance\n     */\n    Coin.prototype.amount = \"\";\n\n    /**\n     * Coin decimals.\n     * @member {number|Long} decimals\n     * @memberof common.Coin\n     * @instance\n     */\n    Coin.prototype.decimals = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n    /**\n     * Creates a new Coin instance using the specified properties.\n     * @function create\n     * @memberof common.Coin\n     * @static\n     * @param {common.ICoin=} [properties] Properties to set\n     * @returns {common.Coin} Coin instance\n     */\n    Coin.create = function create(properties) {\n      return new Coin(properties);\n    };\n\n    /**\n     * Encodes the specified Coin message. Does not implicitly {@link common.Coin.verify|verify} messages.\n     * @function encode\n     * @memberof common.Coin\n     * @static\n     * @param {common.ICoin} message Coin message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Coin.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.asset != null && Object.hasOwnProperty.call(message, \"asset\"))\n        $root.common.Asset.encode(\n          message.asset,\n          writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n        ).ldelim();\n      if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.amount);\n      if (message.decimals != null && Object.hasOwnProperty.call(message, \"decimals\"))\n        writer.uint32(/* id 3, wireType 0 =*/ 24).int64(message.decimals);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified Coin message, length delimited. Does not implicitly {@link common.Coin.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof common.Coin\n     * @static\n     * @param {common.ICoin} message Coin message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Coin.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Coin message from the specified reader or buffer.\n     * @function decode\n     * @memberof common.Coin\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {common.Coin} Coin\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Coin.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      const end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.common.Coin();\n      while (reader.pos < end) {\n        const tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.asset = $root.common.Asset.decode(reader, reader.uint32());\n            break;\n          case 2:\n            message.amount = reader.string();\n            break;\n          case 3:\n            message.decimals = reader.int64();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a Coin message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof common.Coin\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {common.Coin} Coin\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Coin.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Coin message.\n     * @function verify\n     * @memberof common.Coin\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Coin.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.asset != null && message.hasOwnProperty(\"asset\")) {\n        const error = $root.common.Asset.verify(message.asset);\n        if (error) return \"asset.\" + error;\n      }\n      if (message.amount != null && message.hasOwnProperty(\"amount\"))\n        if (!$util.isString(message.amount)) return \"amount: string expected\";\n      if (message.decimals != null && message.hasOwnProperty(\"decimals\"))\n        if (\n          !$util.isInteger(message.decimals) &&\n          !(\n            message.decimals &&\n            $util.isInteger(message.decimals.low) &&\n            $util.isInteger(message.decimals.high)\n          )\n        )\n          return \"decimals: integer|Long expected\";\n      return null;\n    };\n\n    /**\n     * Creates a Coin message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof common.Coin\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {common.Coin} Coin\n     */\n    Coin.fromObject = function fromObject(object) {\n      if (object instanceof $root.common.Coin) return object;\n      const message = new $root.common.Coin();\n      if (object.asset != null) {\n        if (typeof object.asset !== \"object\")\n          throw TypeError(\".common.Coin.asset: object expected\");\n        message.asset = $root.common.Asset.fromObject(object.asset);\n      }\n      if (object.amount != null) message.amount = String(object.amount);\n      if (object.decimals != null)\n        if ($util.Long) (message.decimals = $util.Long.fromValue(object.decimals)).unsigned = false;\n        else if (typeof object.decimals === \"string\")\n          message.decimals = parseInt(object.decimals, 10);\n        else if (typeof object.decimals === \"number\") message.decimals = object.decimals;\n        else if (typeof object.decimals === \"object\")\n          message.decimals = new $util.LongBits(\n            object.decimals.low >>> 0,\n            object.decimals.high >>> 0,\n          ).toNumber();\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a Coin message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof common.Coin\n     * @static\n     * @param {common.Coin} message Coin\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Coin.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      const object = {};\n      if (options.defaults) {\n        object.asset = null;\n        object.amount = \"\";\n        if ($util.Long) {\n          const long = new $util.Long(0, 0, false);\n          object.decimals =\n            options.longs === String\n              ? long.toString()\n              : options.longs === Number\n                ? long.toNumber()\n                : long;\n        } else object.decimals = options.longs === String ? \"0\" : 0;\n      }\n      if (message.asset != null && message.hasOwnProperty(\"asset\"))\n        object.asset = $root.common.Asset.toObject(message.asset, options);\n      if (message.amount != null && message.hasOwnProperty(\"amount\"))\n        object.amount = message.amount;\n      if (message.decimals != null && message.hasOwnProperty(\"decimals\"))\n        if (typeof message.decimals === \"number\")\n          object.decimals = options.longs === String ? String(message.decimals) : message.decimals;\n        else\n          object.decimals =\n            options.longs === String\n              ? $util.Long.prototype.toString.call(message.decimals)\n              : options.longs === Number\n                ? new $util.LongBits(\n                    message.decimals.low >>> 0,\n                    message.decimals.high >>> 0,\n                  ).toNumber()\n                : message.decimals;\n      return object;\n    };\n\n    /**\n     * Converts this Coin to JSON.\n     * @function toJSON\n     * @memberof common.Coin\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Coin.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Coin;\n  })();\n\n  common.PubKeySet = (() => {\n    /**\n     * Properties of a PubKeySet.\n     * @memberof common\n     * @interface IPubKeySet\n     * @property {string|null} [secp256k1] PubKeySet secp256k1\n     * @property {string|null} [ed25519] PubKeySet ed25519\n     */\n\n    /**\n     * Constructs a new PubKeySet.\n     * @memberof common\n     * @classdesc Represents a PubKeySet.\n     * @implements IPubKeySet\n     * @constructor\n     * @param {common.IPubKeySet=} [properties] Properties to set\n     */\n    function PubKeySet(properties) {\n      if (properties)\n        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PubKeySet secp256k1.\n     * @member {string} secp256k1\n     * @memberof common.PubKeySet\n     * @instance\n     */\n    PubKeySet.prototype.secp256k1 = \"\";\n\n    /**\n     * PubKeySet ed25519.\n     * @member {string} ed25519\n     * @memberof common.PubKeySet\n     * @instance\n     */\n    PubKeySet.prototype.ed25519 = \"\";\n\n    /**\n     * Creates a new PubKeySet instance using the specified properties.\n     * @function create\n     * @memberof common.PubKeySet\n     * @static\n     * @param {common.IPubKeySet=} [properties] Properties to set\n     * @returns {common.PubKeySet} PubKeySet instance\n     */\n    PubKeySet.create = function create(properties) {\n      return new PubKeySet(properties);\n    };\n\n    /**\n     * Encodes the specified PubKeySet message. Does not implicitly {@link common.PubKeySet.verify|verify} messages.\n     * @function encode\n     * @memberof common.PubKeySet\n     * @static\n     * @param {common.IPubKeySet} message PubKeySet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PubKeySet.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.secp256k1 != null && Object.hasOwnProperty.call(message, \"secp256k1\"))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.secp256k1);\n      if (message.ed25519 != null && Object.hasOwnProperty.call(message, \"ed25519\"))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.ed25519);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified PubKeySet message, length delimited. Does not implicitly {@link common.PubKeySet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof common.PubKeySet\n     * @static\n     * @param {common.IPubKeySet} message PubKeySet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PubKeySet.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PubKeySet message from the specified reader or buffer.\n     * @function decode\n     * @memberof common.PubKeySet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {common.PubKeySet} PubKeySet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PubKeySet.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      const end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.common.PubKeySet();\n      while (reader.pos < end) {\n        const tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.secp256k1 = reader.string();\n            break;\n          case 2:\n            message.ed25519 = reader.string();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a PubKeySet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof common.PubKeySet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {common.PubKeySet} PubKeySet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PubKeySet.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PubKeySet message.\n     * @function verify\n     * @memberof common.PubKeySet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PubKeySet.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.secp256k1 != null && message.hasOwnProperty(\"secp256k1\"))\n        if (!$util.isString(message.secp256k1)) return \"secp256k1: string expected\";\n      if (message.ed25519 != null && message.hasOwnProperty(\"ed25519\"))\n        if (!$util.isString(message.ed25519)) return \"ed25519: string expected\";\n      return null;\n    };\n\n    /**\n     * Creates a PubKeySet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof common.PubKeySet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {common.PubKeySet} PubKeySet\n     */\n    PubKeySet.fromObject = function fromObject(object) {\n      if (object instanceof $root.common.PubKeySet) return object;\n      const message = new $root.common.PubKeySet();\n      if (object.secp256k1 != null) message.secp256k1 = String(object.secp256k1);\n      if (object.ed25519 != null) message.ed25519 = String(object.ed25519);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a PubKeySet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof common.PubKeySet\n     * @static\n     * @param {common.PubKeySet} message PubKeySet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PubKeySet.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      const object = {};\n      if (options.defaults) {\n        object.secp256k1 = \"\";\n        object.ed25519 = \"\";\n      }\n      if (message.secp256k1 != null && message.hasOwnProperty(\"secp256k1\"))\n        object.secp256k1 = message.secp256k1;\n      if (message.ed25519 != null && message.hasOwnProperty(\"ed25519\"))\n        object.ed25519 = message.ed25519;\n      return object;\n    };\n\n    /**\n     * Converts this PubKeySet to JSON.\n     * @function toJSON\n     * @memberof common.PubKeySet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PubKeySet.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PubKeySet;\n  })();\n\n  common.Tx = (() => {\n    /**\n     * Properties of a Tx.\n     * @memberof common\n     * @interface ITx\n     * @property {string|null} [id] Tx id\n     * @property {string|null} [chain] Tx chain\n     * @property {string|null} [fromAddress] Tx fromAddress\n     * @property {string|null} [toAddress] Tx toAddress\n     * @property {Array.<common.ICoin>|null} [coins] Tx coins\n     * @property {Array.<common.ICoin>|null} [gas] Tx gas\n     * @property {string|null} [memo] Tx memo\n     */\n\n    /**\n     * Constructs a new Tx.\n     * @memberof common\n     * @classdesc Represents a Tx.\n     * @implements ITx\n     * @constructor\n     * @param {common.ITx=} [properties] Properties to set\n     */\n    function Tx(properties) {\n      this.coins = [];\n      this.gas = [];\n      if (properties)\n        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Tx id.\n     * @member {string} id\n     * @memberof common.Tx\n     * @instance\n     */\n    Tx.prototype.id = \"\";\n\n    /**\n     * Tx chain.\n     * @member {string} chain\n     * @memberof common.Tx\n     * @instance\n     */\n    Tx.prototype.chain = \"\";\n\n    /**\n     * Tx fromAddress.\n     * @member {string} fromAddress\n     * @memberof common.Tx\n     * @instance\n     */\n    Tx.prototype.fromAddress = \"\";\n\n    /**\n     * Tx toAddress.\n     * @member {string} toAddress\n     * @memberof common.Tx\n     * @instance\n     */\n    Tx.prototype.toAddress = \"\";\n\n    /**\n     * Tx coins.\n     * @member {Array.<common.ICoin>} coins\n     * @memberof common.Tx\n     * @instance\n     */\n    Tx.prototype.coins = $util.emptyArray;\n\n    /**\n     * Tx gas.\n     * @member {Array.<common.ICoin>} gas\n     * @memberof common.Tx\n     * @instance\n     */\n    Tx.prototype.gas = $util.emptyArray;\n\n    /**\n     * Tx memo.\n     * @member {string} memo\n     * @memberof common.Tx\n     * @instance\n     */\n    Tx.prototype.memo = \"\";\n\n    /**\n     * Creates a new Tx instance using the specified properties.\n     * @function create\n     * @memberof common.Tx\n     * @static\n     * @param {common.ITx=} [properties] Properties to set\n     * @returns {common.Tx} Tx instance\n     */\n    Tx.create = function create(properties) {\n      return new Tx(properties);\n    };\n\n    /**\n     * Encodes the specified Tx message. Does not implicitly {@link common.Tx.verify|verify} messages.\n     * @function encode\n     * @memberof common.Tx\n     * @static\n     * @param {common.ITx} message Tx message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Tx.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.id);\n      if (message.chain != null && Object.hasOwnProperty.call(message, \"chain\"))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.chain);\n      if (message.fromAddress != null && Object.hasOwnProperty.call(message, \"fromAddress\"))\n        writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.fromAddress);\n      if (message.toAddress != null && Object.hasOwnProperty.call(message, \"toAddress\"))\n        writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.toAddress);\n      if (message.coins?.length)\n        for (let i = 0; i < message.coins.length; ++i)\n          $root.common.Coin.encode(\n            message.coins[i],\n            writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\n          ).ldelim();\n      if (message.gas?.length)\n        for (let j = 0; j < message.gas.length; ++j)\n          $root.common.Coin.encode(\n            message.gas[j],\n            writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n          ).ldelim();\n      if (message.memo != null && Object.hasOwnProperty.call(message, \"memo\"))\n        writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.memo);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified Tx message, length delimited. Does not implicitly {@link common.Tx.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof common.Tx\n     * @static\n     * @param {common.ITx} message Tx message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Tx.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Tx message from the specified reader or buffer.\n     * @function decode\n     * @memberof common.Tx\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {common.Tx} Tx\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Tx.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      const end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.common.Tx();\n      while (reader.pos < end) {\n        const tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.id = reader.string();\n            break;\n          case 2:\n            message.chain = reader.string();\n            break;\n          case 3:\n            message.fromAddress = reader.string();\n            break;\n          case 4:\n            message.toAddress = reader.string();\n            break;\n          case 5:\n            if (!message.coins?.length) message.coins = [];\n            message.coins.push($root.common.Coin.decode(reader, reader.uint32()));\n            break;\n          case 6:\n            if (!message.gas?.length) message.gas = [];\n            message.gas.push($root.common.Coin.decode(reader, reader.uint32()));\n            break;\n          case 7:\n            message.memo = reader.string();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a Tx message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof common.Tx\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {common.Tx} Tx\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Tx.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Tx message.\n     * @function verify\n     * @memberof common.Tx\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Tx.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.id != null && message.hasOwnProperty(\"id\"))\n        if (!$util.isString(message.id)) return \"id: string expected\";\n      if (message.chain != null && message.hasOwnProperty(\"chain\"))\n        if (!$util.isString(message.chain)) return \"chain: string expected\";\n      if (message.fromAddress != null && message.hasOwnProperty(\"fromAddress\"))\n        if (!$util.isString(message.fromAddress)) return \"fromAddress: string expected\";\n      if (message.toAddress != null && message.hasOwnProperty(\"toAddress\"))\n        if (!$util.isString(message.toAddress)) return \"toAddress: string expected\";\n      if (message.coins != null && message.hasOwnProperty(\"coins\")) {\n        if (!Array.isArray(message.coins)) return \"coins: array expected\";\n        for (let i = 0; i < message.coins.length; ++i) {\n          const error = $root.common.Coin.verify(message.coins[i]);\n          if (error) return \"coins.\" + error;\n        }\n      }\n      if (message.gas != null && message.hasOwnProperty(\"gas\")) {\n        if (!Array.isArray(message.gas)) return \"gas: array expected\";\n        for (let j = 0; j < message.gas.length; ++j) {\n          const error = $root.common.Coin.verify(message.gas[j]);\n          if (error) return \"gas.\" + error;\n        }\n      }\n      if (message.memo != null && message.hasOwnProperty(\"memo\"))\n        if (!$util.isString(message.memo)) return \"memo: string expected\";\n      return null;\n    };\n\n    /**\n     * Creates a Tx message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof common.Tx\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {common.Tx} Tx\n     */\n    Tx.fromObject = function fromObject(object) {\n      if (object instanceof $root.common.Tx) return object;\n      const message = new $root.common.Tx();\n      if (object.id != null) message.id = String(object.id);\n      if (object.chain != null) message.chain = String(object.chain);\n      if (object.fromAddress != null) message.fromAddress = String(object.fromAddress);\n      if (object.toAddress != null) message.toAddress = String(object.toAddress);\n      if (object.coins) {\n        if (!Array.isArray(object.coins)) throw TypeError(\".common.Tx.coins: array expected\");\n        message.coins = [];\n        for (let i = 0; i < object.coins.length; ++i) {\n          if (typeof object.coins[i] !== \"object\")\n            throw TypeError(\".common.Tx.coins: object expected\");\n          message.coins[i] = $root.common.Coin.fromObject(object.coins[i]);\n        }\n      }\n      if (object.gas) {\n        if (!Array.isArray(object.gas)) throw TypeError(\".common.Tx.gas: array expected\");\n        message.gas = [];\n        for (let i = 0; i < object.gas.length; ++i) {\n          if (typeof object.gas[i] !== \"object\") throw TypeError(\".common.Tx.gas: object expected\");\n          message.gas[i] = $root.common.Coin.fromObject(object.gas[i]);\n        }\n      }\n      if (object.memo != null) message.memo = String(object.memo);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a Tx message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof common.Tx\n     * @static\n     * @param {common.Tx} message Tx\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Tx.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      const object = {};\n      if (options.arrays || options.defaults) {\n        object.coins = [];\n        object.gas = [];\n      }\n      if (options.defaults) {\n        object.id = \"\";\n        object.chain = \"\";\n        object.fromAddress = \"\";\n        object.toAddress = \"\";\n        object.memo = \"\";\n      }\n      if (message.id != null && message.hasOwnProperty(\"id\")) object.id = message.id;\n      if (message.chain != null && message.hasOwnProperty(\"chain\")) object.chain = message.chain;\n      if (message.fromAddress != null && message.hasOwnProperty(\"fromAddress\"))\n        object.fromAddress = message.fromAddress;\n      if (message.toAddress != null && message.hasOwnProperty(\"toAddress\"))\n        object.toAddress = message.toAddress;\n      if (message.coins?.length) {\n        object.coins = [];\n        for (let j = 0; j < message.coins.length; ++j)\n          object.coins[j] = $root.common.Coin.toObject(message.coins[j], options);\n      }\n      if (message.gas?.length) {\n        object.gas = [];\n        for (let j = 0; j < message.gas.length; ++j)\n          object.gas[j] = $root.common.Coin.toObject(message.gas[j], options);\n      }\n      if (message.memo != null && message.hasOwnProperty(\"memo\")) object.memo = message.memo;\n      return object;\n    };\n\n    /**\n     * Converts this Tx to JSON.\n     * @function toJSON\n     * @memberof common.Tx\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Tx.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Tx;\n  })();\n\n  common.Fee = (() => {\n    /**\n     * Properties of a Fee.\n     * @memberof common\n     * @interface IFee\n     * @property {Array.<common.ICoin>|null} [coins] Fee coins\n     * @property {string|null} [poolDeduct] Fee poolDeduct\n     */\n\n    /**\n     * Constructs a new Fee.\n     * @memberof common\n     * @classdesc Represents a Fee.\n     * @implements IFee\n     * @constructor\n     * @param {common.IFee=} [properties] Properties to set\n     */\n    function Fee(properties) {\n      this.coins = [];\n      if (properties)\n        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Fee coins.\n     * @member {Array.<common.ICoin>} coins\n     * @memberof common.Fee\n     * @instance\n     */\n    Fee.prototype.coins = $util.emptyArray;\n\n    /**\n     * Fee poolDeduct.\n     * @member {string} poolDeduct\n     * @memberof common.Fee\n     * @instance\n     */\n    Fee.prototype.poolDeduct = \"\";\n\n    /**\n     * Creates a new Fee instance using the specified properties.\n     * @function create\n     * @memberof common.Fee\n     * @static\n     * @param {common.IFee=} [properties] Properties to set\n     * @returns {common.Fee} Fee instance\n     */\n    Fee.create = function create(properties) {\n      return new Fee(properties);\n    };\n\n    /**\n     * Encodes the specified Fee message. Does not implicitly {@link common.Fee.verify|verify} messages.\n     * @function encode\n     * @memberof common.Fee\n     * @static\n     * @param {common.IFee} message Fee message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Fee.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.coins?.length)\n        for (let i = 0; i < message.coins.length; ++i)\n          $root.common.Coin.encode(\n            message.coins[i],\n            writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n          ).ldelim();\n      if (message.poolDeduct != null && Object.hasOwnProperty.call(message, \"poolDeduct\"))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.poolDeduct);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified Fee message, length delimited. Does not implicitly {@link common.Fee.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof common.Fee\n     * @static\n     * @param {common.IFee} message Fee message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Fee.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Fee message from the specified reader or buffer.\n     * @function decode\n     * @memberof common.Fee\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {common.Fee} Fee\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Fee.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      const end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.common.Fee();\n      while (reader.pos < end) {\n        const tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            if (!message.coins?.length) message.coins = [];\n            message.coins.push($root.common.Coin.decode(reader, reader.uint32()));\n            break;\n          case 2:\n            message.poolDeduct = reader.string();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a Fee message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof common.Fee\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {common.Fee} Fee\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Fee.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Fee message.\n     * @function verify\n     * @memberof common.Fee\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Fee.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.coins != null && message.hasOwnProperty(\"coins\")) {\n        if (!Array.isArray(message.coins)) return \"coins: array expected\";\n        for (let i = 0; i < message.coins.length; ++i) {\n          const error = $root.common.Coin.verify(message.coins[i]);\n          if (error) return \"coins.\" + error;\n        }\n      }\n      if (message.poolDeduct != null && message.hasOwnProperty(\"poolDeduct\"))\n        if (!$util.isString(message.poolDeduct)) return \"poolDeduct: string expected\";\n      return null;\n    };\n\n    /**\n     * Creates a Fee message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof common.Fee\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {common.Fee} Fee\n     */\n    Fee.fromObject = function fromObject(object) {\n      if (object instanceof $root.common.Fee) return object;\n      const message = new $root.common.Fee();\n      if (object.coins) {\n        if (!Array.isArray(object.coins)) throw TypeError(\".common.Fee.coins: array expected\");\n        message.coins = [];\n        for (let i = 0; i < object.coins.length; ++i) {\n          if (typeof object.coins[i] !== \"object\")\n            throw TypeError(\".common.Fee.coins: object expected\");\n          message.coins[i] = $root.common.Coin.fromObject(object.coins[i]);\n        }\n      }\n      if (object.poolDeduct != null) message.poolDeduct = String(object.poolDeduct);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a Fee message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof common.Fee\n     * @static\n     * @param {common.Fee} message Fee\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Fee.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      const object = {};\n      if (options.arrays || options.defaults) object.coins = [];\n      if (options.defaults) object.poolDeduct = \"\";\n      if (message.coins?.length) {\n        object.coins = [];\n        for (let j = 0; j < message.coins.length; ++j)\n          object.coins[j] = $root.common.Coin.toObject(message.coins[j], options);\n      }\n      if (message.poolDeduct != null && message.hasOwnProperty(\"poolDeduct\"))\n        object.poolDeduct = message.poolDeduct;\n      return object;\n    };\n\n    /**\n     * Converts this Fee to JSON.\n     * @function toJSON\n     * @memberof common.Fee\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Fee.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Fee;\n  })();\n\n  common.ProtoUint = (() => {\n    /**\n     * Properties of a ProtoUint.\n     * @memberof common\n     * @interface IProtoUint\n     * @property {string|null} [value] ProtoUint value\n     */\n\n    /**\n     * Constructs a new ProtoUint.\n     * @memberof common\n     * @classdesc Represents a ProtoUint.\n     * @implements IProtoUint\n     * @constructor\n     * @param {common.IProtoUint=} [properties] Properties to set\n     */\n    function ProtoUint(properties) {\n      if (properties)\n        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ProtoUint value.\n     * @member {string} value\n     * @memberof common.ProtoUint\n     * @instance\n     */\n    ProtoUint.prototype.value = \"\";\n\n    /**\n     * Creates a new ProtoUint instance using the specified properties.\n     * @function create\n     * @memberof common.ProtoUint\n     * @static\n     * @param {common.IProtoUint=} [properties] Properties to set\n     * @returns {common.ProtoUint} ProtoUint instance\n     */\n    ProtoUint.create = function create(properties) {\n      return new ProtoUint(properties);\n    };\n\n    /**\n     * Encodes the specified ProtoUint message. Does not implicitly {@link common.ProtoUint.verify|verify} messages.\n     * @function encode\n     * @memberof common.ProtoUint\n     * @static\n     * @param {common.IProtoUint} message ProtoUint message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ProtoUint.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.value);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified ProtoUint message, length delimited. Does not implicitly {@link common.ProtoUint.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof common.ProtoUint\n     * @static\n     * @param {common.IProtoUint} message ProtoUint message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ProtoUint.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ProtoUint message from the specified reader or buffer.\n     * @function decode\n     * @memberof common.ProtoUint\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {common.ProtoUint} ProtoUint\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ProtoUint.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      const end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.common.ProtoUint();\n      while (reader.pos < end) {\n        const tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.value = reader.string();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a ProtoUint message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof common.ProtoUint\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {common.ProtoUint} ProtoUint\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ProtoUint.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ProtoUint message.\n     * @function verify\n     * @memberof common.ProtoUint\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ProtoUint.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.value != null && message.hasOwnProperty(\"value\"))\n        if (!$util.isString(message.value)) return \"value: string expected\";\n      return null;\n    };\n\n    /**\n     * Creates a ProtoUint message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof common.ProtoUint\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {common.ProtoUint} ProtoUint\n     */\n    ProtoUint.fromObject = function fromObject(object) {\n      if (object instanceof $root.common.ProtoUint) return object;\n      const message = new $root.common.ProtoUint();\n      if (object.value != null) message.value = String(object.value);\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a ProtoUint message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof common.ProtoUint\n     * @static\n     * @param {common.ProtoUint} message ProtoUint\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ProtoUint.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      const object = {};\n      if (options.defaults) object.value = \"\";\n      if (message.value != null && message.hasOwnProperty(\"value\")) object.value = message.value;\n      return object;\n    };\n\n    /**\n     * Converts this ProtoUint to JSON.\n     * @function toJSON\n     * @memberof common.ProtoUint\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ProtoUint.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ProtoUint;\n  })();\n\n  return common;\n})();\n\n$root.types = (() => {\n  /**\n   * Namespace types.\n   * @exports types\n   * @namespace\n   */\n  const types = {};\n\n  types.MsgDeposit = (() => {\n    /**\n     * Properties of a MsgDeposit.\n     * @memberof types\n     * @interface IMsgDeposit\n     * @property {Array.<common.ICoin>|null} [coins] MsgDeposit coins\n     * @property {string|null} [memo] MsgDeposit memo\n     * @property {Uint8Array|null} [signer] MsgDeposit signer\n     */\n\n    /**\n     * Constructs a new MsgDeposit.\n     * @memberof types\n     * @classdesc Represents a MsgDeposit.\n     * @implements IMsgDeposit\n     * @constructor\n     * @param {types.IMsgDeposit=} [properties] Properties to set\n     */\n    function MsgDeposit(properties) {\n      this.coins = [];\n      if (properties)\n        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * MsgDeposit coins.\n     * @member {Array.<common.ICoin>} coins\n     * @memberof types.MsgDeposit\n     * @instance\n     */\n    MsgDeposit.prototype.coins = $util.emptyArray;\n\n    /**\n     * MsgDeposit memo.\n     * @member {string} memo\n     * @memberof types.MsgDeposit\n     * @instance\n     */\n    MsgDeposit.prototype.memo = \"\";\n\n    /**\n     * MsgDeposit signer.\n     * @member {Uint8Array} signer\n     * @memberof types.MsgDeposit\n     * @instance\n     */\n    MsgDeposit.prototype.signer = $util.newBuffer([]);\n\n    /**\n     * Creates a new MsgDeposit instance using the specified properties.\n     * @function create\n     * @memberof types.MsgDeposit\n     * @static\n     * @param {types.IMsgDeposit=} [properties] Properties to set\n     * @returns {types.MsgDeposit} MsgDeposit instance\n     */\n    MsgDeposit.create = function create(properties) {\n      return new MsgDeposit(properties);\n    };\n\n    /**\n     * Encodes the specified MsgDeposit message. Does not implicitly {@link types.MsgDeposit.verify|verify} messages.\n     * @function encode\n     * @memberof types.MsgDeposit\n     * @static\n     * @param {types.IMsgDeposit} message MsgDeposit message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MsgDeposit.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.coins?.length)\n        for (let i = 0; i < message.coins.length; ++i)\n          $root.common.Coin.encode(\n            message.coins[i],\n            writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n          ).ldelim();\n      if (message.memo != null && Object.hasOwnProperty.call(message, \"memo\"))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.memo);\n      if (message.signer != null && Object.hasOwnProperty.call(message, \"signer\"))\n        writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.signer);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified MsgDeposit message, length delimited. Does not implicitly {@link types.MsgDeposit.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof types.MsgDeposit\n     * @static\n     * @param {types.IMsgDeposit} message MsgDeposit message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MsgDeposit.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a MsgDeposit message from the specified reader or buffer.\n     * @function decode\n     * @memberof types.MsgDeposit\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {types.MsgDeposit} MsgDeposit\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MsgDeposit.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      const end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.types.MsgDeposit();\n      while (reader.pos < end) {\n        const tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            if (!message.coins?.length) message.coins = [];\n            message.coins.push($root.common.Coin.decode(reader, reader.uint32()));\n            break;\n          case 2:\n            message.memo = reader.string();\n            break;\n          case 3:\n            message.signer = reader.bytes();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a MsgDeposit message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof types.MsgDeposit\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {types.MsgDeposit} MsgDeposit\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MsgDeposit.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a MsgDeposit message.\n     * @function verify\n     * @memberof types.MsgDeposit\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    MsgDeposit.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.coins != null && message.hasOwnProperty(\"coins\")) {\n        if (!Array.isArray(message.coins)) return \"coins: array expected\";\n        for (let i = 0; i < message.coins.length; ++i) {\n          const error = $root.common.Coin.verify(message.coins[i]);\n          if (error) return \"coins.\" + error;\n        }\n      }\n      if (message.memo != null && message.hasOwnProperty(\"memo\"))\n        if (!$util.isString(message.memo)) return \"memo: string expected\";\n      if (message.signer != null && message.hasOwnProperty(\"signer\"))\n        if (\n          !(\n            (message.signer && typeof message.signer.length === \"number\") ||\n            $util.isString(message.signer)\n          )\n        )\n          return \"signer: buffer expected\";\n      return null;\n    };\n\n    /**\n     * Creates a MsgDeposit message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof types.MsgDeposit\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {types.MsgDeposit} MsgDeposit\n     */\n    MsgDeposit.fromObject = function fromObject(object) {\n      if (object instanceof $root.types.MsgDeposit) return object;\n      const message = new $root.types.MsgDeposit();\n      if (object.coins) {\n        if (!Array.isArray(object.coins))\n          throw TypeError(\".types.MsgDeposit.coins: array expected\");\n        message.coins = [];\n        for (let i = 0; i < object.coins.length; ++i) {\n          if (typeof object.coins[i] !== \"object\")\n            throw TypeError(\".types.MsgDeposit.coins: object expected\");\n          message.coins[i] = $root.common.Coin.fromObject(object.coins[i]);\n        }\n      }\n      if (object.memo != null) message.memo = String(object.memo);\n      if (object.signer != null)\n        if (typeof object.signer === \"string\")\n          $util.base64.decode(\n            object.signer,\n            (message.signer = $util.newBuffer($util.base64.length(object.signer))),\n            0,\n          );\n        else if (object.signer.length) message.signer = object.signer;\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a MsgDeposit message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof types.MsgDeposit\n     * @static\n     * @param {types.MsgDeposit} message MsgDeposit\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    MsgDeposit.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      const object = {};\n      if (options.arrays || options.defaults) object.coins = [];\n      if (options.defaults) {\n        object.memo = \"\";\n        if (options.bytes === String) object.signer = \"\";\n        else {\n          object.signer = [];\n          if (options.bytes !== Array) object.signer = $util.newBuffer(object.signer);\n        }\n      }\n      if (message.coins?.length) {\n        object.coins = [];\n        for (let j = 0; j < message.coins.length; ++j)\n          object.coins[j] = $root.common.Coin.toObject(message.coins[j], options);\n      }\n      if (message.memo != null && message.hasOwnProperty(\"memo\")) object.memo = message.memo;\n      if (message.signer != null && message.hasOwnProperty(\"signer\"))\n        object.signer =\n          options.bytes === String\n            ? $util.base64.encode(message.signer, 0, message.signer.length)\n            : options.bytes === Array\n              ? Array.prototype.slice.call(message.signer)\n              : message.signer;\n      return object;\n    };\n\n    /**\n     * Converts this MsgDeposit to JSON.\n     * @function toJSON\n     * @memberof types.MsgDeposit\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    MsgDeposit.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return MsgDeposit;\n  })();\n\n  types.MsgSend = (() => {\n    /**\n     * Properties of a MsgSend.\n     * @memberof types\n     * @interface IMsgSend\n     * @property {Uint8Array|null} [fromAddress] MsgSend fromAddress\n     * @property {Uint8Array|null} [toAddress] MsgSend toAddress\n     * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [amount] MsgSend amount\n     */\n\n    /**\n     * Constructs a new MsgSend.\n     * @memberof types\n     * @classdesc Represents a MsgSend.\n     * @implements IMsgSend\n     * @constructor\n     * @param {types.IMsgSend=} [properties] Properties to set\n     */\n    function MsgSend(properties) {\n      this.amount = [];\n      if (properties)\n        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n          if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * MsgSend fromAddress.\n     * @member {Uint8Array} fromAddress\n     * @memberof types.MsgSend\n     * @instance\n     */\n    MsgSend.prototype.fromAddress = $util.newBuffer([]);\n\n    /**\n     * MsgSend toAddress.\n     * @member {Uint8Array} toAddress\n     * @memberof types.MsgSend\n     * @instance\n     */\n    MsgSend.prototype.toAddress = $util.newBuffer([]);\n\n    /**\n     * MsgSend amount.\n     * @member {Array.<cosmos.base.v1beta1.ICoin>} amount\n     * @memberof types.MsgSend\n     * @instance\n     */\n    MsgSend.prototype.amount = $util.emptyArray;\n\n    /**\n     * Creates a new MsgSend instance using the specified properties.\n     * @function create\n     * @memberof types.MsgSend\n     * @static\n     * @param {types.IMsgSend=} [properties] Properties to set\n     * @returns {types.MsgSend} MsgSend instance\n     */\n    MsgSend.create = function create(properties) {\n      return new MsgSend(properties);\n    };\n\n    /**\n     * Encodes the specified MsgSend message. Does not implicitly {@link types.MsgSend.verify|verify} messages.\n     * @function encode\n     * @memberof types.MsgSend\n     * @static\n     * @param {types.IMsgSend} message MsgSend message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MsgSend.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.fromAddress != null && Object.hasOwnProperty.call(message, \"fromAddress\"))\n        writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.fromAddress);\n      if (message.toAddress != null && Object.hasOwnProperty.call(message, \"toAddress\"))\n        writer.uint32(/* id 2, wireType 2 =*/ 18).bytes(message.toAddress);\n      if (message.amount?.length)\n        for (let i = 0; i < message.amount.length; ++i)\n          $root.cosmos.base.v1beta1.Coin.encode(\n            message.amount[i],\n            writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n          ).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified MsgSend message, length delimited. Does not implicitly {@link types.MsgSend.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof types.MsgSend\n     * @static\n     * @param {types.IMsgSend} message MsgSend message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MsgSend.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a MsgSend message from the specified reader or buffer.\n     * @function decode\n     * @memberof types.MsgSend\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {types.MsgSend} MsgSend\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MsgSend.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      const end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.types.MsgSend();\n      while (reader.pos < end) {\n        const tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.fromAddress = reader.bytes();\n            break;\n          case 2:\n            message.toAddress = reader.bytes();\n            break;\n          case 3:\n            if (!message.amount?.length) message.amount = [];\n            message.amount.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a MsgSend message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof types.MsgSend\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {types.MsgSend} MsgSend\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MsgSend.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a MsgSend message.\n     * @function verify\n     * @memberof types.MsgSend\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    MsgSend.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.fromAddress != null && message.hasOwnProperty(\"fromAddress\"))\n        if (\n          !(\n            (message.fromAddress && typeof message.fromAddress.length === \"number\") ||\n            $util.isString(message.fromAddress)\n          )\n        )\n          return \"fromAddress: buffer expected\";\n      if (message.toAddress != null && message.hasOwnProperty(\"toAddress\"))\n        if (\n          !(\n            (message.toAddress && typeof message.toAddress.length === \"number\") ||\n            $util.isString(message.toAddress)\n          )\n        )\n          return \"toAddress: buffer expected\";\n      if (message.amount != null && message.hasOwnProperty(\"amount\")) {\n        if (!Array.isArray(message.amount)) return \"amount: array expected\";\n        for (let i = 0; i < message.amount.length; ++i) {\n          const error = $root.cosmos.base.v1beta1.Coin.verify(message.amount[i]);\n          if (error) return \"amount.\" + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a MsgSend message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof types.MsgSend\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {types.MsgSend} MsgSend\n     */\n    MsgSend.fromObject = function fromObject(object) {\n      if (object instanceof $root.types.MsgSend) return object;\n      const message = new $root.types.MsgSend();\n      if (object.fromAddress != null)\n        if (typeof object.fromAddress === \"string\")\n          $util.base64.decode(\n            object.fromAddress,\n            (message.fromAddress = $util.newBuffer($util.base64.length(object.fromAddress))),\n            0,\n          );\n        else if (object.fromAddress.length) message.fromAddress = object.fromAddress;\n      if (object.toAddress != null)\n        if (typeof object.toAddress === \"string\")\n          $util.base64.decode(\n            object.toAddress,\n            (message.toAddress = $util.newBuffer($util.base64.length(object.toAddress))),\n            0,\n          );\n        else if (object.toAddress.length) message.toAddress = object.toAddress;\n      if (object.amount) {\n        if (!Array.isArray(object.amount)) throw TypeError(\".types.MsgSend.amount: array expected\");\n        message.amount = [];\n        for (let i = 0; i < object.amount.length; ++i) {\n          if (typeof object.amount[i] !== \"object\")\n            throw TypeError(\".types.MsgSend.amount: object expected\");\n          message.amount[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.amount[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a MsgSend message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof types.MsgSend\n     * @static\n     * @param {types.MsgSend} message MsgSend\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    MsgSend.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      const object = {};\n      if (options.arrays || options.defaults) object.amount = [];\n      if (options.defaults) {\n        if (options.bytes === String) object.fromAddress = \"\";\n        else {\n          object.fromAddress = [];\n          if (options.bytes !== Array) object.fromAddress = $util.newBuffer(object.fromAddress);\n        }\n        if (options.bytes === String) object.toAddress = \"\";\n        else {\n          object.toAddress = [];\n          if (options.bytes !== Array) object.toAddress = $util.newBuffer(object.toAddress);\n        }\n      }\n      if (message.fromAddress != null && message.hasOwnProperty(\"fromAddress\"))\n        object.fromAddress =\n          options.bytes === String\n            ? $util.base64.encode(message.fromAddress, 0, message.fromAddress.length)\n            : options.bytes === Array\n              ? Array.prototype.slice.call(message.fromAddress)\n              : message.fromAddress;\n      if (message.toAddress != null && message.hasOwnProperty(\"toAddress\"))\n        object.toAddress =\n          options.bytes === String\n            ? $util.base64.encode(message.toAddress, 0, message.toAddress.length)\n            : options.bytes === Array\n              ? Array.prototype.slice.call(message.toAddress)\n              : message.toAddress;\n      if (message.amount?.length) {\n        object.amount = [];\n        for (let j = 0; j < message.amount.length; ++j)\n          object.amount[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.amount[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this MsgSend to JSON.\n     * @function toJSON\n     * @memberof types.MsgSend\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    MsgSend.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return MsgSend;\n  })();\n\n  return types;\n})();\n\n$root.cosmos = (() => {\n  /**\n   * Namespace cosmos.\n   * @exports cosmos\n   * @namespace\n   */\n  const cosmos = {};\n\n  cosmos.base = (() => {\n    /**\n     * Namespace base.\n     * @memberof cosmos\n     * @namespace\n     */\n    const base = {};\n\n    base.v1beta1 = (() => {\n      /**\n       * Namespace v1beta1.\n       * @memberof cosmos.base\n       * @namespace\n       */\n      const v1beta1 = {};\n\n      v1beta1.Coin = (() => {\n        /**\n         * Properties of a Coin.\n         * @memberof cosmos.base.v1beta1\n         * @interface ICoin\n         * @property {string|null} [denom] Coin denom\n         * @property {string|null} [amount] Coin amount\n         */\n\n        /**\n         * Constructs a new Coin.\n         * @memberof cosmos.base.v1beta1\n         * @classdesc Represents a Coin.\n         * @implements ICoin\n         * @constructor\n         * @param {cosmos.base.v1beta1.ICoin=} [properties] Properties to set\n         */\n        function Coin(properties) {\n          if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n              if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Coin denom.\n         * @member {string} denom\n         * @memberof cosmos.base.v1beta1.Coin\n         * @instance\n         */\n        Coin.prototype.denom = \"\";\n\n        /**\n         * Coin amount.\n         * @member {string} amount\n         * @memberof cosmos.base.v1beta1.Coin\n         * @instance\n         */\n        Coin.prototype.amount = \"\";\n\n        /**\n         * Creates a new Coin instance using the specified properties.\n         * @function create\n         * @memberof cosmos.base.v1beta1.Coin\n         * @static\n         * @param {cosmos.base.v1beta1.ICoin=} [properties] Properties to set\n         * @returns {cosmos.base.v1beta1.Coin} Coin instance\n         */\n        Coin.create = function create(properties) {\n          return new Coin(properties);\n        };\n\n        /**\n         * Encodes the specified Coin message. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.\n         * @function encode\n         * @memberof cosmos.base.v1beta1.Coin\n         * @static\n         * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Coin.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.denom != null && Object.hasOwnProperty.call(message, \"denom\"))\n            writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.denom);\n          if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n            writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.amount);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified Coin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof cosmos.base.v1beta1.Coin\n         * @static\n         * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Coin.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Coin message from the specified reader or buffer.\n         * @function decode\n         * @memberof cosmos.base.v1beta1.Coin\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {cosmos.base.v1beta1.Coin} Coin\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Coin.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          const end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.cosmos.base.v1beta1.Coin();\n          while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                message.denom = reader.string();\n                break;\n              case 2:\n                message.amount = reader.string();\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a Coin message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof cosmos.base.v1beta1.Coin\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {cosmos.base.v1beta1.Coin} Coin\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Coin.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Coin message.\n         * @function verify\n         * @memberof cosmos.base.v1beta1.Coin\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Coin.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          if (message.denom != null && message.hasOwnProperty(\"denom\"))\n            if (!$util.isString(message.denom)) return \"denom: string expected\";\n          if (message.amount != null && message.hasOwnProperty(\"amount\"))\n            if (!$util.isString(message.amount)) return \"amount: string expected\";\n          return null;\n        };\n\n        /**\n         * Creates a Coin message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof cosmos.base.v1beta1.Coin\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {cosmos.base.v1beta1.Coin} Coin\n         */\n        Coin.fromObject = function fromObject(object) {\n          if (object instanceof $root.cosmos.base.v1beta1.Coin) return object;\n          const message = new $root.cosmos.base.v1beta1.Coin();\n          if (object.denom != null) message.denom = String(object.denom);\n          if (object.amount != null) message.amount = String(object.amount);\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a Coin message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof cosmos.base.v1beta1.Coin\n         * @static\n         * @param {cosmos.base.v1beta1.Coin} message Coin\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Coin.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          const object = {};\n          if (options.defaults) {\n            object.denom = \"\";\n            object.amount = \"\";\n          }\n          if (message.denom != null && message.hasOwnProperty(\"denom\"))\n            object.denom = message.denom;\n          if (message.amount != null && message.hasOwnProperty(\"amount\"))\n            object.amount = message.amount;\n          return object;\n        };\n\n        /**\n         * Converts this Coin to JSON.\n         * @function toJSON\n         * @memberof cosmos.base.v1beta1.Coin\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Coin.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Coin;\n      })();\n\n      v1beta1.DecCoin = (() => {\n        /**\n         * Properties of a DecCoin.\n         * @memberof cosmos.base.v1beta1\n         * @interface IDecCoin\n         * @property {string|null} [denom] DecCoin denom\n         * @property {string|null} [amount] DecCoin amount\n         */\n\n        /**\n         * Constructs a new DecCoin.\n         * @memberof cosmos.base.v1beta1\n         * @classdesc Represents a DecCoin.\n         * @implements IDecCoin\n         * @constructor\n         * @param {cosmos.base.v1beta1.IDecCoin=} [properties] Properties to set\n         */\n        function DecCoin(properties) {\n          if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n              if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DecCoin denom.\n         * @member {string} denom\n         * @memberof cosmos.base.v1beta1.DecCoin\n         * @instance\n         */\n        DecCoin.prototype.denom = \"\";\n\n        /**\n         * DecCoin amount.\n         * @member {string} amount\n         * @memberof cosmos.base.v1beta1.DecCoin\n         * @instance\n         */\n        DecCoin.prototype.amount = \"\";\n\n        /**\n         * Creates a new DecCoin instance using the specified properties.\n         * @function create\n         * @memberof cosmos.base.v1beta1.DecCoin\n         * @static\n         * @param {cosmos.base.v1beta1.IDecCoin=} [properties] Properties to set\n         * @returns {cosmos.base.v1beta1.DecCoin} DecCoin instance\n         */\n        DecCoin.create = function create(properties) {\n          return new DecCoin(properties);\n        };\n\n        /**\n         * Encodes the specified DecCoin message. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.\n         * @function encode\n         * @memberof cosmos.base.v1beta1.DecCoin\n         * @static\n         * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecCoin.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.denom != null && Object.hasOwnProperty.call(message, \"denom\"))\n            writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.denom);\n          if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n            writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.amount);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified DecCoin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof cosmos.base.v1beta1.DecCoin\n         * @static\n         * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecCoin.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DecCoin message from the specified reader or buffer.\n         * @function decode\n         * @memberof cosmos.base.v1beta1.DecCoin\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {cosmos.base.v1beta1.DecCoin} DecCoin\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecCoin.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          const end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.cosmos.base.v1beta1.DecCoin();\n          while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                message.denom = reader.string();\n                break;\n              case 2:\n                message.amount = reader.string();\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a DecCoin message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof cosmos.base.v1beta1.DecCoin\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {cosmos.base.v1beta1.DecCoin} DecCoin\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecCoin.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DecCoin message.\n         * @function verify\n         * @memberof cosmos.base.v1beta1.DecCoin\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DecCoin.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          if (message.denom != null && message.hasOwnProperty(\"denom\"))\n            if (!$util.isString(message.denom)) return \"denom: string expected\";\n          if (message.amount != null && message.hasOwnProperty(\"amount\"))\n            if (!$util.isString(message.amount)) return \"amount: string expected\";\n          return null;\n        };\n\n        /**\n         * Creates a DecCoin message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof cosmos.base.v1beta1.DecCoin\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {cosmos.base.v1beta1.DecCoin} DecCoin\n         */\n        DecCoin.fromObject = function fromObject(object) {\n          if (object instanceof $root.cosmos.base.v1beta1.DecCoin) return object;\n          const message = new $root.cosmos.base.v1beta1.DecCoin();\n          if (object.denom != null) message.denom = String(object.denom);\n          if (object.amount != null) message.amount = String(object.amount);\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a DecCoin message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof cosmos.base.v1beta1.DecCoin\n         * @static\n         * @param {cosmos.base.v1beta1.DecCoin} message DecCoin\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DecCoin.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          const object = {};\n          if (options.defaults) {\n            object.denom = \"\";\n            object.amount = \"\";\n          }\n          if (message.denom != null && message.hasOwnProperty(\"denom\"))\n            object.denom = message.denom;\n          if (message.amount != null && message.hasOwnProperty(\"amount\"))\n            object.amount = message.amount;\n          return object;\n        };\n\n        /**\n         * Converts this DecCoin to JSON.\n         * @function toJSON\n         * @memberof cosmos.base.v1beta1.DecCoin\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DecCoin.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DecCoin;\n      })();\n\n      v1beta1.IntProto = (() => {\n        /**\n         * Properties of an IntProto.\n         * @memberof cosmos.base.v1beta1\n         * @interface IIntProto\n         * @property {string|null} [int] IntProto int\n         */\n\n        /**\n         * Constructs a new IntProto.\n         * @memberof cosmos.base.v1beta1\n         * @classdesc Represents an IntProto.\n         * @implements IIntProto\n         * @constructor\n         * @param {cosmos.base.v1beta1.IIntProto=} [properties] Properties to set\n         */\n        function IntProto(properties) {\n          if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n              if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * IntProto int.\n         * @member {string} int\n         * @memberof cosmos.base.v1beta1.IntProto\n         * @instance\n         */\n        IntProto.prototype.int = \"\";\n\n        /**\n         * Creates a new IntProto instance using the specified properties.\n         * @function create\n         * @memberof cosmos.base.v1beta1.IntProto\n         * @static\n         * @param {cosmos.base.v1beta1.IIntProto=} [properties] Properties to set\n         * @returns {cosmos.base.v1beta1.IntProto} IntProto instance\n         */\n        IntProto.create = function create(properties) {\n          return new IntProto(properties);\n        };\n\n        /**\n         * Encodes the specified IntProto message. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.\n         * @function encode\n         * @memberof cosmos.base.v1beta1.IntProto\n         * @static\n         * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        IntProto.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.int != null && Object.hasOwnProperty.call(message, \"int\"))\n            writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.int);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified IntProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof cosmos.base.v1beta1.IntProto\n         * @static\n         * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        IntProto.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an IntProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof cosmos.base.v1beta1.IntProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {cosmos.base.v1beta1.IntProto} IntProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        IntProto.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          const end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.cosmos.base.v1beta1.IntProto();\n          while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                message.int = reader.string();\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes an IntProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof cosmos.base.v1beta1.IntProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {cosmos.base.v1beta1.IntProto} IntProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        IntProto.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an IntProto message.\n         * @function verify\n         * @memberof cosmos.base.v1beta1.IntProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        IntProto.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          if (message.int != null && message.hasOwnProperty(\"int\"))\n            if (!$util.isString(message.int)) return \"int: string expected\";\n          return null;\n        };\n\n        /**\n         * Creates an IntProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof cosmos.base.v1beta1.IntProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {cosmos.base.v1beta1.IntProto} IntProto\n         */\n        IntProto.fromObject = function fromObject(object) {\n          if (object instanceof $root.cosmos.base.v1beta1.IntProto) return object;\n          const message = new $root.cosmos.base.v1beta1.IntProto();\n          if (object.int != null) message.int = String(object.int);\n          return message;\n        };\n\n        /**\n         * Creates a plain object from an IntProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof cosmos.base.v1beta1.IntProto\n         * @static\n         * @param {cosmos.base.v1beta1.IntProto} message IntProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        IntProto.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          const object = {};\n          if (options.defaults) object.int = \"\";\n          if (message.int != null && message.hasOwnProperty(\"int\")) object.int = message.int;\n          return object;\n        };\n\n        /**\n         * Converts this IntProto to JSON.\n         * @function toJSON\n         * @memberof cosmos.base.v1beta1.IntProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        IntProto.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return IntProto;\n      })();\n\n      v1beta1.DecProto = (() => {\n        /**\n         * Properties of a DecProto.\n         * @memberof cosmos.base.v1beta1\n         * @interface IDecProto\n         * @property {string|null} [dec] DecProto dec\n         */\n\n        /**\n         * Constructs a new DecProto.\n         * @memberof cosmos.base.v1beta1\n         * @classdesc Represents a DecProto.\n         * @implements IDecProto\n         * @constructor\n         * @param {cosmos.base.v1beta1.IDecProto=} [properties] Properties to set\n         */\n        function DecProto(properties) {\n          if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n              if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DecProto dec.\n         * @member {string} dec\n         * @memberof cosmos.base.v1beta1.DecProto\n         * @instance\n         */\n        DecProto.prototype.dec = \"\";\n\n        /**\n         * Creates a new DecProto instance using the specified properties.\n         * @function create\n         * @memberof cosmos.base.v1beta1.DecProto\n         * @static\n         * @param {cosmos.base.v1beta1.IDecProto=} [properties] Properties to set\n         * @returns {cosmos.base.v1beta1.DecProto} DecProto instance\n         */\n        DecProto.create = function create(properties) {\n          return new DecProto(properties);\n        };\n\n        /**\n         * Encodes the specified DecProto message. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.\n         * @function encode\n         * @memberof cosmos.base.v1beta1.DecProto\n         * @static\n         * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecProto.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.dec != null && Object.hasOwnProperty.call(message, \"dec\"))\n            writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.dec);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified DecProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof cosmos.base.v1beta1.DecProto\n         * @static\n         * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecProto.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DecProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof cosmos.base.v1beta1.DecProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {cosmos.base.v1beta1.DecProto} DecProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecProto.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          const end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.cosmos.base.v1beta1.DecProto();\n          while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                message.dec = reader.string();\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a DecProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof cosmos.base.v1beta1.DecProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {cosmos.base.v1beta1.DecProto} DecProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecProto.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DecProto message.\n         * @function verify\n         * @memberof cosmos.base.v1beta1.DecProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DecProto.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          if (message.dec != null && message.hasOwnProperty(\"dec\"))\n            if (!$util.isString(message.dec)) return \"dec: string expected\";\n          return null;\n        };\n\n        /**\n         * Creates a DecProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof cosmos.base.v1beta1.DecProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {cosmos.base.v1beta1.DecProto} DecProto\n         */\n        DecProto.fromObject = function fromObject(object) {\n          if (object instanceof $root.cosmos.base.v1beta1.DecProto) return object;\n          const message = new $root.cosmos.base.v1beta1.DecProto();\n          if (object.dec != null) message.dec = String(object.dec);\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a DecProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof cosmos.base.v1beta1.DecProto\n         * @static\n         * @param {cosmos.base.v1beta1.DecProto} message DecProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DecProto.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          const object = {};\n          if (options.defaults) object.dec = \"\";\n          if (message.dec != null && message.hasOwnProperty(\"dec\")) object.dec = message.dec;\n          return object;\n        };\n\n        /**\n         * Converts this DecProto to JSON.\n         * @function toJSON\n         * @memberof cosmos.base.v1beta1.DecProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DecProto.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DecProto;\n      })();\n\n      return v1beta1;\n    })();\n\n    return base;\n  })();\n\n  return cosmos;\n})();\n\nexport default $root;\n"],"names":["aspromise","asPromise","u","i","o","Array","arguments","length","t","n","e","Promise","c","f","s","d","a","apply","l","charAt","Math","ceil","encode","h","y","p","push","String","fromCharCode","slice","join","decode","charCodeAt","Error","test","eventemitter","EventEmitter","this","_listeners","prototype","on","fn","ctx","off","splice","emit","float","factory","Float32Array","Uint8Array","buffer","r","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","isNaN","round","floor","log","LN2","pow","NaN","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","inquire_1","inquire","moduleName","mod","eval","replace","Object","keys","read","write","pool_1","pool","call","longbits","requireMinimal","lo","hi","zero","toNumber","zzEncode","zzDecode","zeroHash","fromNumber","from","isString","Long","parseInt","fromString","low","high","toLong","unsigned","fromHash","toHash","defineProperty","get","captureStackTrace","value","stack","create","constructor","writable","enumerable","configurable","name","set","toString","message","base64","base64$1","utf8","utf8$2","LongBits","requireLongbits","isNode","commonjsGlobal","process","versions","node","global","window","self","emptyArray","freeze","emptyObject","isInteger","Number","isFinite","isObject","isset","isSet","hasOwnProperty","isArray","Buffer","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","merge","lcFirst","toLowerCase","substring","newError","ProtocolError","oneOfGetter","oneOfSetter","toJSONOptions","longs","enums","bytes","json","_configure","allocUnsafe","writer","Writer$1","util$4","BufferWriter$1","LongBits$1","utf8$1","Op","len","next","val","noop","State","head","tail","states","create$1","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","alloc","subarray","_push","uint32","int32","sint32","uint64","int64","sint64","bool","fixed32","sfixed32","fixed64","sfixed64","double","writeBytes","string","fork","reset","ldelim","finish","writer_buffer","BufferWriter","Writer","util$3","writeStringBuffer","writeBytesBuffer","copy","byteLength","reader","Reader$1","util$2","BufferReader$1","indexOutOfRange","RangeError","pos","buf","create_array","isBuffer","readLongVarint","readFixed32_end","readFixed64","_slice","skip","skipType","reader_buffer","BufferReader","Reader","util$1","utf8Slice","min","service","Service","util","TypeError","rpcImpl","requestDelimited","responseDelimited","rpcCall","end","setTimeout","roots","build","rpc","configure","minimal","indexMinimal","$Reader","$protobuf","$Writer","$util","$root","default","common","Asset","chain","symbol","ticker","synth","encodeDelimited","decodeDelimited","verify","fromObject","toObject","defaults","toJSON","Coin","asset","amount","decimals","fromValue","PubKeySet","secp256k1","ed25519","Tx","coins","gas","id","fromAddress","toAddress","memo","arrays","Fee","poolDeduct","ProtoUint","types","MsgDeposit","signer","MsgSend","cosmos","base","v1beta1","denom","DecCoin","IntProto","int","DecProto","dec"],"sourceRoot":""}