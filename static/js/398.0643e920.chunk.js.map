{"version":3,"file":"static/js/398.0643e920.chunk.js","mappings":"kQA+BOA,eAAeC,EAAiBC,GACtC,MAAMC,QAAaC,EAAAA,EAAAA,IAAeF,GAElC,OAAO,IAAIG,EAAAA,WAAWC,QAAQH,EAAKI,MAAM,EAAG,IAC7C,CAOA,SAASC,EAAgBC,GACxB,OAAOA,EAAQC,WAAW,iBAAsC,KAAnBD,EAAQE,MACtD,CAEA,SAASC,GAAS,IACjBC,EAAG,OACHC,EAAM,QACNC,IAMA,OAAOf,gBAAwB,WAAEgB,EAAU,KAAEC,EAAI,UAAEC,IAClD,IAAKF,EAAWP,QAAS,MAAM,IAAIU,MAAM,oCAEzC,MAAMC,QAA6BP,EAAIQ,IAAIC,0BAQrCC,SAPgBC,EAAAA,GAAyBC,IAAI,CAClDC,UAAWX,EAAQW,UACnBC,eAAgBP,EAAqBQ,cACrCC,YAAaZ,EACba,gBAAiBhB,EAAOiB,eAIvBC,iBAAiB,CACjBC,UAAWf,EACXgB,gBAAiBlB,EAAWP,QAC5B0B,OAAQnB,EAAWoB,aAAa,YAEhCC,gBAEIC,EAAkBxB,EAAOyB,gBAAgBhB,EAAoBiB,gBAE7DC,EAAuBlB,EAAoBmB,iBAAiBJ,GAE5DK,EAA0BF,EAAqBG,cAAcC,GAEnE,UACOhC,EAAIQ,IAAIyB,kBAAkB,CAC/BC,0BAA2BN,EAAqBO,SAElD,CAAE,MAAOC,GACR,MAAM,IAAI9B,MAAM,iCAAiC8B,IAClD,CAEA,OAAON,CACR,CACD,CAEA,SAASO,GAAW,IAAErC,EAAKJ,QAAS0C,IACnC,OAAOnD,eAA0BS,EAAU0C,GAkB1C,aAjB0BtC,EAAIQ,IAAI+B,sCAAsC,CACvEC,gBAAiB5C,KAGW6C,2BAA2BC,KAAKC,IAC5D,MAAMC,EAAsB,IAAIC,EAAAA,GAAW,CAC1CC,MAAOH,EAAQrB,OACfyB,MAAOC,EAAAA,GAAMC,MACbC,QAAS,EACTC,OAAQR,EAAQS,4BAKjB,OAFAR,EAAoBhD,QAAU+C,EAAQS,0BAE/BR,CAAmB,GAI5B,CACD,CAoBOzD,eAAekE,EACrBC,EAAsBC,EAAAA,GAAON,MAC7B/C,EAAwB,CACvBW,UAAW2C,EAAAA,UAAUC,QACrBC,YAAa,UACbC,cAAe,mCAGhB,aAAaC,EAAAA,IAAcC,WAAW,CACrCC,SAAUR,EACVS,mBAAoB7D,EAAQwD,YAC5BM,aAEF,CAEO,MAAMC,EAAe9E,OAC3Ba,MACAE,UAAU,CACTW,UAAW2C,EAAAA,UAAUC,QACrBC,YAAa,UACbC,cAAe,kCAEhB1D,aAMA,MAAML,QA5HP,SAAoBK,EAAqBC,GACxC,OAAOgE,EAAAA,GAAsBC,OAAOC,sBAAsBnE,EAAOiB,YAAahB,EAAQW,UACvF,CA0HuBwD,CAAWpE,EAAQC,GAEzC,MAAO,CACNF,MACAZ,mBACAO,kBACA0E,WAAYA,IAAMzE,EAClBG,SAAUA,EAAS,CAAEC,MAAKC,SAAQC,YAClCoE,YArDM,SAAqBC,GAC3B,MAAM,IAAIC,EAAAA,GAAa,kBAAmB,CAAEC,OAAQ,cAAeC,QAAS,SAI7E,EAiDCC,kBA7CM,SAA2BC,GACjC,MAAM,IAAIJ,EAAAA,GAAa,kBAAmB,CAAEC,OAAQ,oBAAqBC,QAAS,SAInF,EAyCCrC,WAAYA,EAAW,CAAEzC,UAASI,QAClC,EAGW6E,EAAe,CAC3BhE,UAAW2C,EAAAA,UAAUC,QACrBC,YAAa,UACbC,cAAe,iC","sources":["components/wallets/secureKeystore/legacyRadix.ts"],"sourcesContent":["import { CoreApiClient } from \"@radixdlt/babylon-core-api-sdk\";\n\nimport {\n\tLTSRadixEngineToolkit,\n\tNetworkId,\n\tPrivateKey,\n\ttype PublicKey,\n\ttype Signature,\n\ttype SignatureWithPublicKey,\n\tSimpleTransactionBuilder,\n} from \"@radixdlt/radix-engine-toolkit\";\nimport { mnemonicToSeed } from \"@scure/bip39\";\nimport { AssetValue, Chain, RPCUrl, SwapKitError } from \"@swapkit/helpers\";\n\nexport type RadixNetwork = typeof RadixMainnet;\n// TODO combine this type with the more general SK type\ntype SubstrateTransferParams = {\n\trecipient: string;\n\tassetValue: AssetValue;\n\tfrom: string;\n};\n\nexport type RadixSigner = {\n\tpublicKey(): PublicKey;\n\tpublicKeyBytes(): Uint8Array;\n\tpublicKeyHex(): string;\n\tsign(messageHash: Uint8Array): Uint8Array;\n\tsignToSignature(messageHash: Uint8Array): Signature;\n\tsignToSignatureWithPublicKey(messageHash: Uint8Array): SignatureWithPublicKey;\n};\n\nexport async function createPrivateKey(phrase: string) {\n\tconst seed = await mnemonicToSeed(phrase);\n\n\treturn new PrivateKey.Ed25519(seed.slice(0, 32));\n}\n\nfunction getAddress(signer: RadixSigner, network: RadixNetwork) {\n\treturn LTSRadixEngineToolkit.Derive.virtualAccountAddress(signer.publicKey(), network.networkId);\n}\n\n// Could not find anything sync in SDK, ask Radix team\nfunction validateAddress(address: string) {\n\treturn address.startsWith(\"account_rdx1\") && address.length === 66;\n}\n\nfunction transfer({\n\tapi,\n\tsigner,\n\tnetwork,\n}: {\n\tapi: CoreApiClient;\n\tsigner: RadixSigner;\n\tnetwork: RadixNetwork;\n}) {\n\treturn async function transfer({ assetValue, from, recipient }: SubstrateTransferParams) {\n\t\tif (!assetValue.address) throw new Error(\"Asset value must have an address\");\n\n\t\tconst constructionMetadata = await api.LTS.getConstructionMetadata();\n\t\tconst builder = await SimpleTransactionBuilder.new({\n\t\t\tnetworkId: network.networkId,\n\t\t\tvalidFromEpoch: constructionMetadata.current_epoch,\n\t\t\tfromAccount: from,\n\t\t\tsignerPublicKey: signer.publicKey(),\n\t\t});\n\n\t\tconst unsignedTransaction = builder\n\t\t\t.transferFungible({\n\t\t\t\ttoAccount: recipient,\n\t\t\t\tresourceAddress: assetValue.address,\n\t\t\t\tamount: assetValue.getBaseValue(\"number\"),\n\t\t\t})\n\t\t\t.compileIntent();\n\n\t\tconst notarySignature = signer.signToSignature(unsignedTransaction.hashToNotarize);\n\n\t\tconst notarizedTransaction = unsignedTransaction.compileNotarized(notarySignature);\n\n\t\tconst intentHashTransactionId = notarizedTransaction.transactionId.id;\n\n\t\ttry {\n\t\t\tawait api.LTS.submitTransaction({\n\t\t\t\tnotarized_transaction_hex: notarizedTransaction.toHex(),\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthrow new Error(`Failed to submit transaction: ${error}`);\n\t\t}\n\n\t\treturn intentHashTransactionId;\n\t};\n}\n\nfunction getBalance({ api, address: walletAddress }: { api: CoreApiClient; address: string }) {\n\treturn async function getBalance(address = walletAddress) {\n\t\tconst balancesRaw = await api.LTS.getAccountAllFungibleResourceBalances({\n\t\t\taccount_address: address,\n\t\t});\n\n\t\tconst balances = balancesRaw.fungible_resource_balances.map((balance) => {\n\t\t\tconst assetWithoutAddress = new AssetValue({\n\t\t\t\tvalue: balance.amount,\n\t\t\t\tchain: Chain.Radix,\n\t\t\t\tdecimal: 8,\n\t\t\t\tsymbol: balance.fungible_resource_address,\n\t\t\t});\n\n\t\t\tassetWithoutAddress.address = balance.fungible_resource_address;\n\n\t\t\treturn assetWithoutAddress;\n\t\t});\n\n\t\treturn balances;\n\t};\n}\n\nfunction signMessage(_signer: RadixSigner) {\n\treturn function signMessage(_message: string) {\n\t\tthrow new SwapKitError(\"not_implemented\", { method: \"signMessage\", toolbox: \"radix\" });\n\n\t\t// TODO: convert message to Uint8Array\n\t\t// return signer.signToSignatureWithPublicKey(message);\n\t};\n}\n\nfunction validateSignature(_signer: RadixSigner) {\n\treturn function validateSignature(_signature: SignatureWithPublicKey) {\n\t\tthrow new SwapKitError(\"not_implemented\", { method: \"validateSignature\", toolbox: \"radix\" });\n\n\t\t// TODO: validate signature\n\t\t// return\n\t};\n}\n\nexport async function getRadixCoreApiClient(\n\tcoreApiBase: string = RPCUrl.Radix,\n\tnetwork: RadixNetwork = {\n\t\tnetworkId: NetworkId.Mainnet,\n\t\tnetworkName: \"mainnet\",\n\t\tdashboardBase: \"https://dashboard.radixdlt.com\",\n\t},\n) {\n\treturn await CoreApiClient.initialize({\n\t\tbasePath: coreApiBase,\n\t\tlogicalNetworkName: network.networkName,\n\t\tfetch,\n\t});\n}\n\nexport const RadixToolbox = async ({\n\tapi,\n\tnetwork = {\n\t\tnetworkId: NetworkId.Mainnet,\n\t\tnetworkName: \"mainnet\",\n\t\tdashboardBase: \"https://dashboard.radixdlt.com\",\n\t},\n\tsigner,\n}: {\n\tapi: CoreApiClient;\n\tnetwork?: RadixNetwork;\n\tsigner: RadixSigner;\n}) => {\n\tconst address = await getAddress(signer, network);\n\n\treturn {\n\t\tapi,\n\t\tcreatePrivateKey,\n\t\tvalidateAddress,\n\t\tgetAddress: () => address,\n\t\ttransfer: transfer({ api, signer, network }),\n\t\tsignMessage: signMessage(signer),\n\t\tvalidateSignature: validateSignature(signer),\n\t\tgetBalance: getBalance({ address, api }),\n\t};\n};\n\nexport const RadixMainnet = {\n\tnetworkId: NetworkId.Mainnet,\n\tnetworkName: \"mainnet\",\n\tdashboardBase: \"https://dashboard.radixdlt.com\",\n};\n\nexport type RadixWallet = ReturnType<typeof RadixToolbox>;"],"names":["async","createPrivateKey","phrase","seed","mnemonicToSeed","PrivateKey","Ed25519","slice","validateAddress","address","startsWith","length","transfer","api","signer","network","assetValue","from","recipient","Error","constructionMetadata","LTS","getConstructionMetadata","unsignedTransaction","SimpleTransactionBuilder","new","networkId","validFromEpoch","current_epoch","fromAccount","signerPublicKey","publicKey","transferFungible","toAccount","resourceAddress","amount","getBaseValue","compileIntent","notarySignature","signToSignature","hashToNotarize","notarizedTransaction","compileNotarized","intentHashTransactionId","transactionId","id","submitTransaction","notarized_transaction_hex","toHex","error","getBalance","walletAddress","getAccountAllFungibleResourceBalances","account_address","fungible_resource_balances","map","balance","assetWithoutAddress","AssetValue","value","chain","Chain","Radix","decimal","symbol","fungible_resource_address","getRadixCoreApiClient","coreApiBase","RPCUrl","NetworkId","Mainnet","networkName","dashboardBase","CoreApiClient","initialize","basePath","logicalNetworkName","fetch","RadixToolbox","LTSRadixEngineToolkit","Derive","virtualAccountAddress","getAddress","signMessage","_message","SwapKitError","method","toolbox","validateSignature","_signature","RadixMainnet"],"sourceRoot":""}