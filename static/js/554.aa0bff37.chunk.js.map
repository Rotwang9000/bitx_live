{"version":3,"file":"static/js/554.aa0bff37.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../../src/error.ts","../../src/utils.ts","../../src/struct.ts","../../src/structs/utilities.ts","../../src/structs/types.ts","../../src/structs/coercions.ts","../node_modules/rpc-websockets/src/lib/client/websocket.browser.ts","../node_modules/rpc-websockets/src/lib/client.ts","../node_modules/rpc-websockets/src/lib/utils.ts","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/utils/guarded-array-utils.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/timing.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solana/web3.js/src/index.ts","../node_modules/@solana/spl-token/src/constants.ts","../node_modules/@solana/buffer-layout-utils/src/base.ts","../node_modules/@solana/buffer-layout-utils/src/bigint.ts","../node_modules/@solana/buffer-layout-utils/src/decimal.ts","../node_modules/@solana/buffer-layout-utils/src/native.ts","../node_modules/@solana/buffer-layout-utils/src/web3.ts","../node_modules/@solana/spl-token/src/errors.ts","../node_modules/@solana/spl-token/src/extensions/accountType.ts","../node_modules/@solana/spl-token/src/state/multisig.ts","../node_modules/@solana/spl-token/src/state/account.ts","../node_modules/@solana/spl-token/src/state/mint.ts","../node_modules/@solana/spl-token/src/instructions/types.ts","../node_modules/@solana/spl-token/src/instructions/transferChecked.ts","../node_modules/@solana/spl-token/src/instructions/internal.ts","../node_modules/@solana/spl-token/src/instructions/associatedTokenAccount.ts","../node_modules/@swapkit/toolbox-solana/node_modules/@swapkit/helpers/dist/index.js","../node_modules/@swapkit/toolbox-solana/dist/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;",null,null,null,null,null,null,"/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\n\"use strict\"\n\nimport { EventEmitter } from \"eventemitter3\"\n\nimport {\n    BrowserWebSocketType,\n    NodeWebSocketType,\n    IWSClientAdditionalOptions,\n} from \"./client.types.js\"\n\nclass WebSocketBrowserImpl extends EventEmitter\n{\n    socket: BrowserWebSocketType\n\n    /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n    constructor(address: string, options: {}, protocols?: string | string[])\n    {\n        super()\n\n        this.socket = new window.WebSocket(address, protocols)\n\n        this.socket.onopen = () => this.emit(\"open\")\n        this.socket.onmessage = (event) => this.emit(\"message\", event.data)\n        this.socket.onerror = (error) => this.emit(\"error\", error)\n        this.socket.onclose = (event) =>\n        {\n            this.emit(\"close\", event.code, event.reason)\n        }\n    }\n\n    /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n    send(\n        data: Parameters<BrowserWebSocketType[\"send\"]>[0],\n        optionsOrCallback: (\n      error?: Error\n    ) => void | Parameters<NodeWebSocketType[\"send\"]>[1],\n        callback?: () => void\n    )\n    {\n        const cb = callback || optionsOrCallback\n\n        try\n        {\n            this.socket.send(data)\n            cb()\n        }\n        catch (error)\n        {\n            cb(error)\n        }\n    }\n\n    /**\n   * Closes an underlying socket\n   * @method\n   * @param {Number} code - status code explaining why the connection is being closed\n   * @param {String} reason - a description why the connection is closing\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    close(code?: number, reason?: string)\n    {\n        this.socket.close(code, reason)\n    }\n\n    addEventListener<K extends keyof WebSocketEventMap>(\n        type: K,\n        listener: (ev: WebSocketEventMap[K]) => any,\n        options?: boolean | AddEventListenerOptions\n    ): void\n    {\n        this.socket.addEventListener(type, listener, options)\n    }\n}\n\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\nexport function WebSocket(\n    address: string,\n    options: IWSClientAdditionalOptions\n)\n{\n    return new WebSocketBrowserImpl(address, options)\n}\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\n\"use strict\"\n\nimport NodeWebSocket from \"ws\"\nimport { EventEmitter } from \"eventemitter3\"\nimport {\n    ICommonWebSocket,\n    IWSClientAdditionalOptions,\n    NodeWebSocketType,\n    ICommonWebSocketFactory,\n} from \"./client/client.types.js\"\n\nimport { DataPack, DefaultDataPack } from \"./utils.js\"\n\ninterface IQueueElement {\n  promise: [\n    Parameters<ConstructorParameters<typeof Promise>[0]>[0],\n    Parameters<ConstructorParameters<typeof Promise>[0]>[1]\n  ];\n  timeout?: ReturnType<typeof setTimeout>;\n}\n\nexport interface IQueue {\n  [x: number]: IQueueElement;\n}\n\nexport interface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\nexport class CommonClient extends EventEmitter\n{\n    private address: string\n    private rpc_id: number\n    private queue: IQueue\n    private options: IWSClientAdditionalOptions & NodeWebSocket.ClientOptions\n    private autoconnect: boolean\n    private ready: boolean\n    private reconnect: boolean\n    private reconnect_timer_id: NodeJS.Timeout\n    private reconnect_interval: number\n    private max_reconnects: number\n    private rest_options: IWSClientAdditionalOptions &\n    NodeWebSocket.ClientOptions\n    private current_reconnects: number\n    private generate_request_id: (\n    method: string,\n    params: object | Array<any>\n  ) => number\n    private socket: ICommonWebSocket\n    private webSocketFactory: ICommonWebSocketFactory\n    private dataPack: DataPack<object, string>\n\n    /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @param {DataPack} dataPack - data pack contains encoder and decoder\n   * @return {CommonClient}\n   */\n    constructor(\n        webSocketFactory: ICommonWebSocketFactory,\n        address = \"ws://localhost:8080\",\n        {\n            autoconnect = true,\n            reconnect = true,\n            reconnect_interval = 1000,\n            max_reconnects = 5,\n            ...rest_options\n        } = {},\n        generate_request_id?: (\n      method: string,\n      params: object | Array<any>\n    ) => number,\n        dataPack?: DataPack<object, string>\n    )\n    {\n        super()\n\n        this.webSocketFactory = webSocketFactory\n\n        this.queue = {}\n        this.rpc_id = 0\n\n        this.address = address\n        this.autoconnect = autoconnect\n        this.ready = false\n        this.reconnect = reconnect\n        this.reconnect_timer_id = undefined\n        this.reconnect_interval = reconnect_interval\n        this.max_reconnects = max_reconnects\n        this.rest_options = rest_options\n        this.current_reconnects = 0\n        this.generate_request_id = generate_request_id || (() => ++this.rpc_id)\n\n        if (!dataPack) this.dataPack = new DefaultDataPack()\n        else this.dataPack = dataPack\n\n        if (this.autoconnect)\n            this._connect(this.address, {\n                autoconnect: this.autoconnect,\n                reconnect: this.reconnect,\n                reconnect_interval: this.reconnect_interval,\n                max_reconnects: this.max_reconnects,\n                ...this.rest_options,\n            })\n    }\n\n    /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n    connect()\n    {\n        if (this.socket) return\n\n        this._connect(this.address, {\n            autoconnect: this.autoconnect,\n            reconnect: this.reconnect,\n            reconnect_interval: this.reconnect_interval,\n            max_reconnects: this.max_reconnects,\n            ...this.rest_options,\n        })\n    }\n\n    /**\n   * Calls a registered RPC method on server.\n   * @method\n   * @param {String} method - RPC method name\n   * @param {Object|Array} params - optional method parameters\n   * @param {Number} timeout - RPC reply timeout value\n   * @param {Object} ws_opts - options passed to ws\n   * @return {Promise}\n   */\n    call(\n        method: string,\n        params?: IWSRequestParams,\n        timeout?: number,\n        ws_opts?: Parameters<NodeWebSocketType[\"send\"]>[1]\n    )\n    {\n        if (!ws_opts && \"object\" === typeof timeout)\n        {\n            ws_opts = timeout\n            timeout = null\n        }\n\n        return new Promise((resolve, reject) =>\n        {\n            if (!this.ready) return reject(new Error(\"socket not ready\"))\n\n            const rpc_id = this.generate_request_id(method, params)\n\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params: params || undefined,\n                id: rpc_id,\n            }\n\n            this.socket.send(this.dataPack.encode(message), ws_opts, (error) =>\n            {\n                if (error) return reject(error)\n\n                this.queue[rpc_id] = { promise: [resolve, reject] }\n\n                if (timeout)\n                {\n                    this.queue[rpc_id].timeout = setTimeout(() =>\n                    {\n                        delete this.queue[rpc_id]\n                        reject(new Error(\"reply timeout\"))\n                    }, timeout)\n                }\n            })\n        })\n    }\n\n    /**\n   * Logins with the other side of the connection.\n   * @method\n   * @param {Object} params - Login credentials object\n   * @return {Promise}\n   */\n    async login(params: IWSRequestParams)\n    {\n        const resp = await this.call(\"rpc.login\", params)\n\n        if (!resp) throw new Error(\"authentication failed\")\n\n        return resp\n    }\n\n    /**\n   * Fetches a list of client's methods registered on server.\n   * @method\n   * @return {Array}\n   */\n    async listMethods()\n    {\n        return await this.call(\"__listMethods\")\n    }\n\n    /**\n   * Sends a JSON-RPC 2.0 notification to server.\n   * @method\n   * @param {String} method - RPC method name\n   * @param {Object} params - optional method parameters\n   * @return {Promise}\n   */\n    notify(method: string, params?: IWSRequestParams)\n    {\n        return new Promise<void>((resolve, reject) =>\n        {\n            if (!this.ready) return reject(new Error(\"socket not ready\"))\n\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params,\n            }\n\n            this.socket.send(this.dataPack.encode(message), (error) =>\n            {\n                if (error) return reject(error)\n\n                resolve()\n            })\n        })\n    }\n\n    /**\n   * Subscribes for a defined event.\n   * @method\n   * @param {String|Array} event - event name\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    async subscribe(event: string | Array<string>)\n    {\n        if (typeof event === \"string\") event = [event]\n\n        const result = await this.call(\"rpc.on\", event)\n\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\n                \"Failed subscribing to an event '\" + event + \"' with: \" + result[event]\n            )\n\n        return result\n    }\n\n    /**\n   * Unsubscribes from a defined event.\n   * @method\n   * @param {String|Array} event - event name\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    async unsubscribe(event: string | Array<string>)\n    {\n        if (typeof event === \"string\") event = [event]\n\n        const result = await this.call(\"rpc.off\", event)\n\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\"Failed unsubscribing from an event with: \" + result)\n\n        return result\n    }\n\n    /**\n   * Closes a WebSocket connection gracefully.\n   * @method\n   * @param {Number} code - socket close code\n   * @param {String} data - optional data to be sent before closing\n   * @return {Undefined}\n   */\n    close(code?: number, data?: string)\n    {\n        this.socket.close(code || 1000, data)\n    }\n\n    /**\n   * Enable / disable automatic reconnection.\n   * @method\n   * @param {Boolean} reconnect - enable / disable reconnection\n   * @return {Undefined}\n   */\n    setAutoReconnect(reconnect: boolean)\n    {\n        this.reconnect = reconnect\n    }\n\n    /**\n   * Set the interval between reconnection attempts.\n   * @method\n   * @param {Number} interval - reconnection interval in milliseconds\n   * @return {Undefined}\n   */\n    setReconnectInterval(interval: number)\n    {\n        this.reconnect_interval = interval\n    }\n\n    /**\n   * Set the maximum number of reconnection attempts.\n   * @method\n   * @param {Number} max_reconnects - maximum reconnection attempts\n   * @return {Undefined}\n   */\n    setMaxReconnects(max_reconnects: number)\n    {\n        this.max_reconnects = max_reconnects\n    }\n\n    /**\n   * Connection/Message handler.\n   * @method\n   * @private\n   * @param {String} address - WebSocket API address\n   * @param {Object} options - ws options object\n   * @return {Undefined}\n   */\n    private _connect(\n        address: string,\n        options: IWSClientAdditionalOptions & NodeWebSocket.ClientOptions\n    )\n    {\n        clearTimeout(this.reconnect_timer_id)\n        this.socket = this.webSocketFactory(address, options)\n\n        this.socket.addEventListener(\"open\", () =>\n        {\n            this.ready = true\n            this.emit(\"open\")\n            this.current_reconnects = 0\n        })\n\n        this.socket.addEventListener(\"message\", ({ data: message }) =>\n        {\n            if (message instanceof ArrayBuffer)\n                message = Buffer.from(message).toString()\n\n            try\n            {\n                message = this.dataPack.decode(message)\n            }\n            catch (error)\n            {\n                return\n            }\n\n            // check if any listeners are attached and forward event\n            if (message.notification && this.listeners(message.notification).length)\n            {\n                if (!Object.keys(message.params).length)\n                    return this.emit(message.notification)\n\n                const args = [message.notification]\n\n                if (message.params.constructor === Object) args.push(message.params)\n                // using for-loop instead of unshift/spread because performance is better\n                else\n                    for (let i = 0; i < message.params.length; i++)\n                        args.push(message.params[i])\n\n                // run as microtask so that pending queue messages are resolved first\n                // eslint-disable-next-line prefer-spread\n                return Promise.resolve().then(() =>\n                {\n                    // eslint-disable-next-line prefer-spread\n                    this.emit.apply(this, args)\n                })\n            }\n\n            if (!this.queue[message.id])\n            {\n                // general JSON RPC 2.0 events\n                if (message.method)\n                {\n                    // run as microtask so that pending queue messages are resolved first\n                    return Promise.resolve().then(() =>\n                    {\n                        this.emit(message.method, message?.params)\n                    })\n                }\n\n                return\n            }\n\n            // reject early since server's response is invalid\n            if (\"error\" in message === \"result\" in message)\n                this.queue[message.id].promise[1](\n                    new Error(\n                        \"Server response malformed. Response must include either \\\"result\\\"\" +\n              \" or \\\"error\\\", but not both.\"\n                    )\n                )\n\n            if (this.queue[message.id].timeout)\n                clearTimeout(this.queue[message.id].timeout)\n\n            if (message.error) this.queue[message.id].promise[1](message.error)\n            else this.queue[message.id].promise[0](message.result)\n\n            delete this.queue[message.id]\n        })\n\n        this.socket.addEventListener(\"error\", (error) => this.emit(\"error\", error))\n\n        this.socket.addEventListener(\"close\", ({ code, reason }) =>\n        {\n            if (this.ready)\n            // Delay close event until internal state is updated\n                setTimeout(() => this.emit(\"close\", code, reason), 0)\n\n            this.ready = false\n            this.socket = undefined\n\n            if (code === 1000) return\n\n            this.current_reconnects++\n\n            if (\n                this.reconnect &&\n        (this.max_reconnects > this.current_reconnects ||\n          this.max_reconnects === 0)\n            )\n                this.reconnect_timer_id = setTimeout(\n                    () => this._connect(address, options),\n                    this.reconnect_interval\n                )\n        })\n    }\n}\n","\"use strict\"\n\nexport interface DataPack<\n  T,\n  R extends string | ArrayBufferLike | Blob | ArrayBufferView\n> {\n  encode(value: T): R;\n  decode(value: R): T;\n}\n\nexport class DefaultDataPack implements DataPack<Object, string>\n{\n    encode(value: Object): string\n    {\n        return JSON.stringify(value)\n    }\n\n    decode(value: string): Object\n    {\n        return JSON.parse(value)\n    }\n}\n","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from './connection';\nimport {TransactionSignature} from './transaction';\n\nexport class SendTransactionError extends Error {\n  private signature: TransactionSignature;\n  private transactionMessage: string;\n  private transactionLogs: string[] | Promise<string[]> | undefined;\n\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs,\n  }: {\n    action: 'send' | 'simulate';\n    signature: TransactionSignature;\n    transactionMessage: string;\n    logs?: string[];\n  }) {\n    const maybeLogsOutput = logs\n      ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. `\n      : '';\n    const guideText =\n      '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message: string;\n    switch (action) {\n      case 'send':\n        message =\n          `Transaction ${signature} resulted in an error. \\n` +\n          `${transactionMessage}. ` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      case 'simulate':\n        message =\n          `Simulation failed. \\nMessage: ${transactionMessage}. \\n` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      default: {\n        message = `Unknown action '${((a: never) => a)(action)}'`;\n      }\n    }\n    super(message);\n\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n\n  get transactionError(): {message: string; logs?: string[]} {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs)\n        ? this.transactionLogs\n        : undefined,\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs(): string[] | undefined {\n    const cachedLogs = this.transactionLogs;\n    if (\n      cachedLogs != null &&\n      typeof cachedLogs === 'object' &&\n      'then' in cachedLogs\n    ) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n\n  async getLogs(connection: Connection): Promise<string[]> {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection\n          .getTransaction(this.signature)\n          .then(tx => {\n            if (tx && tx.meta && tx.meta.logMessages) {\n              const logs = tx.meta.logMessages;\n              this.transactionLogs = logs;\n              resolve(logs);\n            } else {\n              reject(new Error('Log messages not found'));\n            }\n          })\n          .catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export const Headers: typeof globalThis.Headers = globalThis.Headers;\nexport const Request: typeof globalThis.Request = globalThis.Request;\nexport const Response: typeof globalThis.Response = globalThis.Response;\nexport default globalThis.fetch;\n","import {\n  CommonClient,\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n  WebSocket as createRpc,\n} from 'rpc-websockets';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends CommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket as ReturnType<typeof createRpc>;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<CommonClient['call']>\n  ): ReturnType<CommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<CommonClient['notify']>\n  ): ReturnType<CommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to agave-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n  /** Optional parameter used to include inner instructions in the simulation */\n  innerInstructions?: boolean;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n  innerInstructions?: ParsedInnerInstruction[] | null;\n};\nconst ParsedInstructionStruct = pick({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown(),\n});\n\nconst PartiallyDecodedInstructionStruct = pick({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string(),\n});\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n    innerInstructions: optional(\n      nullable(\n        array(\n          pick({\n            index: number(),\n            instructions: array(\n              union([\n                ParsedInstructionStruct,\n                PartiallyDecodedInstructionStruct,\n              ]),\n            ),\n          }),\n        ),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\nexport type AccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n}>;\n\nexport type ProgramAccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n  /**\n   * Filter results using various filter objects\n   * The resultant account must meet ALL filter criteria to be included in the returned results\n   */\n  filters?: GetProgramAccountsFilter[];\n}>;\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      if (\n        configOrSigners &&\n        typeof configOrSigners === 'object' &&\n        'innerInstructions' in configOrSigners\n      ) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    if (\n      configOrSigners &&\n      typeof configOrSigners === 'object' &&\n      'innerInstructions' in configOrSigners\n    ) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    config?: AccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitmentOrConfig?: Commitment | AccountSubscriptionConfig,\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n      config,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    config?: ProgramAccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitmentOrConfig?: Commitment | ProgramAccountSubscriptionConfig,\n    maybeFilters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      config\n        ? config\n        : maybeFilters\n          ? {filters: maybeFilters}\n          : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, validator logo URL */\n  iconUrl?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","import { PublicKey } from '@solana/web3.js';\n\n/** Address of the SPL Token program */\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n\n/** Address of the SPL Token 2022 program */\nexport const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb');\n\n/** Address of the SPL Associated Token Account program */\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\n/** Address of the special mint for wrapped native SOL in spl-token */\nexport const NATIVE_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\n/** Address of the special mint for wrapped native SOL in spl-token-2022 */\nexport const NATIVE_MINT_2022 = new PublicKey('9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP');\n\n/** Check that the token program provided is not `Tokenkeg...`, useful when using extensions */\nexport function programSupportsExtensions(programId: PublicKey): boolean {\n    if (programId.equals(TOKEN_PROGRAM_ID)) {\n        return false;\n    } else {\n        return true;\n    }\n}\n","import { Layout } from '@solana/buffer-layout';\n\nexport interface EncodeDecode<T> {\n    decode(buffer: Buffer, offset?: number): T;\n    encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nexport const encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n","import { blob, Layout } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base';\n\nexport const bigInt =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntLE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferLE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const bigIntBE =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntBE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferBE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const u64 = bigInt(8);\n\nexport const u64be = bigIntBE(8);\n\nexport const u128 = bigInt(16);\n\nexport const u128be = bigIntBE(16);\n\nexport const u192 = bigInt(24);\n\nexport const u192be = bigIntBE(24);\n\nexport const u256 = bigInt(32);\n\nexport const u256be = bigIntBE(32);\n","import { Layout } from '@solana/buffer-layout';\nimport BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base';\nimport { u128 } from './bigint';\n\nexport const WAD = new BigNumber('1e+18');\n\nexport const decimal = (property?: string): Layout<BigNumber> => {\n    const layout = u128(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const decimalLayout = layout as Layout<unknown> as Layout<BigNumber>;\n\n    decimalLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset).toString();\n        return new BigNumber(src).div(WAD);\n    };\n\n    decimalLayout.encode = (decimal: BigNumber, buffer: Buffer, offset: number) => {\n        const src = BigInt(decimal.times(WAD).integerValue().toString());\n        return encode(src, buffer, offset);\n    };\n\n    return decimalLayout;\n};\n","import { Layout, u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base';\n\nexport const bool = (property?: string): Layout<boolean> => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const boolLayout = layout as Layout<unknown> as Layout<boolean>;\n\n    boolLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n\n    boolLayout.encode = (bool: boolean, buffer: Buffer, offset: number) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n\n    return boolLayout;\n};\n","import { blob, Layout } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base';\n\nexport const publicKey = (property?: string): Layout<PublicKey> => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const publicKeyLayout = layout as Layout<unknown> as Layout<PublicKey>;\n\n    publicKeyLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n\n    publicKeyLayout.encode = (publicKey: PublicKey, buffer: Buffer, offset: number) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n\n    return publicKeyLayout;\n};\n","/** Base class for errors */\nexport abstract class TokenError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    name = 'TokenAccountNotFoundError';\n}\n\n/** Thrown if a program state account is not a valid Account */\nexport class TokenInvalidAccountError extends TokenError {\n    name = 'TokenInvalidAccountError';\n}\n\n/** Thrown if a program state account does not contain valid data */\nexport class TokenInvalidAccountDataError extends TokenError {\n    name = 'TokenInvalidAccountDataError';\n}\n\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    name = 'TokenInvalidAccountOwnerError';\n}\n\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    name = 'TokenInvalidAccountSizeError';\n}\n\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    name = 'TokenInvalidMintError';\n}\n\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    name = 'TokenInvalidOwnerError';\n}\n\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    name = 'TokenOwnerOffCurveError';\n}\n\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    name = 'TokenInvalidInstructionProgramError';\n}\n\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    name = 'TokenInvalidInstructionKeysError';\n}\n\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    name = 'TokenInvalidInstructionDataError';\n}\n\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    name = 'TokenInvalidInstructionTypeError';\n}\n\n/** Thrown if the program does not support the desired instruction */\nexport class TokenUnsupportedInstructionError extends TokenError {\n    name = 'TokenUnsupportedInstructionError';\n}\n\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nexport class TokenTransferHookAccountNotFound extends TokenError {\n    name = 'TokenTransferHookAccountNotFound';\n}\n\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nexport class TokenTransferHookInvalidSeed extends TokenError {\n    name = 'TokenTransferHookInvalidSeed';\n}\n\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\n    name = 'TokenTransferHookAccountDataNotFound';\n}\n","export enum AccountType {\n    Uninitialized,\n    Mint,\n    Account,\n}\nexport const ACCOUNT_TYPE_SIZE = 1;\n","import { struct, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\n\n/** Information about a multisig */\nexport interface Multisig {\n    /** Address of the multisig */\n    address: PublicKey;\n    /** Number of signers required */\n    m: number;\n    /** Number of possible signers, corresponds to the number of `signers` that are valid */\n    n: number;\n    /** Is this mint initialized */\n    isInitialized: boolean;\n    /** Full set of signers, of which `n` are valid */\n    signer1: PublicKey;\n    signer2: PublicKey;\n    signer3: PublicKey;\n    signer4: PublicKey;\n    signer5: PublicKey;\n    signer6: PublicKey;\n    signer7: PublicKey;\n    signer8: PublicKey;\n    signer9: PublicKey;\n    signer10: PublicKey;\n    signer11: PublicKey;\n}\n\n/** Multisig as stored by the program */\nexport type RawMultisig = Omit<Multisig, 'address'>;\n\n/** Buffer layout for de/serializing a multisig */\nexport const MultisigLayout = struct<RawMultisig>([\n    u8('m'),\n    u8('n'),\n    bool('isInitialized'),\n    publicKey('signer1'),\n    publicKey('signer2'),\n    publicKey('signer3'),\n    publicKey('signer4'),\n    publicKey('signer5'),\n    publicKey('signer6'),\n    publicKey('signer7'),\n    publicKey('signer8'),\n    publicKey('signer9'),\n    publicKey('signer10'),\n    publicKey('signer11'),\n]);\n\n/** Byte length of a multisig */\nexport const MULTISIG_SIZE = MultisigLayout.span;\n\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nexport async function getMultisig(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Multisig> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n}\n\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nexport function unpackMultisig(\n    address: PublicKey,\n    info: AccountInfo<Buffer> | null,\n    programId = TOKEN_PROGRAM_ID\n): Multisig {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length != MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const multisig = MultisigLayout.decode(info.data);\n\n    return { address, ...multisig };\n}\n\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMultisig(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n}\n","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidAccountSizeError,\n} from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport type { ExtensionType } from '../extensions/extensionType.js';\nimport { getAccountLen } from '../extensions/extensionType.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n\n/** Information about a token account */\nexport interface Account {\n    /** Address of the account */\n    address: PublicKey;\n    /** Mint associated with the account */\n    mint: PublicKey;\n    /** Owner of the account */\n    owner: PublicKey;\n    /** Number of tokens the account holds */\n    amount: bigint;\n    /** Authority that can transfer tokens from the account */\n    delegate: PublicKey | null;\n    /** Number of tokens the delegate is authorized to transfer */\n    delegatedAmount: bigint;\n    /** True if the account is initialized */\n    isInitialized: boolean;\n    /** True if the account is frozen */\n    isFrozen: boolean;\n    /** True if the account is a native token account */\n    isNative: boolean;\n    /**\n     * If the account is a native token account, it must be rent-exempt. The rent-exempt reserve is the amount that must\n     * remain in the balance until the account is closed.\n     */\n    rentExemptReserve: bigint | null;\n    /** Optional authority to close the account */\n    closeAuthority: PublicKey | null;\n    tlvData: Buffer;\n}\n\n/** Token account state as stored by the program */\nexport enum AccountState {\n    Uninitialized = 0,\n    Initialized = 1,\n    Frozen = 2,\n}\n\n/** Token account as stored by the program */\nexport interface RawAccount {\n    mint: PublicKey;\n    owner: PublicKey;\n    amount: bigint;\n    delegateOption: 1 | 0;\n    delegate: PublicKey;\n    state: AccountState;\n    isNativeOption: 1 | 0;\n    isNative: bigint;\n    delegatedAmount: bigint;\n    closeAuthorityOption: 1 | 0;\n    closeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct<RawAccount>([\n    publicKey('mint'),\n    publicKey('owner'),\n    u64('amount'),\n    u32('delegateOption'),\n    publicKey('delegate'),\n    u8('state'),\n    u32('isNativeOption'),\n    u64('isNative'),\n    u64('delegatedAmount'),\n    u32('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Account> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackAccount(address, info, programId);\n}\n\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getMultipleAccounts(\n    connection: Connection,\n    addresses: PublicKey[],\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Account[]> {\n    const infos = await connection.getMultipleAccountsInfo(addresses, commitment);\n    return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n}\n\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n}\n\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccountWithExtensions(\n    connection: Connection,\n    extensions: ExtensionType[],\n    commitment?: Commitment\n): Promise<number> {\n    const accountLen = getAccountLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n}\n\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\nexport function unpackAccount(\n    address: PublicKey,\n    info: AccountInfo<Buffer> | null,\n    programId = TOKEN_PROGRAM_ID\n): Account {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const rawAccount = AccountLayout.decode(info.data.slice(0, ACCOUNT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > ACCOUNT_SIZE) {\n        if (info.data.length === MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Account) throw new TokenInvalidAccountError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n        tlvData,\n    };\n}\n","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidAccountSizeError,\n    TokenInvalidMintError,\n    TokenOwnerOffCurveError,\n} from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport type { ExtensionType } from '../extensions/extensionType.js';\nimport { getMintLen } from '../extensions/extensionType.js';\nimport { ACCOUNT_SIZE } from './account.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n\n/** Information about a mint */\nexport interface Mint {\n    /** Address of the mint */\n    address: PublicKey;\n    /**\n     * Optional authority used to mint new tokens. The mint authority may only be provided during mint creation.\n     * If no mint authority is present then the mint has a fixed supply and no further tokens may be minted.\n     */\n    mintAuthority: PublicKey | null;\n    /** Total supply of tokens */\n    supply: bigint;\n    /** Number of base 10 digits to the right of the decimal place */\n    decimals: number;\n    /** Is this mint initialized */\n    isInitialized: boolean;\n    /** Optional authority to freeze token accounts */\n    freezeAuthority: PublicKey | null;\n    /** Additional data for extension */\n    tlvData: Buffer;\n}\n\n/** Mint as stored by the program */\nexport interface RawMint {\n    mintAuthorityOption: 1 | 0;\n    mintAuthority: PublicKey;\n    supply: bigint;\n    decimals: number;\n    isInitialized: boolean;\n    freezeAuthorityOption: 1 | 0;\n    freezeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a mint */\nexport const MintLayout = struct<RawMint>([\n    u32('mintAuthorityOption'),\n    publicKey('mintAuthority'),\n    u64('supply'),\n    u8('decimals'),\n    bool('isInitialized'),\n    u32('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n\n/** Byte length of a mint */\nexport const MINT_SIZE = MintLayout.span;\n\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nexport async function getMint(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Mint> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n}\n\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nexport function unpackMint(address: PublicKey, info: AccountInfo<Buffer> | null, programId = TOKEN_PROGRAM_ID): Mint {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < MINT_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const rawMint = MintLayout.decode(info.data.slice(0, MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > MINT_SIZE) {\n        if (info.data.length <= ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data.length === MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Mint) throw new TokenInvalidMintError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\n\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMint(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n}\n\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMintWithExtensions(\n    connection: Connection,\n    extensions: ExtensionType[],\n    commitment?: Commitment\n): Promise<number> {\n    const mintLen = getMintLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n}\n\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nexport async function getAssociatedTokenAddress(\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) throw new TokenOwnerOffCurveError();\n\n    const [address] = await PublicKey.findProgramAddress(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedTokenProgramId\n    );\n\n    return address;\n}\n\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nexport function getAssociatedTokenAddressSync(\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): PublicKey {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) throw new TokenOwnerOffCurveError();\n\n    const [address] = PublicKey.findProgramAddressSync(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedTokenProgramId\n    );\n\n    return address;\n}\n","/** Instructions defined by the program */\nexport enum TokenInstruction {\n    InitializeMint = 0,\n    InitializeAccount = 1,\n    InitializeMultisig = 2,\n    Transfer = 3,\n    Approve = 4,\n    Revoke = 5,\n    SetAuthority = 6,\n    MintTo = 7,\n    Burn = 8,\n    CloseAccount = 9,\n    FreezeAccount = 10,\n    ThawAccount = 11,\n    TransferChecked = 12,\n    ApproveChecked = 13,\n    MintToChecked = 14,\n    BurnChecked = 15,\n    InitializeAccount2 = 16,\n    SyncNative = 17,\n    InitializeAccount3 = 18,\n    InitializeMultisig2 = 19,\n    InitializeMint2 = 20,\n    GetAccountDataSize = 21,\n    InitializeImmutableOwner = 22,\n    AmountToUiAmount = 23,\n    UiAmountToAmount = 24,\n    InitializeMintCloseAuthority = 25,\n    TransferFeeExtension = 26,\n    ConfidentialTransferExtension = 27,\n    DefaultAccountStateExtension = 28,\n    Reallocate = 29,\n    MemoTransferExtension = 30,\n    CreateNativeMint = 31,\n    InitializeNonTransferableMint = 32,\n    InterestBearingMintExtension = 33,\n    CpiGuardExtension = 34,\n    InitializePermanentDelegate = 35,\n    TransferHookExtension = 36,\n    // ConfidentialTransferFeeExtension = 37,\n    // WithdrawalExcessLamports = 38,\n    MetadataPointerExtension = 39,\n    GroupPointerExtension = 40,\n    GroupMemberPointerExtension = 41,\n}\n","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface TransferCheckedInstructionData {\n    instruction: TokenInstruction.TransferChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const transferCheckedInstructionData = struct<TransferCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedInstruction(\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(transferCheckedInstructionData.span);\n    transferCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid TransferChecked instruction */\nexport interface DecodedTransferCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        mint: AccountMeta;\n        destination: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.TransferChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedTransferCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { source, mint, destination, owner, multiSigners },\n        data,\n    } = decodeTransferCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferChecked) throw new TokenInvalidInstructionTypeError();\n    if (!source || !mint || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated TransferChecked instruction */\nexport interface DecodedTransferCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedInstructionUnchecked({\n    programId,\n    keys: [source, mint, destination, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedTransferCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferCheckedInstructionData.decode(data),\n    };\n}\n","import type { AccountMeta, Signer } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\n\n/** @internal */\nexport function addSigners(\n    keys: AccountMeta[],\n    ownerOrAuthority: PublicKey,\n    multiSigners: (Signer | PublicKey)[]\n): AccountMeta[] {\n    if (multiSigners.length) {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });\n        for (const signer of multiSigners) {\n            keys.push({\n                pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n                isSigner: true,\n                isWritable: false,\n            });\n        }\n    } else {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });\n    }\n    return keys;\n}\n","import type { PublicKey } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\n\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.alloc(0),\n        programId,\n        associatedTokenProgramId\n    );\n}\n\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.from([1]),\n        programId,\n        associatedTokenProgramId\n    );\n}\n\nfunction buildAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    instructionData: Buffer,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: instructionData,\n    });\n}\n\n/**\n * Construct a RecoverNested instruction\n *\n * @param nestedAssociatedToken             Nested associated token account (must be owned by `ownerAssociatedToken`)\n * @param nestedMint                        Token mint for the nested associated token account\n * @param destinationAssociatedToken        Wallet's associated token account\n * @param ownerAssociatedToken              Owner associated token account address (must be owned by `owner`)\n * @param ownerMint                         Token mint for the owner associated token account\n * @param owner                             Wallet address for the owner associated token account\n * @param programId                         SPL Token program account\n * @param associatedTokenProgramId          SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRecoverNestedInstruction(\n    nestedAssociatedToken: PublicKey,\n    nestedMint: PublicKey,\n    destinationAssociatedToken: PublicKey,\n    ownerAssociatedToken: PublicKey,\n    ownerMint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: nestedAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: nestedMint, isSigner: false, isWritable: false },\n        { pubkey: destinationAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerMint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: true, isWritable: true },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.from([2]),\n    });\n}\n","var nn=((n)=>typeof require!==\"undefined\"?require:typeof Proxy!==\"undefined\"?new Proxy(n,{get:(e,t)=>(typeof require!==\"undefined\"?require:e)[t]}):n)(function(n){if(typeof require!==\"undefined\")return require.apply(this,arguments);throw Error('Dynamic require of \"'+n+'\" is not supported')});var Oe=[{inputs:[],stateMutability:\"nonpayable\",type:\"constructor\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"owner\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"spender\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"value\",type:\"uint256\"}],name:\"Approval\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"from\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"value\",type:\"uint256\"}],name:\"Transfer\",type:\"event\"},{inputs:[{internalType:\"address\",name:\"\",type:\"address\"},{internalType:\"address\",name:\"\",type:\"address\"}],name:\"allowance\",outputs:[{internalType:\"uint256\",name:\"\",type:\"uint256\"}],stateMutability:\"view\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"spender\",type:\"address\"},{internalType:\"uint256\",name:\"value\",type:\"uint256\"}],name:\"approve\",outputs:[{internalType:\"bool\",name:\"success\",type:\"bool\"}],stateMutability:\"nonpayable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"\",type:\"address\"}],name:\"balanceOf\",outputs:[{internalType:\"uint256\",name:\"\",type:\"uint256\"}],stateMutability:\"view\",type:\"function\"},{inputs:[],name:\"decimals\",outputs:[{internalType:\"uint256\",name:\"\",type:\"uint256\"}],stateMutability:\"view\",type:\"function\"},{inputs:[],name:\"name\",outputs:[{internalType:\"string\",name:\"\",type:\"string\"}],stateMutability:\"view\",type:\"function\"},{inputs:[],name:\"symbol\",outputs:[{internalType:\"string\",name:\"\",type:\"string\"}],stateMutability:\"view\",type:\"function\"},{inputs:[],name:\"totalSupply\",outputs:[{internalType:\"uint256\",name:\"\",type:\"uint256\"}],stateMutability:\"view\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"to\",type:\"address\"},{internalType:\"uint256\",name:\"value\",type:\"uint256\"}],name:\"transfer\",outputs:[{internalType:\"bool\",name:\"success\",type:\"bool\"}],stateMutability:\"nonpayable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"from\",type:\"address\"},{internalType:\"address\",name:\"to\",type:\"address\"},{internalType:\"uint256\",name:\"value\",type:\"uint256\"}],name:\"transferFrom\",outputs:[{internalType:\"bool\",name:\"success\",type:\"bool\"}],stateMutability:\"nonpayable\",type:\"function\"}];var $e=[{inputs:[],stateMutability:\"nonpayable\",type:\"constructor\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"Deposit\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"oldVault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"newVault\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferAllowance\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"vault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferOut\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"vault\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"target\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"address\",name:\"finalAsset\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amountOutMin\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferOutAndCall\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"oldVault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"newVault\",type:\"address\"},{components:[{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],indexed:!1,internalType:\"struct MAYAChain_Router.Coin[]\",name:\"coins\",type:\"tuple[]\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"VaultTransfer\",type:\"event\"},{inputs:[{internalType:\"address payable\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"deposit\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"},{internalType:\"uint256\",name:\"expiration\",type:\"uint256\"}],name:\"depositWithExpiry\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"router\",type:\"address\"},{internalType:\"address payable\",name:\"asgard\",type:\"address\"},{components:[{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],internalType:\"struct MAYAChain_Router.Coin[]\",name:\"coins\",type:\"tuple[]\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"returnVaultAssets\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"router\",type:\"address\"},{internalType:\"address\",name:\"newVault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferAllowance\",outputs:[],stateMutability:\"nonpayable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"to\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferOut\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"target\",type:\"address\"},{internalType:\"address\",name:\"finalToken\",type:\"address\"},{internalType:\"address\",name:\"to\",type:\"address\"},{internalType:\"uint256\",name:\"amountOutMin\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferOutAndCall\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"token\",type:\"address\"}],name:\"vaultAllowance\",outputs:[{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],stateMutability:\"view\",type:\"function\"}],_e=[{inputs:[],stateMutability:\"nonpayable\",type:\"constructor\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"Deposit\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"oldVault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"newVault\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferAllowance\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"vault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferOut\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"vault\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"target\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"address\",name:\"finalAsset\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amountOutMin\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferOutAndCall\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"oldVault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"newVault\",type:\"address\"},{components:[{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],indexed:!1,internalType:\"struct ArbRouter.Coin[]\",name:\"coins\",type:\"tuple[]\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"VaultTransfer\",type:\"event\"},{inputs:[{internalType:\"address payable\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"deposit\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"},{internalType:\"uint256\",name:\"expiration\",type:\"uint256\"}],name:\"depositWithExpiry\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"router\",type:\"address\"},{internalType:\"address payable\",name:\"asgard\",type:\"address\"},{components:[{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],internalType:\"struct ArbRouter.Coin[]\",name:\"coins\",type:\"tuple[]\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"returnVaultAssets\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"router\",type:\"address\"},{internalType:\"address\",name:\"newVault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferAllowance\",outputs:[],stateMutability:\"nonpayable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"to\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferOut\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"target\",type:\"address\"},{internalType:\"address\",name:\"finalToken\",type:\"address\"},{internalType:\"address\",name:\"to\",type:\"address\"},{internalType:\"uint256\",name:\"amountOutMin\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferOutAndCall\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"token\",type:\"address\"}],name:\"vaultAllowance\",outputs:[{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],stateMutability:\"view\",type:\"function\"}];var je=[{inputs:[{internalType:\"address\",name:\"rune\",type:\"address\"}],stateMutability:\"nonpayable\",type:\"constructor\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"Deposit\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"oldVault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"newVault\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferAllowance\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"vault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferOut\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"vault\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"target\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"address\",name:\"finalAsset\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amountOutMin\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferOutAndCall\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"oldVault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"newVault\",type:\"address\"},{components:[{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],indexed:!1,internalType:\"struct THORChain_Router.Coin[]\",name:\"coins\",type:\"tuple[]\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"VaultTransfer\",type:\"event\"},{inputs:[],name:\"RUNE\",outputs:[{internalType:\"address\",name:\"\",type:\"address\"}],stateMutability:\"view\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"deposit\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"},{internalType:\"uint256\",name:\"expiration\",type:\"uint256\"}],name:\"depositWithExpiry\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"router\",type:\"address\"},{internalType:\"address payable\",name:\"asgard\",type:\"address\"},{components:[{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],internalType:\"struct THORChain_Router.Coin[]\",name:\"coins\",type:\"tuple[]\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"returnVaultAssets\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"router\",type:\"address\"},{internalType:\"address\",name:\"newVault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferAllowance\",outputs:[],stateMutability:\"nonpayable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"to\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferOut\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"aggregator\",type:\"address\"},{internalType:\"address\",name:\"finalToken\",type:\"address\"},{internalType:\"address\",name:\"to\",type:\"address\"},{internalType:\"uint256\",name:\"amountOutMin\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferOutAndCall\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"token\",type:\"address\"}],name:\"vaultAllowance\",outputs:[{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],stateMutability:\"view\",type:\"function\"}],Ge=[{inputs:[],stateMutability:\"nonpayable\",type:\"constructor\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"Deposit\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"oldVault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"newVault\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferAllowance\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"vault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferOut\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"vault\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"target\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"address\",name:\"finalAsset\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amountOutMin\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferOutAndCall\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"oldVault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"newVault\",type:\"address\"},{components:[{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],indexed:!1,internalType:\"struct AvaxRouter.Coin[]\",name:\"coins\",type:\"tuple[]\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"VaultTransfer\",type:\"event\"},{inputs:[{internalType:\"address payable\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"deposit\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"},{internalType:\"uint256\",name:\"expiration\",type:\"uint256\"}],name:\"depositWithExpiry\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"router\",type:\"address\"},{internalType:\"address payable\",name:\"asgard\",type:\"address\"},{components:[{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],internalType:\"struct AvaxRouter.Coin[]\",name:\"coins\",type:\"tuple[]\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"returnVaultAssets\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"router\",type:\"address\"},{internalType:\"address\",name:\"newVault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferAllowance\",outputs:[],stateMutability:\"nonpayable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"to\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferOut\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"target\",type:\"address\"},{internalType:\"address\",name:\"finalToken\",type:\"address\"},{internalType:\"address\",name:\"to\",type:\"address\"},{internalType:\"uint256\",name:\"amountOutMin\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferOutAndCall\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"token\",type:\"address\"}],name:\"vaultAllowance\",outputs:[{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],stateMutability:\"view\",type:\"function\"}],ze=[{inputs:[],stateMutability:\"nonpayable\",type:\"constructor\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"Deposit\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"oldVault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"newVault\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferAllowance\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"vault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"asset\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferOut\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"vault\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"target\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{indexed:!1,internalType:\"address\",name:\"finalAsset\",type:\"address\"},{indexed:!1,internalType:\"address\",name:\"to\",type:\"address\"},{indexed:!1,internalType:\"uint256\",name:\"amountOutMin\",type:\"uint256\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"TransferOutAndCall\",type:\"event\"},{anonymous:!1,inputs:[{indexed:!0,internalType:\"address\",name:\"oldVault\",type:\"address\"},{indexed:!0,internalType:\"address\",name:\"newVault\",type:\"address\"},{components:[{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],indexed:!1,internalType:\"struct THORChain_Router.Coin[]\",name:\"coins\",type:\"tuple[]\"},{indexed:!1,internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"VaultTransfer\",type:\"event\"},{inputs:[{internalType:\"address payable\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"},{internalType:\"uint256\",name:\"expiration\",type:\"uint256\"}],name:\"depositWithExpiry\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"router\",type:\"address\"},{internalType:\"address payable\",name:\"asgard\",type:\"address\"},{components:[{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],internalType:\"struct THORChain_Router.Coin[]\",name:\"coins\",type:\"tuple[]\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"returnVaultAssets\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"router\",type:\"address\"},{internalType:\"address\",name:\"newVault\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferAllowance\",outputs:[],stateMutability:\"nonpayable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"to\",type:\"address\"},{internalType:\"address\",name:\"asset\",type:\"address\"},{internalType:\"uint256\",name:\"amount\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferOut\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address payable\",name:\"target\",type:\"address\"},{internalType:\"address\",name:\"finalToken\",type:\"address\"},{internalType:\"address\",name:\"to\",type:\"address\"},{internalType:\"uint256\",name:\"amountOutMin\",type:\"uint256\"},{internalType:\"string\",name:\"memo\",type:\"string\"}],name:\"transferOutAndCall\",outputs:[],stateMutability:\"payable\",type:\"function\"},{inputs:[{internalType:\"address\",name:\"vault\",type:\"address\"},{internalType:\"address\",name:\"token\",type:\"address\"}],name:\"vaultAllowance\",outputs:[{internalType:\"uint256\",name:\"amount\",type:\"uint256\"}],stateMutability:\"view\",type:\"function\"}];var P;((C)=>{C.Arbitrum=\"https://arb1.arbitrum.io/rpc\";C.Avalanche=\"https://node-router.thorswap.net/avalanche-c\";C.BinanceSmartChain=\"https://bsc-dataseed.binance.org\";C.Bitcoin=\"https://node-router.thorswap.net/bitcoin\";C.BitcoinCash=\"https://node-router.thorswap.net/bitcoin-cash\";C.Chainflip=\"wss://mainnet-archive.chainflip.io\";C.Cosmos=\"https://node-router.thorswap.net/cosmos/rpc\";C.Dash=\"https://node-router.thorswap.net/dash\";C.Dogecoin=\"https://node-router.thorswap.net/dogecoin\";C.Ethereum=\"https://node-router.thorswap.net/ethereum\";C.Kujira=\"https://rpc-kujira.synergynodes.com/\";C.Litecoin=\"https://node-router.thorswap.net/litecoin\";C.Maya=\"https://tendermint.mayachain.info\";C.MayaStagenet=\"https://stagenet.tendermint.mayachain.info\";C.Optimism=\"https://mainnet.optimism.io\";C.Polkadot=\"wss://rpc.polkadot.io\";C.Polygon=\"https://polygon-rpc.com\";C.Radix=\"https://radix-mainnet.rpc.grove.city/v1/326002fc/core\";C.THORChain=\"https://rpc.thorswap.net\";C.THORChainStagenet=\"https://stagenet-rpc.ninerealms.com\";C.Solana=\"https://mainnet.helius-rpc.com/?api-key=2cbe3ae6-cfc5-4141-a093-0055d0fa3d80\"})(P||={});var E;((r)=>{r.Arbitrum=\"https://arbiscan.io\";r.Avalanche=\"https://snowtrace.io\";r.BinanceSmartChain=\"https://bscscan.com\";r.Bitcoin=\"https://blockchair.com/bitcoin\";r.BitcoinCash=\"https://www.blockchair.com/bitcoin-cash\";r.Chainflip=\"https://explorer.polkascan.io/polkadot\";r.Cosmos=\"https://www.mintscan.io/cosmos\";r.Dash=\"https://blockchair.com/dash\";r.Dogecoin=\"https://blockchair.com/dogecoin\";r.Ethereum=\"https://etherscan.io\";r.Kujira=\"https://finder.kujira.network/kaiyo-1\";r.Litecoin=\"https://blockchair.com/litecoin\";r.Maya=\"https://www.mayascan.org\";r.Optimism=\"https://optimistic.etherscan.io\";r.Polkadot=\"https://polkadot.subscan.io\";r.Polygon=\"https://polygonscan.com\";r.Radix=\"https://dashboard.radixdlt.com\";r.THORChain=\"https://runescan.io\";r.Solana=\"https://solscan.io\"})(E||={});var _;((r)=>{r.Arbitrum=\"ARB\";r.Avalanche=\"AVAX\";r.BinanceSmartChain=\"BSC\";r.Bitcoin=\"BTC\";r.BitcoinCash=\"BCH\";r.Cosmos=\"GAIA\";r.Dash=\"DASH\";r.Dogecoin=\"DOGE\";r.Ethereum=\"ETH\";r.Kujira=\"KUJI\";r.Litecoin=\"LTC\";r.Maya=\"MAYA\";r.Optimism=\"OP\";r.Polkadot=\"DOT\";r.Chainflip=\"FLIP\";r.Polygon=\"MATIC\";r.Radix=\"XRD\";r.THORChain=\"THOR\";r.Solana=\"SOL\"})(_||={});var Q;((o)=>{o.Arbitrum=\"42161\";o.ArbitrumHex=\"0xa4b1\";o.Avalanche=\"43114\";o.AvalancheHex=\"0xa86a\";o.BinanceSmartChain=\"56\";o.BinanceSmartChainHex=\"0x38\";o.Bitcoin=\"bitcoin\";o.BitcoinCash=\"bitcoincash\";o.Chainflip=\"chainflip\";o.Cosmos=\"cosmoshub-4\";o.Dash=\"dash\";o.Dogecoin=\"dogecoin\";o.Kujira=\"kaiyo-1\";o.Ethereum=\"1\";o.EthereumHex=\"0x1\";o.Litecoin=\"litecoin\";o.Maya=\"mayachain-mainnet-v1\";o.MayaStagenet=\"mayachain-stagenet-v1\";o.Optimism=\"10\";o.OptimismHex=\"0xa\";o.Polkadot=\"polkadot\";o.Polygon=\"137\";o.PolygonHex=\"0x89\";o.Radix=\"radix-mainnet\";o.THORChain=\"thorchain-mainnet-v1\";o.THORChainStagenet=\"thorchain-stagenet-v2\";o.Solana=\"solana\"})(Q||={});var he={[\"0xa4b1\"]:\"ARB\",[\"42161\"]:\"ARB\",[\"0xa86a\"]:\"AVAX\",[\"43114\"]:\"AVAX\",[\"0x38\"]:\"BSC\",[\"56\"]:\"BSC\",[\"bitcoincash\"]:\"BCH\",[\"bitcoin\"]:\"BTC\",[\"chainflip\"]:\"FLIP\",[\"cosmoshub-4\"]:\"GAIA\",[\"dash\"]:\"DASH\",[\"dogecoin\"]:\"DOGE\",[\"0x1\"]:\"ETH\",[\"kaiyo-1\"]:\"KUJI\",[\"1\"]:\"ETH\",[\"litecoin\"]:\"LTC\",[\"mayachain-stagenet-v1\"]:\"MAYA\",[\"mayachain-mainnet-v1\"]:\"MAYA\",[\"0xa\"]:\"OP\",[\"10\"]:\"OP\",[\"polkadot\"]:\"DOT\",[\"0x89\"]:\"MATIC\",[\"137\"]:\"MATIC\",[\"radix-mainnet\"]:\"XRD\",[\"thorchain-stagenet-v2\"]:\"THOR\",[\"thorchain-mainnet-v1\"]:\"THOR\",[\"solana\"]:\"SOL\"},zn=Object.keys(_),M=Object.values(_),w;((u)=>{u[u.ARB=18]=\"ARB\";u[u.AVAX=18]=\"AVAX\";u[u.BCH=8]=\"BCH\";u[u.BSC=18]=\"BSC\";u[u.BTC=8]=\"BTC\";u[u.DASH=8]=\"DASH\";u[u.DOGE=8]=\"DOGE\";u[u.DOT=10]=\"DOT\";u[u.ETH=18]=\"ETH\";u[u.FLIP=18]=\"FLIP\";u[u.GAIA=6]=\"GAIA\";u[u.KUJI=6]=\"KUJI\";u[u.LTC=8]=\"LTC\";u[u.MATIC=18]=\"MATIC\";u[u.MAYA=8]=\"MAYA\";u[u.OP=18]=\"OP\";u[u.SOL=9]=\"SOL\";u[u.THOR=8]=\"THOR\";u[u.XRD=18]=\"XRD\";u[u.ZEC=8]=\"ZEC\"})(w||={});var Me=[\"DOT\",\"FLIP\"],N=[\"ETH\",\"AVAX\",\"BSC\",\"ARB\",\"OP\",\"MATIC\"],be=[\"BTC\",\"BCH\",\"DASH\",\"DOGE\",\"LTC\"],Ye=[\"GAIA\",\"THOR\",\"MAYA\",\"KUJI\"],Le=[\"AVAX\",\"BSC\",\"BTC\",\"BCH\",\"GAIA\",\"DOGE\",\"ETH\",\"LTC\",\"THOR\"],Ae=[\"ARB\",\"DASH\",\"ETH\",\"KUJI\",\"MAYA\",\"THOR\"],K=M.reduce((n,e)=>{const t=zn.find((a)=>_[a]===e);if(t)n[e]=t;return n},{}),en=M.reduce((n,e)=>{return n[e]=Q[K[e]],n},{}),v=M.reduce((n,e)=>{return n[e]=P[K[e]],n},{}),qe=M.reduce((n,e)=>{const t=`${K[e]}Hex`;return n[e]=Q[t],n},{}),ge=M.reduce((n,e)=>{return n[e]=E[K[e]],n},{});var Jn;((H)=>{H.TC_SUPPORTED_TO_TC_SUPPORTED=\"TC-TC\";H.TC_SUPPORTED_TO_ETH=\"TC-ERC20\";H.TC_SUPPORTED_TO_AVAX=\"TC-ARC20\";H.TC_SUPPORTED_TO_BSC=\"TC-BEP20\";H.ETH_TO_TC_SUPPORTED=\"ERC20-TC\";H.ETH_TO_ETH=\"ERC20-ERC20\";H.ETH_TO_AVAX=\"ERC20-ARC20\";H.ETH_TO_BSC=\"ERC20-BEP20\";H.AVAX_TO_TC_SUPPORTED=\"ARC20-TC\";H.AVAX_TO_ETH=\"ARC20-ERC20\";H.AVAX_TO_AVAX=\"ARC20-ARC20\";H.AVAX_TO_BSC=\"ARC20-BEP20\";H.BSC_TO_TC_SUPPORTED=\"BEP20-TC\";H.BSC_TO_ETH=\"BEP20-ERC20\";H.BSC_TO_AVAX=\"BEP20-ARC20\";H.BSC_TO_BSC=\"BEP20-BEP20\"})(Jn||={});var Ne=[\"ERC20-ERC20\",\"ARC20-ARC20\",\"BEP20-BEP20\"],Ke=[\"ERC20-TC\",\"ERC20-ARC20\",\"ERC20-BEP20\",\"ARC20-TC\",\"ARC20-ERC20\",\"ARC20-BEP20\",\"BEP20-TC\",\"BEP20-ERC20\",\"BEP20-ARC20\"],Ve=[\"TC-TC\",\"TC-ERC20\",\"TC-ARC20\",\"TC-BEP20\"];var Zn;((d)=>{d.ARB=\"0x0000000000000000000000000000000000000000\";d.AVAX=\"0x0000000000000000000000000000000000000000\";d.ETH=\"0x0000000000000000000000000000000000000000\";d.BSC=\"0x0000000000000000000000000000000000000000\";d.MATIC=\"0x0000000000000000000000000000000000001010\";d.OP=\"0x4200000000000000000000000000000000000042\"})(Zn||={});var kn;((r)=>{r.ARB=\"m/44'/60'/0'/0\";r.AVAX=\"m/44'/60'/0'/0\";r.BCH=\"m/44'/145'/0'/0\";r.BSC=\"m/44'/60'/0'/0\";r.BTC=\"m/84'/0'/0'/0\";r.DASH=\"m/44'/5'/0'/0\";r.DOGE=\"m/44'/3'/0'/0\";r.DOT=\"////\";r.ETH=\"m/44'/60'/0'/0\";r.FLIP=\"////\";r.GAIA=\"m/44'/118'/0'/0\";r.KUJI=\"m/44'/118'/0'/0\";r.LTC=\"m/84'/2'/0'/0\";r.MATIC=\"m/44'/60'/0'/0\";r.MAYA=\"m/44'/931'/0'/0\";r.OP=\"m/44'/60'/0'/0\";r.SOL=\"m/44'/501'/0'/0\";r.THOR=\"m/44'/931'/0'/0\";r.XRD=\"////\"})(kn||={});var U={ARB:[44,60,0,0,0],AVAX:[44,60,0,0,0],BCH:[44,145,0,0,0],BSC:[44,60,0,0,0],BTC:[84,0,0,0,0],DASH:[44,5,0,0,0],DOGE:[44,3,0,0,0],ETH:[44,60,0,0,0],GAIA:[44,118,0,0,0],KUJI:[44,118,0,0,0],LTC:[84,2,0,0,0],MATIC:[44,60,0,0,0],MAYA:[44,931,0,0,0],OP:[44,60,0,0,0],SOL:[44,501,0,0,0],THOR:[44,931,0,0,0],XRD:[0,0,0,0,0],DOT:[0,0,0,0,0],FLIP:[0,0,0,0,0]};var tn;((u)=>{u.BRAVE=\"BRAVE\";u.COINBASE_MOBILE=\"COINBASE_MOBILE\";u.COINBASE_WEB=\"COINBASE_WEB\";u.EIP6963=\"EIP6963\";u.EXODUS=\"EXODUS\";u.KEEPKEY=\"KEEPKEY\";u.KEPLR=\"KEPLR\";u.KEYSTORE=\"KEYSTORE\";u.LEDGER=\"LEDGER\";u.METAMASK=\"METAMASK\";u.OKX=\"OKX\";u.OKX_MOBILE=\"OKX_MOBILE\";u.PHANTOM=\"PHANTOM\";u.POLKADOT_JS=\"POLKADOT_JS\";u.RADIX_WALLET=\"RADIX_WALLET\";u.TREZOR=\"TREZOR\";u.TALISMAN=\"TALISMAN\";u.TRUSTWALLET_WEB=\"TRUSTWALLET_WEB\";u.WALLETCONNECT=\"WALLETCONNECT\";u.XDEFI=\"XDEFI\"})(tn||={});var hn;((a)=>{a[a.NoError=36864]=\"NoError\";a[a.LockedDevice=21781]=\"LockedDevice\";a[a.TC_NotFound=65535]=\"TC_NotFound\"})(hn||={});import{z as m} from\"zod\";var Mn;((a)=>{a.Average=\"average\";a.Fast=\"fast\";a.Fastest=\"fastest\"})(Mn||={});var bn;((t)=>{t.Approve=\"approve\";t.CheckOnly=\"checkOnly\"})(bn||={});var an;((i)=>{i.NAME_REGISTER=\"~\";i.BOND=\"BOND\";i.DEPOSIT=\"+\";i.LEAVE=\"LEAVE\";i.UNBOND=\"UNBOND\";i.WITHDRAW=\"-\";i.OPEN_LOAN=\"$+\";i.CLOSE_LOAN=\"$-\"})(an||={});var Pe=m.object({sellAsset:m.string({description:\"Asset to sell\"}),buyAsset:m.string({description:\"Asset to buy\"}),sellAmount:m.number({description:\"Amount of asset to sell\"}).refine((n)=>n>0,{message:\"sellAmount must be greater than 0\",path:[\"sellAmount\"]}),providers:m.optional(m.array(m.string({description:\"List of providers to use\"}))),sourceAddress:m.optional(m.string({description:\"Address to send asset from\"})),destinationAddress:m.optional(m.string({description:\"Address to send asset to\"})),slippage:m.optional(m.number({description:\"Slippage tolerance as a percentage. Default is 3%.\"})),affiliate:m.optional(m.string({description:\"Affiliate thorname\"})),affiliateFee:m.optional(m.number({description:\"Affiliate fee in basis points\"}).refine((n)=>{return n===Math.floor(n)&&n>=0},{message:\"affiliateFee must be a positive integer\",path:[\"affiliateFee\"]})),allowSmartContractSender:m.optional(m.boolean({description:\"Allow smart contract as sender\"})),allowSmartContractReceiver:m.optional(m.boolean({description:\"Allow smart contract as recipient\"})),disableSecurityChecks:m.optional(m.boolean({description:\"Disable security checks\"}))}).refine((n)=>n.sellAsset!==n.buyAsset,{message:\"Must be different\",path:[\"sellAsset\",\"buyAsset\"]});import{z as p} from\"zod\";var pn;((t)=>{t.highSlippage=\"highSlippage\";t.highPriceImpact=\"highPriceImpact\"})(pn||={});var Yn=p.array(p.union([p.string(),p.number(),p.array(p.string()),p.object({from:p.string(),value:p.string()}).describe(\"Parameters to pass to the contract method\")])),yn=p.object({contractAddress:p.string({description:\"Address of the contract to interact with\"}),contractMethod:p.string({description:\"Name of the method to call\"}),contractParams:Yn,contractParamNames:p.array(p.string({description:\"Names of the parameters to pass to the contract method\"})),approvalToken:p.optional(p.string({description:\"Address of the token to approve spending of\"})),approvalSpender:p.optional(p.string({description:\"Address of the spender to approve\"}))}),V=p.object({inbound:p.optional(p.number({description:\"Time to receive inbound asset in seconds\"})),swap:p.optional(p.number({description:\"Time to swap assets in seconds\"})),outbound:p.optional(p.number({description:\"Time to receive outbound asset in seconds\"})),total:p.number({description:\"Total time in seconds\"})}),z;((f)=>{f.CHAINFLIP=\"CHAINFLIP\";f.TRADERJOE_V1=\"TRADERJOE_V1\";f.PANGOLIN_V1=\"PANGOLIN_V1\";f.UNISWAP_V2=\"UNISWAP_V2\";f.THORCHAIN=\"THORCHAIN\";f.THORCHAIN_STREAMING=\"THORCHAIN_STREAMING\";f.MAYACHAIN=\"MAYACHAIN\";f.ONEINCH=\"ONEINCH\";f.SUSHISWAP_V2=\"SUSHISWAP_V2\";f.WOOFI_V2=\"WOOFI_V2\";f.PANCAKESWAP=\"PANCAKESWAP\"})(z||={});var sn;((d)=>{d.LIQUIDITY=\"liquidity\";d.NETWORK=\"network\";d.INBOUND=\"inbound\";d.OUTBOUND=\"outbound\";d.AFFILIATE=\"affiliate\";d.TAX=\"tax\"})(sn||={});var dn=p.array(p.object({type:p.nativeEnum(sn),amount:p.string(),asset:p.string(),chain:p.string(),protocol:p.nativeEnum(z)})),Ln=p.object({sellAsset:p.string({description:\"Asset to sell\"}),buyAsset:p.string({description:\"Asset to buy\"}),provider:p.nativeEnum(z),sourceAddress:p.string({description:\"Source address\"}),destinationAddress:p.string({description:\"Destination address\"}),estimatedTime:V.optional(),affiliate:p.string({description:\"Affiliate address\"}).optional(),affiliateFee:p.number({description:\"Affiliate fee\"}).optional(),slipPercentage:p.number({description:\"Slippage as a percentage\"})}),Ue=Ln.omit({sourceAddress:!0,destinationAddress:!0,slipPercentage:!0}),An=p.object({name:p.string({description:\"Asset name\"}),price:p.number({description:\"Price in USD\"}),image:p.string({description:\"Asset image\"})}),rn=p.object({priceImpact:p.number({description:\"Price impact\"}),assets:p.optional(p.array(An))}),un=p.array(p.object({code:p.nativeEnum(pn),display:p.string(),tooltip:p.string().optional()})),qn=p.object({sellAsset:p.string({description:\"Asset to sell\"}),buyAsset:p.string({description:\"Asset to buy\"}),provider:p.nativeEnum(z),buyAmount:p.string({description:\"Amount of asset to buy\"}),buyAmountMaxSlippage:p.string({description:\"Amount of asset to buy\"}),sellAmount:p.string({description:\"Amount of asset to sell\"}),sourceAddress:p.string({description:\"Source address\"}),destinationAddress:p.string({description:\"Destination address\"}),slippageBps:p.number({description:\"Slippage in bps\"}),targetAddress:p.optional(p.string({description:\"Target address for contract call or transfer address\"})),inboundAddress:p.optional(p.string({description:\"Inbound address\"})),routerAddress:p.optional(p.string({description:\"Inbound address\"})),contractMethod:p.optional(p.string({description:\"Contract method\"})),fees:p.optional(dn),estimatedTime:p.optional(V),memo:p.optional(p.string({description:\"Memo\"})),expiration:p.optional(p.string({description:\"Expiration\"}))}),Se=p.object({providers:p.array(p.nativeEnum(z)),sellAsset:p.string({description:\"Asset to sell\"}),sellAmount:p.string({description:\"sell amount\"}),buyAsset:p.string({description:\"Asset to buy\"}),expectedBuyAmount:p.string({description:\"Expected Buy amount\"}),expectedBuyAmountMaxSlippage:p.string({description:\"Expected Buy amount max slippage\"}),sourceAddress:p.string({description:\"Source address\"}),destinationAddress:p.string({description:\"Destination address\"}),targetAddress:p.optional(p.string({description:\"Target address\"})),routerAddress:p.optional(p.string({description:\"Router address\"})),inboundAddress:p.optional(p.string({description:\"Inbound address\"})),expiration:p.optional(p.string({description:\"Expiration\"})),memo:p.optional(p.string({description:\"Memo\"})),evmTransactionDetails:p.optional(yn),routePathArray:p.optional(p.array(p.string())),estimatedTime:p.optional(V),totalSlippageBps:p.number({description:\"Total slippage in bps\"}),legs:p.array(qn),errorCode:p.optional(p.string()),warnings:un,meta:rn}),gn=p.object({provider:p.nativeEnum(z),sellAsset:p.string({description:\"Asset to sell\"}),sellAmount:p.string({description:\"Sell amount\"}),buyAsset:p.string({description:\"Asset to buy\"}),buyAmount:p.string({description:\"Buy amount\"}),buyAmountMaxSlippage:p.string({description:\"Buy amount max slippage\"}),fees:p.optional(dn)}),Qn=p.object({providers:p.array(p.nativeEnum(z)),sellAsset:p.string({description:\"Asset to sell\"}),sellAmount:p.string({description:\"sell amount\"}),buyAsset:p.string({description:\"Asset to buy\"}),expectedBuyAmount:p.string({description:\"Expected Buy amount\"}),expectedBuyAmountMaxSlippage:p.string({description:\"Expected Buy amount max slippage\"}),sourceAddress:p.string({description:\"Source address\"}),destinationAddress:p.string({description:\"Destination address\"}),targetAddress:p.optional(p.string({description:\"Target address\"})),expiration:p.optional(p.string({description:\"Expiration\"})),memo:p.optional(p.string({description:\"Memo\"})),evmTransactionDetails:p.optional(yn),estimatedTime:p.optional(V),totalSlippageBps:p.number({description:\"Total slippage in bps\"}),legs:p.array(gn),warnings:un,meta:rn}),ce=p.object({quoteId:p.string({description:\"Quote ID\"}),routes:p.array(Qn),error:p.optional(p.string({description:\"Error message\"}))});import{red as Cn,yellow as Fn} from\"picocolors\";var Nn={core_estimated_max_spendable_chain_not_supported:10002,core_extend_error:10003,core_inbound_data_not_found:10004,core_approve_asset_address_or_from_not_found:10005,core_plugin_not_found:10006,core_plugin_swap_not_found:10007,core_approve_asset_target_invalid:10008,core_explorer_unsupported_chain:10009,core_verify_message_not_supported:10010,core_chain_halted:10099,core_wallet_connection_not_found:10100,core_wallet_xdefi_not_installed:10101,core_wallet_evmwallet_not_installed:10102,core_wallet_walletconnect_not_installed:10103,core_wallet_keystore_not_installed:10104,core_wallet_ledger_not_installed:10105,core_wallet_trezor_not_installed:10106,core_wallet_keplr_not_installed:10107,core_wallet_okx_not_installed:10108,core_wallet_keepkey_not_installed:10109,core_wallet_talisman_not_installed:10110,core_wallet_not_keypair_wallet:10111,core_wallet_sign_message_not_supported:10110,core_swap_invalid_params:10200,core_swap_route_not_complete:10201,core_swap_asset_not_recognized:10202,core_swap_contract_not_found:10203,core_swap_route_transaction_not_found:10204,core_swap_contract_not_supported:10205,core_swap_transaction_error:10206,core_swap_quote_mode_not_supported:10207,core_transaction_deposit_error:10301,core_transaction_create_liquidity_base_error:10302,core_transaction_create_liquidity_asset_error:10303,core_transaction_create_liquidity_invalid_params:10304,core_transaction_add_liquidity_invalid_params:10305,core_transaction_add_liquidity_base_address:10306,core_transaction_add_liquidity_base_error:10307,core_transaction_add_liquidity_asset_error:10308,core_transaction_withdraw_error:10309,core_transaction_deposit_to_pool_error:10310,core_transaction_deposit_insufficient_funds_error:10311,core_transaction_deposit_gas_error:10312,core_transaction_invalid_sender_address:10313,core_transaction_deposit_server_error:10314,core_transaction_user_rejected:10315,wallet_connection_rejected_by_user:20000,wallet_missing_api_key:20001,wallet_chain_not_supported:20002,wallet_missing_params:20003,wallet_provider_not_found:20004,wallet_failed_to_add_or_switch_network:20005,wallet_ledger_connection_error:20101,wallet_ledger_connection_claimed:20102,wallet_ledger_get_address_error:20103,wallet_ledger_device_not_found:20104,wallet_ledger_device_locked:20105,wallet_phantom_not_found:20201,wallet_xdefi_not_found:20301,wallet_xdefi_send_transaction_no_address:20302,wallet_xdefi_contract_address_not_provided:20303,wallet_xdefi_asset_not_defined:20304,wallet_walletconnect_project_id_not_specified:20401,wallet_walletconnect_connection_not_established:20402,wallet_walletconnect_namespace_not_supported:20403,wallet_trezor_failed_to_sign_transaction:20501,wallet_trezor_derivation_path_not_supported:20502,wallet_trezor_failed_to_get_address:20503,wallet_talisman_not_enabled:20601,wallet_talisman_not_found:20602,wallet_polkadot_not_found:20701,chainflip_channel_error:30001,chainflip_unknown_asset:30002,chainflip_broker_invalid_params:30100,chainflip_broker_recipient_error:30101,chainflip_broker_register:30102,chainflip_broker_tx_error:30103,chainflip_broker_withdraw:30104,chainflip_broker_fund_only_flip_supported:30105,chainflip_broker_fund_invalid_address:30106,thorchain_chain_halted:40001,thorchain_trading_halted:40002,thorchain_swapin_router_required:40100,thorchain_swapin_vault_required:40101,thorchain_swapin_memo_required:40102,thorchain_swapin_token_required:40103,api_v2_invalid_response:50001,toolbox_cosmos_signer_not_defined:90101,toolbox_cosmos_no_accounts_found:90102,toolbox_cosmos_verify_signature_no_pubkey:90103,toolbox_evm_no_abi_fragment:90201,toolbox_evm_no_signer:90202,toolbox_evm_no_signer_address:90203,toolbox_evm_no_from_address:90204,toolbox_evm_no_contract_address:90205,toolbox_evm_no_fee_data:90206,toolbox_evm_no_gas_price:90207,toolbox_evm_no_to_address:90208,toolbox_evm_invalid_gas_asset_address:90209,toolbox_evm_provider_not_eip1193_compatible:90210,toolbox_evm_error_estimating_gas_limit:90211,toolbox_evm_error_sending_transaction:90212,helpers_invalid_number_different_decimals:99000,helpers_invalid_number_of_years:99001,helpers_invalid_identifier:99002,helpers_invalid_asset_url:99003,helpers_invalid_asset_identifier:99004,helpers_invalid_memo_type:99005,helpers_failed_to_switch_network:99103,helpers_not_found_provider:99200,not_implemented:99999};class R extends Error{static ErrorCode=Nn;constructor(n,e){const t=typeof n===\"string\",a=t?n:n.errorKey;if(e)console.error(e,{stack:e?.stack,message:e?.message});super(a,{cause:{code:R.ErrorCode[a],message:`${a}${t?\"\":`: ${JSON.stringify(n.info)}`}`}});Object.setPrototypeOf(this,R.prototype)}}function Ct(n){if(n<0)throw new R({errorKey:\"helpers_invalid_number_of_years\",info:{numberOfYears:n}});return 10+n}function lt(n){if(n<0)throw new R({errorKey:\"helpers_invalid_number_of_years\",info:{numberOfYears:n}});return Math.round((10+n*1.0512)*10000000000)/10000000000}function Ht(n,e){try{return n()}catch(t){if(e)throw new R(e,t);return console.error(t)}}function Rt(n){switch(n){case\"THOR\":return`${n}.RUNE`;case\"GAIA\":return`${n}.ATOM`;case\"BSC\":return`${n}`;default:return`${n}.${n}`}}function xn(n,e){if(!Kn&&n){if(Tn.has(e))return;Tn.add(e),console.warn(e)}}var Kn=[\"production\",\"test\"].includes(\"development\"),Tn=new Set;function mn(n=\"\"){const e=n.toUpperCase(),[t]=e.split(\".\");if(on.includes(t))return!0;const[a]=e.split(\"/\");if(on.includes(a))return!0;throw new R({errorKey:\"helpers_invalid_identifier\",info:{message:`Invalid identifier: ${n}. Expected format: <Chain>.<Ticker> or <Chain>.<Ticker>-<ContractAddress>`,identifier:n}})}function _t(n){if(n.length>30)return!1;const e=/^[a-zA-Z0-9+_-]+$/g;return!!n.match(e)}var on=[...Object.values(_),\"TERRA\"];function k({value:n,bigIntDecimal:e=Y,decimal:t=Y}){if(t===0)return n.toString();const a=n<0n;let y=n.toString().substring(a?1:0);const s=t-(y.length-1);if(s>0)y=\"0\".repeat(s)+y;const d=y.length-t;let T=y.slice(-t);if(Number.parseInt(T[e]||\"0\")>=5)T=`${T.substring(0,e-1)}${(Number.parseInt(T[e-1]||\"0\")+1).toString()}`;else T=T.substring(0,e);return`${a?\"-\":\"\"}${y.slice(0,d)}.${T}`.replace(/\\.?0*$/,\"\")}var F=function(n){const t=`${typeof n===\"number\"?Vn.format(n):S(n)}`.replaceAll(\",\",\".\").split(\".\");return t.length>1?`${t.slice(0,-1).join(\"\")}.${t.at(-1)}`:t[0]||\"0\"},fn=function(n){const e=n.split(\".\")[1]?.length||0;return Math.max(e,Y)},S=function(n){return typeof n===\"object\"?\"getValue\"in n?n.getValue(\"string\"):n.value:n},Y=8,J=(n)=>10n**BigInt(n),b=(n)=>Math.log10(Number.parseFloat(n.toString()));class G{decimalMultiplier=10n**8n;bigIntValue=0n;decimal;static fromBigInt(n,e){return new G({decimal:e,value:k({value:n,bigIntDecimal:e,decimal:e})})}static shiftDecimals({value:n,from:e,to:t}){return G.fromBigInt(n.getBaseValue(\"bigint\")*J(t)/J(e),t)}constructor(n){const e=S(n),t=typeof n===\"object\";this.decimal=t?n.decimal:void 0,this.decimalMultiplier=t&&\"decimalMultiplier\"in n?n.decimalMultiplier:J(Math.max(fn(F(e)),this.decimal||0)),this.#p(e)}set(n){return new this.constructor({decimal:this.decimal,value:n,identifier:this.toString()})}add(...n){return this.#e(\"add\",...n)}sub(...n){return this.#e(\"sub\",...n)}mul(...n){return this.#e(\"mul\",...n)}div(...n){return this.#e(\"div\",...n)}gt(n){return this.#n(\"gt\",n)}gte(n){return this.#n(\"gte\",n)}lt(n){return this.#n(\"lt\",n)}lte(n){return this.#n(\"lte\",n)}eqValue(n){return this.#n(\"eqValue\",n)}getValue(n){const e=this.formatBigIntToSafeValue(this.bigIntValue,this.decimal||b(this.decimalMultiplier));switch(n){case\"number\":return Number(e);case\"string\":return e;case\"bigint\":return this.bigIntValue*10n**BigInt(this.decimal||8n)/this.decimalMultiplier}}getBaseValue(n){const e=this.decimalMultiplier/J(this.decimal||8),t=this.bigIntValue/e;switch(n){case\"number\":return Number(t);case\"string\":return t.toString();case\"bigint\":return t}}getBigIntValue(n,e){if(!e&&typeof n===\"object\")return n.bigIntValue;const t=S(n),a=F(t);if(a===\"0\"||a===\"undefined\")return 0n;return this.#a(a,e)}toSignificant(n=6){const[e,t]=this.getValue(\"string\").split(\".\"),a=e||\"\",y=t||\"\";if((Number.parseInt(a)?a.length+y.length:y.length)<=n)return this.getValue(\"string\");if(a.length>=n)return a.slice(0,n).padEnd(a.length,\"0\");if(Number.parseInt(a))return`${a}.${y.slice(0,n-a.length)}`.padEnd(n-a.length,\"0\");const d=Number.parseInt(y),T=`${d}`.slice(0,n);return`0.${T.padStart(y.length-`${d}`.length+T.length,\"0\")}`}toFixed(n=6){const[e,t]=this.getValue(\"string\").split(\".\"),a=e||\"\",y=t||\"\";if(Number.parseInt(a))return`${a}.${y.slice(0,n)}`.padEnd(n,\"0\");const s=Number.parseInt(y),d=`${s}`.slice(0,n);return`0.${d.padStart(y.length-`${s}`.length+d.length,\"0\")}`}toAbbreviation(n=2){const e=this.getValue(\"number\"),t=[\"\",\"K\",\"M\",\"B\",\"T\",\"Q\",\"Qi\",\"S\"],a=Math.floor(Math.log10(Math.abs(e))/3),y=t[a];if(!y)return this.getValue(\"string\");const s=10**(a*3);return`${(e/s).toFixed(n)}${y}`}toCurrency(n=\"$\",{currencyPosition:e=\"start\",decimal:t=2,decimalSeparator:a=\".\",thousandSeparator:y=\",\"}={}){const s=this.getValue(\"number\"),[d=\"\",T=\"\"]=s.toFixed(6).split(\".\"),i=d.replace(/\\B(?=(\\d{3})+(?!\\d))/g,y),x=d||T?d===\"0\"?`${Number.parseFloat(`0.${T}`)}`.replace(\".\",a):`${i}${Number.parseInt(T)?`${a}${T.slice(0,t)}`:\"\"}`:\"0.00\";return`${e===\"start\"?n:\"\"}${x}${e===\"end\"?n:\"\"}`}formatBigIntToSafeValue(n,e){const t=e||this.decimal||Y,a=Math.max(t,b(this.decimalMultiplier)),y=n<0n,s=n.toString().substring(y?1:0),d=a-(s.length-1),T=d>0?\"0\".repeat(d)+s:s,i=T.length-a;let x=T.slice(-a);if(Number.parseInt(x[t]||\"0\")>=5)x=`${x.substring(0,t-1)}${(Number.parseInt(x[t-1]||\"0\")+1).toString()}`;else x=x.substring(0,t);return`${y?\"-\":\"\"}${T.slice(0,i)}.${x}`.replace(/\\.?0*$/,\"\")}#e(n,...e){const t=this.#t(this,...e),a=Math.max(t,b(this.decimalMultiplier)),y=J(a),s=e.reduce((T,i)=>{const x=this.getBigIntValue(i,a);switch(n){case\"add\":return T+x;case\"sub\":return T-x;case\"mul\":return T*x/y;case\"div\":{if(x===0n)throw new RangeError(\"Division by zero\");return T*y/x}default:return T}},this.bigIntValue*y/this.decimalMultiplier),d=k({bigIntDecimal:a,decimal:a,value:s});return new this.constructor({decimalMultiplier:J(a),decimal:this.decimal,value:d,identifier:this.toString()})}#n(n,...e){const t=this.#t(this,...e),a=this.getBigIntValue(e[0]||\"0\",t),y=this.getBigIntValue(this,t);switch(n){case\"gt\":return y>a;case\"gte\":return y>=a;case\"lt\":return y<a;case\"lte\":return y<=a;case\"eqValue\":return y===a}}#p(n){const e=F(n)||\"0\";this.bigIntValue=this.#a(e)}#t(...n){const e=n.map((t)=>{return typeof t===\"object\"?t.decimal||b(t.decimalMultiplier):fn(F(t))}).filter(Boolean);return Math.max(...e,Y)}#a(n,e){const t=e?J(e):this.decimalMultiplier,a=b(t),[y=\"\",s=\"\"]=n.split(\".\");return BigInt(`${y}${s.padEnd(a,\"0\")}`)}}var Vn=Intl.NumberFormat(\"fullwide\",{useGrouping:!1,maximumFractionDigits:20});function Yt(n){const e=l.from({chain:n});switch(n){case\"BTC\":case\"LTC\":case\"BCH\":case\"DASH\":return e.set(0.00010001);case\"DOGE\":return e.set(1.00000001);case\"AVAX\":case\"ETH\":case\"ARB\":case\"BSC\":return e.set(0.00000001);case\"THOR\":case\"MAYA\":return e.set(0);case\"GAIA\":case\"KUJI\":return e.set(0.000001);default:return e.set(0.00000001)}}async function Bn(n,e=0){mn(n);const t=B.get(n.toUpperCase()),a=t?.decimal||await Hn(c(n));if(!t)B.set(n.toUpperCase(),{identifier:n,decimal:a});return new l({decimal:a,value:W(e,a),identifier:n})}var Wn=function(n,e=0){const[t,a]=n.split(\".\")?.[0]?.toUpperCase()===\"THOR\"?n.split(\".\").slice(1).join().split(\"/\"):n.split(\"/\");if(!(t&&a))throw new R({errorKey:\"helpers_invalid_asset_identifier\",info:{identifier:n}});return new l({decimal:8,value:W(e,8),identifier:`${\"THOR\"}.${t}/${a}`})},W=function(n,e){return typeof n===\"bigint\"?k({value:n,bigIntDecimal:e,decimal:e}):n},c=function(n){const e=n.slice(0,14).includes(\"/\"),t=n.split(\".\")?.[0]?.toUpperCase()===\"THOR\",a=n.split(\".\")?.[0]?.toUpperCase()===\"MAYA\",[y,s=\"\"]=t||a?n.split(\".\").slice(1).join().split(\"/\"):n.split(\"/\");if(e&&!(y&&s))throw new R({errorKey:\"helpers_invalid_asset_identifier\",info:{identifier:n}});const d=n.includes(\".\")&&!e?n:`${a?\"MAYA\":\"THOR\"}.${s}`,[T,...i]=d.split(\".\"),x=e?s:i.join(\".\"),O=x.split(\"-\"),f=O.length===1?O[0]:O.slice(0,-1).join(\"-\"),X=O.length===1?void 0:O[O.length-1];return{address:X?.toLowerCase(),chain:T,isGasAsset:D({chain:T,symbol:x}),isSynthetic:e,ticker:f,symbol:(e?`${y}/`:\"\")+(X?`${f}-${X?.toLowerCase()??\"\"}`:x)}},B=new Map;class l extends G{address;chain;isGasAsset=!1;isSynthetic=!1;symbol;tax;ticker;type;chainId;constructor({value:n,decimal:e,tax:t,chain:a,symbol:y,identifier:s}){super(typeof n===\"object\"?n:{decimal:e,value:n});const d=c(s||`${a}.${y}`);this.type=On(d),this.tax=t,this.chain=d.chain,this.ticker=d.ticker,this.symbol=d.symbol,this.address=d.address,this.isSynthetic=d.isSynthetic,this.isGasAsset=d.isGasAsset,this.chainId=en[d.chain]}toString(){return this.isSynthetic?this.symbol:`${this.chain}.${this.symbol}`}toUrl(){return this.isSynthetic?`${this.chain}.${this.symbol.replace(\"/\",\".\")}`:this.toString()}eqAsset({chain:n,symbol:e}){return this.chain===n&&this.symbol===e}eq(n){return this.eqAsset(n)&&this.eqValue(n)}static fromUrl(n,e=0){const[t,a,y]=n.split(\".\");if(!(t&&a))throw new R({errorKey:\"helpers_invalid_asset_url\",info:{urlAsset:n}});const s=t===\"THOR\"&&y?`${t}.${a}/${y}`:n;return l.from({asset:s,value:e})}static from({value:n=0,fromBaseDecimal:e,asyncTokenLookup:t,...a}){const y=n instanceof G?n.getValue(\"string\"):n,s=\"chain\"in a,d=s?a.chain:a.asset,T=s||ln.includes(d),{identifier:i,decimal:x}=T?Rn(d):{identifier:d,decimal:void 0},{chain:O,isSynthetic:f}=c(i),X=B.get(i.toUpperCase()),A=X?.decimal||x;xn(!(t||A),Fn(`Couldn't find static decimal for ${Cn(i)} (Using default ${Cn(w[O])} decimal as fallback).\nThis can result in incorrect calculations and mess with amount sent on transactions.\nYou can load static assets by installing @swapkit/tokens package and calling AssetValue.loadStaticAssets()\nor by passing asyncTokenLookup: true to the from() function, which will make it async and return a promise.`));const{decimal:q,identifier:h,tax:H}=X||{decimal:A||w[O],identifier:i},Z=e?W(BigInt(y),e):W(y,q);return t?Bn(h,e?Z:y):f?Wn(h,Z):new l({tax:H,decimal:q,identifier:h,value:Z})}static loadStaticAssets(){return new Promise((n,e)=>{try{import(\"@swapkit/tokens\").then((t)=>{for(let a of Object.values(t))for(let{identifier:y,chain:s,...d}of a.tokens)B.set(y.toUpperCase(),{identifier:y,decimal:\"decimals\"in d?d.decimals:w[s]});n({ok:!0})})}catch(t){console.error(t),e({ok:!1,error:t,message:\"Couldn't load static assets. Ensure you have installed @swapkit/tokens package\"})}})}static fromString(n,e=0){return l.from({asset:n,value:e,asyncTokenLookup:!0})}static fromIdentifier(n,e=0){return l.from({asset:n,value:e,asyncTokenLookup:!0})}static fromStringSync(n,e=0){return l.from({asset:n,value:e})}static fromStringWithBase(n,e=0n,t=8){return l.from({asyncTokenLookup:!0,asset:n,value:e,fromBaseDecimal:t})}static fromStringWithBaseSync(n,e=0n,t=8){return l.from({asset:n,value:e,fromBaseDecimal:t})}static fromIdentifierSync(n,e=0){return l.from({asset:n,value:e})}static fromChainOrSignature(n,e=0){if(Object.values(_).includes(n))return l.from({chain:n,value:e});return l.from({asset:n,value:e})}}import In from\"ky\";function qt({apiKey:n,...e}){_n={...e,apiKey:n}}var wn=function(){const{apiKey:n,...e}=_n;return In.create({...e,headers:{...Pn,...e.headers,\"x-api-key\":n}})},_n={},Pn=typeof window!==\"undefined\"?{}:{referrer:\"https://sk.thorswap.net\",referer:\"https://sk.thorswap.net\"},$n=(n)=>({get:async(e,t)=>(await n.get(e,t)).json(),post:async(e,t)=>(await n.post(e,t)).json()}),I={...$n(wn()),extend:(n)=>{const e=wn().extend(n);return{...$n(e),extend:I.extend}}};async function Wt(n){const e=await import(\"@swapkit/tokens\");for(let t of Object.values(e))for(let{identifier:a,chain:y,...s}of t.tokens){if(\"identifier\"in n&&a===n.identifier)return a;if(\"address\"in s&&\"chain\"in n&&y===n.chain&&s.address.toLowerCase()===n.contract.toLowerCase())return a}return}var En=\"0x313ce567\",ln=[`${\"MAYA\"}.MAYA`,`${\"ETH\"}.THOR`,`${\"ETH\"}.vTHOR`,`${\"KUJI\"}.USK`],Xn=async({chain:n,to:e})=>{try{const{result:t}=await I.post(v[n],{headers:{accept:\"*/*\",\"content-type\":\"application/json\",\"cache-control\":\"no-cache\"},body:JSON.stringify({id:44,jsonrpc:\"2.0\",method:\"eth_call\",params:[{to:e.toLowerCase(),data:En},\"latest\"]})});return Number.parseInt(BigInt(t||w[n]).toString())}catch(t){return console.error(t),w[n]}},vn=async({symbol:n})=>{try{const e=n.split(\"-\")[1]?.toLowerCase(),{manager:t}=await I.post(`${v[\"XRD\"]}/state/resource`,{headers:{Accept:\"*/*\",\"Content-Type\":\"application/json\"},body:JSON.stringify({network:\"mainnet\",resource_address:e})});return t.divisibility.value.divisibility}catch(e){return console.error(e),w[\"XRD\"]}},Un=(n)=>{if(n===\"ETH\")return 18;const e=n.split(\"-\"),t=e.length===1?void 0:e[e.length-1]?.toLowerCase();return t?.startsWith(\"0x\")?Xn({chain:\"ETH\",to:t}):18},Sn=(n)=>{const e=n.split(\"-\"),t=e.length===1?void 0:e[e.length-1];return t?.startsWith(\"0x\")?Xn({chain:\"AVAX\",to:t.toLowerCase()}):18},cn=(n)=>{if(n===\"BSC\")return 18;return 18},Dn=(n)=>{if(n===\"XRD\")return 18;return vn({symbol:n})},Hn=({chain:n,symbol:e})=>{switch(n){case\"ETH\":return Un(e);case\"AVAX\":return Sn(e);case\"BSC\":return cn(e);case\"XRD\":return Dn(e);default:return w[n]}},Vt=({chain:n})=>{switch(n){case\"ARB\":case\"OP\":return l.from({asset:`${n}.ETH`});case\"MAYA\":return l.from({asset:`${n}.CACAO`});case\"GAIA\":return l.from({asset:`${n}.ATOM`});case\"BSC\":return l.from({asset:`${n}.BNB`});case\"THOR\":return l.from({asset:`${n}.RUNE`});default:return l.from({asset:`${n}.${n}`})}},D=({chain:n,symbol:e})=>{switch(n){case\"ARB\":case\"OP\":return e===\"ETH\";case\"MAYA\":return e===\"CACAO\";case\"GAIA\":return e===\"ATOM\";case\"BSC\":return e===\"BNB\";case\"THOR\":return e===\"RUNE\";default:return e===n}},Rn=(n)=>{switch(n){case\"ARB\":case\"OP\":return{identifier:`${n}.ETH`,decimal:w[n]};case`${\"ETH\"}.THOR`:return{identifier:\"ETH.THOR-0xa5f2211b9b8170f694421f2046281775e8468044\",decimal:18};case`${\"ETH\"}.vTHOR`:return{identifier:\"ETH.vTHOR-0x815c23eca83261b6ec689b60cc4a58b54bc24d8d\",decimal:18};case\"GAIA\":return{identifier:`${n}.ATOM`,decimal:w[n]};case\"THOR\":return{identifier:`${n}.RUNE`,decimal:w[n]};case\"BSC\":return{identifier:`${n}.BNB`,decimal:w[n]};case\"MAYA\":return{identifier:`${n}.CACAO`,decimal:10};case\"XRD\":return{identifier:`${\"XRD\"}.XRD`,decimal:w[n]};case`${\"MAYA\"}.MAYA`:return{identifier:n,decimal:4};case`${\"KUJI\"}.USK`:return{identifier:n,decimal:6};default:return{identifier:`${n}.${n}`,decimal:w[n]}}},On=({chain:n,symbol:e})=>{if(e.includes(\"/\"))return\"Synth\";switch(n){case\"GAIA\":return e===\"ATOM\"?\"Native\":\"GAIA\";case\"KUJI\":return e===\"KUJI\"?\"Native\":\"KUJI\";case\"BSC\":return e===\"BNB\"?\"Native\":\"BEP20\";case\"ETH\":return e===\"ETH\"?\"Native\":\"ERC20\";case\"AVAX\":return e===\"AVAX\"?\"Native\":\"AVAX\";case\"MATIC\":return e===\"MATIC\"?\"Native\":\"POLYGON\";case\"ARB\":return[\"ETH\",\"ARB\"].includes(e)?\"Native\":\"ARBITRUM\";case\"OP\":return[\"ETH\",\"OP\"].includes(e)?\"Native\":\"OPTIMISM\";case\"XRD\":return e===\"XRD\"?\"Native\":\"RADIX\";default:return\"Native\"}},Ft=(n)=>{const[e,...t]=n.split(\".\"),a=n.includes(\"/\"),y=t.join(\".\"),s=y?.split(\"-\"),d=s?.length?s.length===1?s[0]:s.slice(0,-1).join(\"-\"):void 0;return{chain:e,symbol:y,ticker:d,synth:a}},ne=new RegExp(/(.)\\1{6}|\\.ORG|\\.NET|\\.FINANCE|\\.COM|WWW|HTTP|\\\\\\\\|\\/\\/|[\\s$%:[\\]]/,\"gmi\"),ee=(n)=>{const[e,t]=n.split(\".\");if(!N.includes(e))return!0;const a=t.split(\"-\"),y=a.length===1?void 0:a[a.length-1];return D({chain:e,symbol:t})||!!y},Bt=(n)=>n.filter(({chain:e,value:t,symbol:a})=>{const y=`${e}.${a}`;return!ne.test(y)&&ee(y)&&t!==\"0\"});function Et([n,e,t,a,y]){return`m/${n}'/${e}'/${t}'/${a}${typeof y!==\"number\"?\"\":`/${y}`}`}function vt({chain:n,index:e,addressIndex:t=0,type:a}){if(N.includes(n)){if(a===\"legacy\")return[44,60,0,e];if(a===\"ledgerLive\")return[44,60,e,0,t];return jn(U[n],e)}const y=n===\"LTC\"?2:0;switch(a){case\"nativeSegwitMiddleAccount\":return[84,y,e,0,t];case\"segwit\":return[49,y,0,0,e];case\"legacy\":return[44,y,0,0,e];default:return jn(U[n],e)}}function Ut(n){const[e,t,a]=n.split(\"/\").map((y)=>Number.parseInt(y,10));switch(t){case 44:return\"legacy\";case 49:return\"p2sh\";default:return\"bech32\"}}var jn=(n,e)=>{return[...n.slice(0,n.length-1),e]};function te({liquidityUnits:n,poolUnits:e,runeDepth:t}){const a=$(n),y=$(e),s=$(t),d=a.mul(s),T=y.mul(y).mul(2),i=y.mul(a).mul(2),x=a.mul(a),O=y.mul(y).mul(y);return d.mul(T.sub(i).add(x)).div(O)}function ae({liquidityUnits:n,poolUnits:e,assetDepth:t}){const a=$(n),y=$(e),s=$(t),d=a.mul(s),T=y.mul(y).mul(2),i=y.mul(a).mul(2),x=a.mul(a),O=d.mul(T.sub(i).add(x)),f=y.mul(y).mul(y);return O.div(f)}function na({percent:n,runeDepth:e,liquidityUnits:t,poolUnits:a}){return te({runeDepth:e,liquidityUnits:t,poolUnits:a}).mul(n)}function ea({percent:n,assetDepth:e,liquidityUnits:t,poolUnits:a}){return ae({assetDepth:e,liquidityUnits:t,poolUnits:a}).mul(n)}var $=function(n){return j.fromBigInt(BigInt(n),8)};function pe({liquidityUnits:n,poolUnits:e,runeDepth:t,assetDepth:a}){return{assetAmount:$(a).mul(n).div(e),runeAmount:$(t).mul(n).div(e)}}function ta({liquidityUnits:n,poolUnits:e,runeDepth:t,assetDepth:a,percent:y}){return Object.fromEntries(Object.entries(pe({liquidityUnits:n,poolUnits:e,runeDepth:t,assetDepth:a})).map(([s,d])=>[s,d.mul(y)]))}function aa({runeDepth:n,poolUnits:e,assetDepth:t,liquidityUnits:a,runeAmount:y,assetAmount:s}){const d=new j({value:n,decimal:8}),T=new j({value:t,decimal:8}),i=new j({value:e,decimal:8}),x=new j({value:y,decimal:8}),O=new j({value:s,decimal:8}),f=x.mul(T),X=O.mul(d),A=x.mul(O),q=d.mul(T),h=i.mul(f.add(X.add(A.mul(2)))),H=f.add(X.add(q.mul(2))),Z=h.div(H),g=$(a).add(Z);if(Z.getBaseValue(\"number\")===0)return g.div(i).getBaseValue(\"number\");const r=i.add(g);return g.div(r).getBaseValue(\"number\")}function pa({runeAmount:n,assetAmount:e,runeDepth:t,assetDepth:a}){if(n===\"0\"||e===\"0\"||t===\"0\"||a===\"0\")return 0;const y=$(t),s=$(a),d=$(e),T=$(n),i=d.mul(y).sub(s.mul(T)),x=s.mul(T).add(y.mul(s));return Math.abs(i.div(x).getBaseValue(\"number\"))}var L=function(n,{affiliateAddress:e,affiliateBasisPoints:t}){const a=e?`:${e}:${t||0}`:\"\";return`${n}${a}`},ye=function({chain:n,symbol:e}){switch(n){case\"BTC\":case\"DOGE\":case\"LTC\":return n.slice(0,1).toLowerCase();case\"BCH\":return\"c\";default:return`${n}.${e}`}};function se({type:n,address:e}){return`${n}:${e}`}function de({address:n,unbondAmount:e}){return`${\"UNBOND\"}:${n}:${e}`}function re({name:n,chain:e,address:t,owner:a}){const y=`${\"~\"}:${n}:${e}:${t}`,s=a?`:${a}`:\"\";return`${y}${s}`}function ua({name:n,chain:e,asset:t,payout:a,owner:y}){const s=[n,e,a,y,t].join(\":\");return`${\"~\"}:${s}`}function ue(n,{asset:e,address:t,minAmount:a,...y}){const s=`${n}:${e}:${t}`,d=a?`:${a}`:\"\";return L(`${s}${d}`,y)}function Te({chain:n,symbol:e,...t}){return L(`${\"+\"}:${n}/${e}`,t)}function ie({chain:n,symbol:e,address:t,...a}){const y=ye({chain:n,symbol:e}),s=t?`:${t}`:\"\";return L(`${\"+\"}:${y}${s}`,a)}function xe({chain:n,symbol:e,basisPoints:t,...a}){return L(`${\"-\"}:${n}/${e}:${t}`,a)}function oe({chain:n,symbol:e,ticker:t,basisPoints:a,targetAsset:y,...s}){const d=n===\"ETH\"&&t!==\"ETH\"?`${t}-${e.slice(-3)}`:e,T=y?`:${y}`:\"\";return L(`${\"-\"}:${n}.${d}:${a}${T}`,s)}var Ta=(n,e)=>{switch(n){case\"LEAVE\":case\"BOND\":{const{address:t}=e;return se({type:n,address:t})}case\"UNBOND\":{const{address:t,unbondAmount:a}=e;return de({address:t,unbondAmount:a})}case\"~\":return re(e);case\"$+\":case\"$-\":return ue(n,e);case\"+\":{const{chain:t,symbol:a,address:y,singleSide:s}=e;if(s)return Te({chain:t,symbol:a});return ie({chain:t,symbol:a,address:y})}case\"-\":{const{chain:t,ticker:a,symbol:y,basisPoints:s,targetAssetString:d,singleSide:T}=e;if(T)return xe({chain:t,symbol:y,basisPoints:s});return oe({chain:t,ticker:a,symbol:y,basisPoints:s,targetAsset:d})}default:throw new R({errorKey:\"helpers_invalid_memo_type\",info:{memoType:n}})}};function Ra(){const n=[];function e(a){if(n.map((y)=>y.info.uuid).includes(a.detail.info.uuid))return;n.push(a.detail)}window.addEventListener(\"eip6963:announceProvider\",e),window.dispatchEvent(new Event(\"eip6963:requestProvider\"));function t(){window.removeEventListener(\"eip6963:announceProvider\",e)}return{providers:n,removeEIP6963EventListener:t}}var me=[\"approve\",\"approvedAmount\",\"call\",\"sendTransaction\",\"transfer\",\"isApproved\",\"approvedAmount\",\"EIP1193SendTransaction\",\"getFeeData\",\"broadcastTransaction\",\"estimateCall\",\"estimateGasLimit\",\"estimateGasPrices\",\"createContractTxObject\"],fe=(n,e,t)=>async(...a)=>{try{await Ce(e,t)}catch(y){throw new R({errorKey:\"helpers_failed_to_switch_network\",info:{error:y}})}return n(...a)},Gn=({provider:n,params:e,method:t})=>{if(!n?.send)throw new R(\"helpers_not_found_provider\");const a=e?Array.isArray(e)?e:[e]:[];return n.send(t,a)},ma=({toolbox:n,chainId:e,provider:t=window.ethereum})=>{const a=me.reduce((y,s)=>{if(!n[s])return y;const d=n[s];if(typeof d!==\"function\")return y;return{...y,[s]:fe(d,t,e)}},{});return{...n,...a}},fa=(n,e)=>Gn({provider:n,method:\"wallet_addEthereumChain\",params:[e]}),Ce=(n,e=\"0x1\")=>Gn({provider:n,method:\"wallet_switchEthereumChain\",params:[{chainId:e}]}),Ca=(n)=>{window.ethereum?.on(\"accountsChanged\",()=>n()),window.xfi?.ethereum.on(\"accountsChanged\",()=>n())},la=()=>{const{isTrust:n,isBraveWallet:e,__XDEFI:t,overrideIsMetaMask:a,selectedProvider:y}=window?.ethereum||{};if(n)return\"TRUSTWALLET_WEB\";if(e)return\"BRAVE\";if(a&&y?.isCoinbaseWallet)return\"COINBASE_WEB\";if(t)\"XDEFI\";return\"METAMASK\"},Ha=(n)=>{return le().includes(n)},le=()=>{const n=window?.ethereum&&!window.ethereum?.isBraveWallet,e=window?.xfi||window?.ethereum?.__XDEFI,t=window?.ethereum?.isBraveWallet,a=window?.ethereum?.isTrust||window?.trustwallet,y=window?.ethereum?.overrideIsMetaMask&&window?.ethereum?.selectedProvider?.isCoinbaseWallet||window?.coinbaseWalletExtension,s=[];if(n)s.push(\"METAMASK\");if(e)s.push(\"XDEFI\");if(t)s.push(\"BRAVE\");if(a)s.push(\"TRUSTWALLET_WEB\");if(y)s.push(\"COINBASE_WEB\");if(He())s.push(\"OKX_MOBILE\");return s},He=()=>{const n=navigator.userAgent,e=/iphone|ipad|ipod|ios/i.test(n),t=/android|XiaoMi|MiuiBrowser/i.test(n),a=e||t,y=/OKApp/i.test(n);return a&&y},Oa=()=>typeof window.ethereum!==\"undefined\";class j extends G{eq(n){return this.eqValue(n)}static fromBigInt(n,e){return new j({decimal:e,value:k({value:n,bigIntDecimal:e,decimal:e})})}}export{Ht as wrapWithThrow,fe as wrapMethodWithNetworkSwitch,xn as warnOnce,_t as validateTNS,mn as validateIdentifier,Ce as switchEVMWalletNetwork,qt as setRequestClientConfig,ma as prepareNetworkSwitch,He as okxMobileEnabled,le as listWeb3EVMWallets,Oa as isWeb3Detected,D as isGasAsset,Ha as isDetected,Ut as getWalletFormatFor,Ct as getTHORNameCost,ta as getSymmetricWithdraw,pe as getSymmetricPoolShare,Yt as getMinAmountByChain,oe as getMemoForWithdraw,de as getMemoForUnbond,xe as getMemoForSaverWithdraw,Te as getMemoForSaverDeposit,re as getMemoForNameRegister,ua as getMemoForNamePreferredAssetRegister,ue as getMemoForLoan,se as getMemoForLeaveAndBond,ie as getMemoForDeposit,Ta as getMemoFor,lt as getMAYANameCost,pa as getLiquiditySlippage,Vt as getGasAsset,aa as getEstimatedPoolShare,la as getETHDefaultWallet,Ra as getEIP6963Wallets,vt as getDerivationPathFor,Hn as getDecimal,Rn as getCommonAssetInfo,Rt as getChainIdentifier,na as getAsymmetricRuneWithdrawAmount,te as getAsymmetricRuneShare,ea as getAsymmetricAssetWithdrawAmount,ae as getAsymmetricAssetShare,On as getAssetType,k as formatBigIntToSafeValue,Wt as findAssetBy,Bt as filterAssets,Oe as erc20ABI,Et as derivationPathToString,Pn as defaultRequestHeaders,Ft as assetFromString,fa as addEVMWalletNetwork,Ca as addAccountsChangedCallback,pn as WarningCodeEnum,tn as WalletOption,be as UTXOChains,Le as TCSupportedChains,je as TCEthereumVaultAbi,ze as TCBscDepositABI,Ge as TCAvalancheDepositABI,j as SwapKitNumber,R as SwapKitError,Me as SubstrateChains,Ve as SWAP_OUT,Ke as SWAP_IN,un as RouteQuoteWarningSchema,Se as RouteQuoteSchema,rn as RouteQuoteMetadataSchema,An as RouteQuoteMetadataAssetSchema,qn as RouteQuoteLegSchema,Ue as RouteLegWithoutAddressesSchema,Ln as RouteLegSchema,I as RequestClient,P as RPCUrl,ce as QuoteResponseSchema,Pe as QuoteRequestSchema,Jn as QuoteMode,z as ProviderName,U as NetworkDerivationPath,an as MemoType,$e as MayaEthereumVaultAbi,_e as MayaArbitrumVaultAbi,Ae as MAYASupportedChains,hn as LedgerErrorCode,dn as FeesSchema,sn as FeeTypeEnum,Mn as FeeOption,E as ExplorerUrl,V as EstimatedTimeSchema,yn as EVMTransactionDetailsSchema,Yn as EVMTransactionDetailsParamsSchema,N as EVMChains,kn as DerivationPath,Ye as CosmosChains,Zn as ContractAddress,ln as CommonAssetStrings,v as ChainToRPC,qe as ChainToHexChainId,ge as ChainToExplorerUrl,en as ChainToChainId,he as ChainIdToChain,Q as ChainId,_ as Chain,G as BigIntArithmetics,w as BaseDecimal,l as AssetValue,bn as ApproveMode,Ne as AGG_SWAP};\n\n//# debugId=D1D2AB662E57036464756E2164756E21\n","import{mnemonicToSeedSync as GJ} from\"@scure/bip39\";import{AccountLayout as VJ,TOKEN_PROGRAM_ID as jJ,createAssociatedTokenAccountInstruction as zJ,createTransferCheckedInstruction as UJ,getAccount as TJ,getAssociatedTokenAddress as c0,getMint as MJ} from\"@solana/spl-token\";import{Connection as OJ,Keypair as WJ,PublicKey as Y8,SystemProgram as kJ,Transaction as m0,sendAndConfirmTransaction as CJ} from\"@solana/web3.js\";import{AssetValue as d0,Chain as l0,DerivationPath as SJ,RPCUrl as DJ,SwapKitError as u0,SwapKitNumber as HJ} from\"@swapkit/helpers\";var N0=function($){if(!Number.isSafeInteger($)||$<0)throw new Error(`positive integer expected, not ${$}`)};function J$($){return $ instanceof Uint8Array||$!=null&&typeof $===\"object\"&&$.constructor.name===\"Uint8Array\"}var d=function($,...J){if(!J$($))throw new Error(\"Uint8Array expected\");if(J.length>0&&!J.includes($.length))throw new Error(`Uint8Array expected of length ${J}, not of length=${$.length}`)},X0=function($){if(typeof $!==\"function\"||typeof $.create!==\"function\")throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");N0($.outputLen),N0($.blockLen)},K8=function($,J=!0){if($.destroyed)throw new Error(\"Hash instance has been destroyed\");if(J&&$.finished)throw new Error(\"Hash#digest() has already been called\")},Z0=function($,J){d($);const Q=J.outputLen;if($.length<Q)throw new Error(`digestInto() expects output buffer of length at least ${Q}`)};var w8=typeof globalThis===\"object\"&&\"crypto\"in globalThis?globalThis.crypto:void 0;function F8($){d($);let J=\"\";for(let Q=0;Q<$.length;Q++)J+=Q$[$[Q]];return J}var Y0=function($){if($>=t._0&&$<=t._9)return $-t._0;if($>=t._A&&$<=t._F)return $-(t._A-10);if($>=t._a&&$<=t._f)return $-(t._a-10);return};function I0($){if(typeof $!==\"string\")throw new Error(\"hex string expected, got \"+typeof $);const J=$.length,Q=J/2;if(J%2)throw new Error(\"padded hex string expected, got unpadded hex of length \"+J);const q=new Uint8Array(Q);for(let X=0,N=0;X<Q;X++,N+=2){const I=Y0($.charCodeAt(N)),K=Y0($.charCodeAt(N+1));if(I===void 0||K===void 0){const Y=$[N]+$[N+1];throw new Error('hex string expected, got non-hex character \"'+Y+'\" at index '+N)}q[X]=I*16+K}return q}function A8($){if(typeof $!==\"string\")throw new Error(`utf8ToBytes expected string, got ${typeof $}`);return new Uint8Array((new TextEncoder()).encode($))}function M8($){if(typeof $===\"string\")$=A8($);return d($),$}function L8(...$){let J=0;for(let q=0;q<$.length;q++){const X=$[q];d(X),J+=X.length}const Q=new Uint8Array(J);for(let q=0,X=0;q<$.length;q++){const N=$[q];Q.set(N,X),X+=N.length}return Q}function G8($){const J=(q)=>$().update(M8(q)).digest(),Q=$();return J.outputLen=Q.outputLen,J.blockLen=Q.blockLen,J.create=()=>$(),J}function K0($=32){if(w8&&typeof w8.getRandomValues===\"function\")return w8.getRandomValues(new Uint8Array($));throw new Error(\"crypto.getRandomValues must be defined\")}/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */var N8=($)=>new DataView($.buffer,$.byteOffset,$.byteLength),l=($,J)=>$<<32-J|$>>>J,T8=($,J)=>$<<J|$>>>32-J>>>0,xJ=new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68;var Q$=Array.from({length:256},($,J)=>J.toString(16).padStart(2,\"0\")),t={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};class O8{clone(){return this._cloneInto()}}var _J={}.toString;var q$=function($,J,Q,q){if(typeof $.setBigUint64===\"function\")return $.setBigUint64(J,Q,q);const X=BigInt(32),N=BigInt(4294967295),I=Number(Q>>X&N),K=Number(Q&N),Y=q?4:0,V=q?0:4;$.setUint32(J+Y,I,q),$.setUint32(J+V,K,q)},G0=($,J,Q)=>$&J^~$&Q,V0=($,J,Q)=>$&J^$&Q^J&Q;class X8 extends O8{constructor($,J,Q,q){super();this.blockLen=$,this.outputLen=J,this.padOffset=Q,this.isLE=q,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array($),this.view=N8(this.buffer)}update($){K8(this);const{view:J,buffer:Q,blockLen:q}=this;$=M8($);const X=$.length;for(let N=0;N<X;){const I=Math.min(q-this.pos,X-N);if(I===q){const K=N8($);for(;q<=X-N;N+=q)this.process(K,N);continue}if(Q.set($.subarray(N,N+I),this.pos),this.pos+=I,N+=I,this.pos===q)this.process(J,0),this.pos=0}return this.length+=$.length,this.roundClean(),this}digestInto($){K8(this),Z0($,this),this.finished=!0;const{buffer:J,view:Q,blockLen:q,isLE:X}=this;let{pos:N}=this;if(J[N++]=128,this.buffer.subarray(N).fill(0),this.padOffset>q-N)this.process(Q,0),N=0;for(let Z=N;Z<q;Z++)J[Z]=0;q$(Q,q-8,BigInt(this.length*8),X),this.process(Q,0);const I=N8($),K=this.outputLen;if(K%4)throw new Error(\"_sha2: outputLen should be aligned to 32bit\");const Y=K/4,V=this.get();if(Y>V.length)throw new Error(\"_sha2: outputLen bigger than state\");for(let Z=0;Z<Y;Z++)I.setUint32(4*Z,V[Z],X)}digest(){const{buffer:$,outputLen:J}=this;this.digestInto($);const Q=$.slice(0,J);return this.destroy(),Q}_cloneInto($){$||($=new this.constructor),$.set(...this.get());const{blockLen:J,buffer:Q,length:q,finished:X,destroyed:N,pos:I}=this;if($.length=q,$.pos=I,$.finished=X,$.destroyed=N,q%J)$.buffer.set(Q);return $}}var j0=function($,J=!1){if(J)return{h:Number($&R8),l:Number($>>b8&R8)};return{h:Number($>>b8&R8)|0,l:Number($&R8)|0}},N$=function($,J=!1){let Q=new Uint32Array($.length),q=new Uint32Array($.length);for(let X=0;X<$.length;X++){const{h:N,l:I}=j0($[X],J);[Q[X],q[X]]=[N,I]}return[Q,q]},W$=function($,J,Q,q){const X=(J>>>0)+(q>>>0);return{h:$+Q+(X/4294967296|0)|0,l:X|0}},R8=BigInt(4294967295),b8=BigInt(32),X$=($,J)=>BigInt($>>>0)<<b8|BigInt(J>>>0),Z$=($,J,Q)=>$>>>Q,Y$=($,J,Q)=>$<<32-Q|J>>>Q,I$=($,J,Q)=>$>>>Q|J<<32-Q,K$=($,J,Q)=>$<<32-Q|J>>>Q,G$=($,J,Q)=>$<<64-Q|J>>>Q-32,V$=($,J,Q)=>$>>>Q-32|J<<64-Q,j$=($,J)=>J,z$=($,J)=>$,U$=($,J,Q)=>$<<Q|J>>>32-Q,T$=($,J,Q)=>J<<Q|$>>>32-Q,M$=($,J,Q)=>J<<Q-32|$>>>64-Q,O$=($,J,Q)=>$<<Q-32|J>>>64-Q,k$=($,J,Q)=>($>>>0)+(J>>>0)+(Q>>>0),C$=($,J,Q,q)=>J+Q+q+($/4294967296|0)|0,S$=($,J,Q,q)=>($>>>0)+(J>>>0)+(Q>>>0)+(q>>>0),D$=($,J,Q,q,X)=>J+Q+q+X+($/4294967296|0)|0,H$=($,J,Q,q,X)=>($>>>0)+(J>>>0)+(Q>>>0)+(q>>>0)+(X>>>0),w$=($,J,Q,q,X,N)=>J+Q+q+X+N+($/4294967296|0)|0;var A$={fromBig:j0,split:N$,toBig:X$,shrSH:Z$,shrSL:Y$,rotrSH:I$,rotrSL:K$,rotrBH:G$,rotrBL:V$,rotr32H:j$,rotr32L:z$,rotlSH:U$,rotlSL:T$,rotlBH:M$,rotlBL:O$,add:W$,add3L:k$,add3H:C$,add4L:S$,add4H:D$,add5H:w$,add5L:H$},M=A$;var[L$,R$]=(()=>M.split([\"0x428a2f98d728ae22\",\"0x7137449123ef65cd\",\"0xb5c0fbcfec4d3b2f\",\"0xe9b5dba58189dbbc\",\"0x3956c25bf348b538\",\"0x59f111f1b605d019\",\"0x923f82a4af194f9b\",\"0xab1c5ed5da6d8118\",\"0xd807aa98a3030242\",\"0x12835b0145706fbe\",\"0x243185be4ee4b28c\",\"0x550c7dc3d5ffb4e2\",\"0x72be5d74f27b896f\",\"0x80deb1fe3b1696b1\",\"0x9bdc06a725c71235\",\"0xc19bf174cf692694\",\"0xe49b69c19ef14ad2\",\"0xefbe4786384f25e3\",\"0x0fc19dc68b8cd5b5\",\"0x240ca1cc77ac9c65\",\"0x2de92c6f592b0275\",\"0x4a7484aa6ea6e483\",\"0x5cb0a9dcbd41fbd4\",\"0x76f988da831153b5\",\"0x983e5152ee66dfab\",\"0xa831c66d2db43210\",\"0xb00327c898fb213f\",\"0xbf597fc7beef0ee4\",\"0xc6e00bf33da88fc2\",\"0xd5a79147930aa725\",\"0x06ca6351e003826f\",\"0x142929670a0e6e70\",\"0x27b70a8546d22ffc\",\"0x2e1b21385c26c926\",\"0x4d2c6dfc5ac42aed\",\"0x53380d139d95b3df\",\"0x650a73548baf63de\",\"0x766a0abb3c77b2a8\",\"0x81c2c92e47edaee6\",\"0x92722c851482353b\",\"0xa2bfe8a14cf10364\",\"0xa81a664bbc423001\",\"0xc24b8b70d0f89791\",\"0xc76c51a30654be30\",\"0xd192e819d6ef5218\",\"0xd69906245565a910\",\"0xf40e35855771202a\",\"0x106aa07032bbd1b8\",\"0x19a4c116b8d2d0c8\",\"0x1e376c085141ab53\",\"0x2748774cdf8eeb99\",\"0x34b0bcb5e19b48a8\",\"0x391c0cb3c5c95a63\",\"0x4ed8aa4ae3418acb\",\"0x5b9cca4f7763e373\",\"0x682e6ff3d6b2b8a3\",\"0x748f82ee5defb2fc\",\"0x78a5636f43172f60\",\"0x84c87814a1f0ab72\",\"0x8cc702081a6439ec\",\"0x90befffa23631e28\",\"0xa4506cebde82bde9\",\"0xbef9a3f7b2c67915\",\"0xc67178f2e372532b\",\"0xca273eceea26619c\",\"0xd186b8c721c0c207\",\"0xeada7dd6cde0eb1e\",\"0xf57d4f7fee6ed178\",\"0x06f067aa72176fba\",\"0x0a637dc5a2c898a6\",\"0x113f9804bef90dae\",\"0x1b710b35131c471b\",\"0x28db77f523047d84\",\"0x32caab7b40c72493\",\"0x3c9ebe0a15c9bebc\",\"0x431d67c49c100d4c\",\"0x4cc5d4becb3e42b6\",\"0x597f299cfc657e2a\",\"0x5fcb6fab3ad6faec\",\"0x6c44198c4a475817\"].map(($)=>BigInt($))))(),e=new Uint32Array(80),$8=new Uint32Array(80);class z0 extends X8{constructor(){super(128,64,16,!1);this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:$,Al:J,Bh:Q,Bl:q,Ch:X,Cl:N,Dh:I,Dl:K,Eh:Y,El:V,Fh:Z,Fl:U,Gh:z,Gl:S,Hh:C,Hl:A}=this;return[$,J,Q,q,X,N,I,K,Y,V,Z,U,z,S,C,A]}set($,J,Q,q,X,N,I,K,Y,V,Z,U,z,S,C,A){this.Ah=$|0,this.Al=J|0,this.Bh=Q|0,this.Bl=q|0,this.Ch=X|0,this.Cl=N|0,this.Dh=I|0,this.Dl=K|0,this.Eh=Y|0,this.El=V|0,this.Fh=Z|0,this.Fl=U|0,this.Gh=z|0,this.Gl=S|0,this.Hh=C|0,this.Hl=A|0}process($,J){for(let W=0;W<16;W++,J+=4)e[W]=$.getUint32(J),$8[W]=$.getUint32(J+=4);for(let W=16;W<80;W++){const x=e[W-15]|0,R=$8[W-15]|0,O=M.rotrSH(x,R,1)^M.rotrSH(x,R,8)^M.shrSH(x,R,7),r=M.rotrSL(x,R,1)^M.rotrSL(x,R,8)^M.shrSL(x,R,7),u=e[W-2]|0,y=$8[W-2]|0,q8=M.rotrSH(u,y,19)^M.rotrBH(u,y,61)^M.shrSH(u,y,6),I8=M.rotrSL(u,y,19)^M.rotrBL(u,y,61)^M.shrSL(u,y,6),a=M.add4L(r,I8,$8[W-7],$8[W-16]),z8=M.add4H(a,O,q8,e[W-7],e[W-16]);e[W]=z8|0,$8[W]=a|0}let{Ah:Q,Al:q,Bh:X,Bl:N,Ch:I,Cl:K,Dh:Y,Dl:V,Eh:Z,El:U,Fh:z,Fl:S,Gh:C,Gl:A,Hh:g,Hl:b}=this;for(let W=0;W<80;W++){const x=M.rotrSH(Z,U,14)^M.rotrSH(Z,U,18)^M.rotrBH(Z,U,41),R=M.rotrSL(Z,U,14)^M.rotrSL(Z,U,18)^M.rotrBL(Z,U,41),O=Z&z^~Z&C,r=U&S^~U&A,u=M.add5L(b,R,r,R$[W],$8[W]),y=M.add5H(u,g,x,O,L$[W],e[W]),q8=u|0,I8=M.rotrSH(Q,q,28)^M.rotrBH(Q,q,34)^M.rotrBH(Q,q,39),a=M.rotrSL(Q,q,28)^M.rotrBL(Q,q,34)^M.rotrBL(Q,q,39),z8=Q&X^Q&I^X&I,U8=q&N^q&K^N&K;g=C|0,b=A|0,C=z|0,A=S|0,z=Z|0,S=U|0,{h:Z,l:U}=M.add(Y|0,V|0,y|0,q8|0),Y=I|0,V=K|0,I=X|0,K=N|0,X=Q|0,N=q|0;const S8=M.add3L(q8,a,U8);Q=M.add3H(S8,y,I8,z8),q=S8|0}({h:Q,l:q}=M.add(this.Ah|0,this.Al|0,Q|0,q|0)),{h:X,l:N}=M.add(this.Bh|0,this.Bl|0,X|0,N|0),{h:I,l:K}=M.add(this.Ch|0,this.Cl|0,I|0,K|0),{h:Y,l:V}=M.add(this.Dh|0,this.Dl|0,Y|0,V|0),{h:Z,l:U}=M.add(this.Eh|0,this.El|0,Z|0,U|0),{h:z,l:S}=M.add(this.Fh|0,this.Fl|0,z|0,S|0),{h:C,l:A}=M.add(this.Gh|0,this.Gl|0,C|0,A|0),{h:g,l:b}=M.add(this.Hh|0,this.Hl|0,g|0,b|0),this.set(Q,q,X,N,I,K,Y,V,Z,U,z,S,C,A,g,b)}roundClean(){e.fill(0),$8.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}var W8=G8(()=>new z0);function x8($){return $ instanceof Uint8Array||$!=null&&typeof $===\"object\"&&$.constructor.name===\"Uint8Array\"}function _8($){if(!x8($))throw new Error(\"Uint8Array expected\")}function B8($){_8($);let J=\"\";for(let Q=0;Q<$.length;Q++)J+=E$[$[Q]];return J}function T0($){if(typeof $!==\"string\")throw new Error(\"hex string expected, got \"+typeof $);return BigInt($===\"\"?\"0\":`0x${$}`)}var U0=function($){if($>=s._0&&$<=s._9)return $-s._0;if($>=s._A&&$<=s._F)return $-(s._A-10);if($>=s._a&&$<=s._f)return $-(s._a-10);return};function M0($){if(typeof $!==\"string\")throw new Error(\"hex string expected, got \"+typeof $);const J=$.length,Q=J/2;if(J%2)throw new Error(\"padded hex string expected, got unpadded hex of length \"+J);const q=new Uint8Array(Q);for(let X=0,N=0;X<Q;X++,N+=2){const I=U0($.charCodeAt(N)),K=U0($.charCodeAt(N+1));if(I===void 0||K===void 0){const Y=$[N]+$[N+1];throw new Error('hex string expected, got non-hex character \"'+Y+'\" at index '+N)}q[X]=I*16+K}return q}function O0($){return T0(B8($))}function V8($){return _8($),T0(B8(Uint8Array.from($).reverse()))}function y8($,J){return M0($.toString(16).padStart(J*2,\"0\"))}function k8($,J){return y8($,J).reverse()}function i($,J,Q){let q;if(typeof J===\"string\")try{q=M0(J)}catch(N){throw new Error(`${$} must be valid hex string, got \"${J}\". Cause: ${N}`)}else if(x8(J))q=Uint8Array.from(J);else throw new Error(`${$} must be hex string or Uint8Array`);const X=q.length;if(typeof Q===\"number\"&&X!==Q)throw new Error(`${$} expected ${Q} bytes, got ${X}`);return q}function c8(...$){let J=0;for(let q=0;q<$.length;q++){const X=$[q];_8(X),J+=X.length}const Q=new Uint8Array(J);for(let q=0,X=0;q<$.length;q++){const N=$[q];Q.set(N,X),X+=N.length}return Q}function j8($,J,Q={}){const q=(X,N,I)=>{const K=v$[N];if(typeof K!==\"function\")throw new Error(`Invalid validator \"${N}\", expected function`);const Y=$[X];if(I&&Y===void 0)return;if(!K(Y,$))throw new Error(`Invalid param ${String(X)}=${Y} (${typeof Y}), expected ${N}`)};for(let[X,N]of Object.entries(J))q(X,N,!1);for(let[X,N]of Object.entries(Q))q(X,N,!0);return $}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */var B$=BigInt(1),g$=BigInt(2),E$=Array.from({length:256},($,J)=>J.toString(16).padStart(2,\"0\")),s={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102},W0=($)=>(g$<<BigInt($-1))-B$;var v$={bigint:($)=>typeof $===\"bigint\",function:($)=>typeof $===\"function\",boolean:($)=>typeof $===\"boolean\",string:($)=>typeof $===\"string\",stringOrUint8Array:($)=>typeof $===\"string\"||x8($),isSafeInteger:($)=>Number.isSafeInteger($),array:($)=>Array.isArray($),field:($,J)=>J.Fp.isValid($),hash:($)=>typeof $===\"function\"&&Number.isSafeInteger($.outputLen)};function v($,J){const Q=$%J;return Q>=P?Q:J+Q}function x$($,J,Q){if(Q<=P||J<P)throw new Error(\"Expected power/modulo > 0\");if(Q===E)return P;let q=E;while(J>P){if(J&E)q=q*$%Q;$=$*$%Q,J>>=E}return q}function p($,J,Q){let q=$;while(J-- >P)q*=q,q%=Q;return q}function S0($,J){if($===P||J<=P)throw new Error(`invert: expected positive integers, got n=${$} mod=${J}`);let Q=v($,J),q=J,X=P,N=E,I=E,K=P;while(Q!==P){const V=q/Q,Z=q%Q,U=X-I*V,z=N-K*V;q=Q,Q=Z,X=I,N=K,I=U,K=z}if(q!==E)throw new Error(\"invert: does not exist\");return v(X,J)}function _$($){const J=($-E)/Z8;let Q,q,X;for(Q=$-E,q=0;Q%Z8===P;Q/=Z8,q++);for(X=Z8;X<$&&x$(X,J,$)!==$-E;X++);if(q===1){const I=($+E)/u8;return function K(Y,V){const Z=Y.pow(V,I);if(!Y.eql(Y.sqr(Z),V))throw new Error(\"Cannot find square root\");return Z}}const N=(Q+E)/Z8;return function I(K,Y){if(K.pow(Y,J)===K.neg(K.ONE))throw new Error(\"Cannot find square root\");let V=q,Z=K.pow(K.mul(K.ONE,X),Q),U=K.pow(Y,N),z=K.pow(Y,Q);while(!K.eql(z,K.ONE)){if(K.eql(z,K.ZERO))return K.ZERO;let S=1;for(let A=K.sqr(z);S<V;S++){if(K.eql(A,K.ONE))break;A=K.sqr(A)}const C=K.pow(Z,E<<BigInt(V-S-1));Z=K.sqr(C),U=K.mul(U,C),z=K.mul(z,Z),V=S}return U}}function y$($){if($%u8===f$){const J=($+E)/u8;return function Q(q,X){const N=q.pow(X,J);if(!q.eql(q.sqr(N),X))throw new Error(\"Cannot find square root\");return N}}if($%C0===k0){const J=($-k0)/C0;return function Q(q,X){const N=q.mul(X,Z8),I=q.pow(N,J),K=q.mul(X,I),Y=q.mul(q.mul(K,Z8),I),V=q.mul(K,q.sub(Y,q.ONE));if(!q.eql(q.sqr(V),X))throw new Error(\"Cannot find square root\");return V}}if($%b$===F$);return _$($)}function H0($){const J={ORDER:\"bigint\",MASK:\"bigint\",BYTES:\"isSafeInteger\",BITS:\"isSafeInteger\"},Q=c$.reduce((q,X)=>{return q[X]=\"function\",q},J);return j8($,Q)}function u$($,J,Q){if(Q<P)throw new Error(\"Expected power > 0\");if(Q===P)return $.ONE;if(Q===E)return J;let q=$.ONE,X=J;while(Q>P){if(Q&E)q=$.mul(q,X);X=$.sqr(X),Q>>=E}return q}function m$($,J){const Q=new Array(J.length),q=J.reduce((N,I,K)=>{if($.is0(I))return N;return Q[K]=N,$.mul(N,I)},$.ONE),X=$.inv(q);return J.reduceRight((N,I,K)=>{if($.is0(I))return N;return Q[K]=$.mul(N,Q[K]),$.mul(N,I)},X),Q}function m8($,J){const Q=J!==void 0?J:$.toString(2).length,q=Math.ceil(Q/8);return{nBitLength:Q,nByteLength:q}}function w0($,J,Q=!1,q={}){if($<=P)throw new Error(`Expected Field ORDER > 0, got ${$}`);const{nBitLength:X,nByteLength:N}=m8($,J);if(N>2048)throw new Error(\"Field lengths over 2048 bytes are not supported\");const I=y$($),K=Object.freeze({ORDER:$,BITS:X,BYTES:N,MASK:W0(X),ZERO:P,ONE:E,create:(Y)=>v(Y,$),isValid:(Y)=>{if(typeof Y!==\"bigint\")throw new Error(`Invalid field element: expected bigint, got ${typeof Y}`);return P<=Y&&Y<$},is0:(Y)=>Y===P,isOdd:(Y)=>(Y&E)===E,neg:(Y)=>v(-Y,$),eql:(Y,V)=>Y===V,sqr:(Y)=>v(Y*Y,$),add:(Y,V)=>v(Y+V,$),sub:(Y,V)=>v(Y-V,$),mul:(Y,V)=>v(Y*V,$),pow:(Y,V)=>u$(K,Y,V),div:(Y,V)=>v(Y*S0(V,$),$),sqrN:(Y)=>Y*Y,addN:(Y,V)=>Y+V,subN:(Y,V)=>Y-V,mulN:(Y,V)=>Y*V,inv:(Y)=>S0(Y,$),sqrt:q.sqrt||((Y)=>I(K,Y)),invertBatch:(Y)=>m$(K,Y),cmov:(Y,V,Z)=>Z?V:Y,toBytes:(Y)=>Q?k8(Y,N):y8(Y,N),fromBytes:(Y)=>{if(Y.length!==N)throw new Error(`Fp.fromBytes: expected ${N}, got ${Y.length}`);return Q?V8(Y):O0(Y)}});return Object.freeze(K)}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */var P=BigInt(0),E=BigInt(1),Z8=BigInt(2),f$=BigInt(3),u8=BigInt(4),k0=BigInt(5),C0=BigInt(8),F$=BigInt(9),b$=BigInt(16),D0=($,J)=>(v($,J)&E)===E,c$=[\"create\",\"isValid\",\"is0\",\"neg\",\"inv\",\"sqrt\",\"sqr\",\"eql\",\"add\",\"sub\",\"mul\",\"pow\",\"div\",\"addN\",\"subN\",\"mulN\",\"sqrN\"];function A0($,J){const Q=(X,N)=>{const I=N.negate();return X?I:N},q=(X)=>{const N=Math.ceil(J/X)+1,I=2**(X-1);return{windows:N,windowSize:I}};return{constTimeNegate:Q,unsafeLadder(X,N){let I=$.ZERO,K=X;while(N>d$){if(N&d8)I=I.add(K);K=K.double(),N>>=d8}return I},precomputeWindow(X,N){const{windows:I,windowSize:K}=q(N),Y=[];let V=X,Z=V;for(let U=0;U<I;U++){Z=V,Y.push(Z);for(let z=1;z<K;z++)Z=Z.add(V),Y.push(Z);V=Z.double()}return Y},wNAF(X,N,I){const{windows:K,windowSize:Y}=q(X);let{ZERO:V,BASE:Z}=$;const U=BigInt(2**X-1),z=2**X,S=BigInt(X);for(let C=0;C<K;C++){const A=C*Y;let g=Number(I&U);if(I>>=S,g>Y)g-=z,I+=d8;const b=A,W=A+Math.abs(g)-1,x=C%2!==0,R=g<0;if(g===0)Z=Z.add(Q(x,N[b]));else V=V.add(Q(R,N[W]))}return{p:V,f:Z}},wNAFCached(X,N,I,K){const Y=X._WINDOW_SIZE||1;let V=N.get(X);if(!V){if(V=this.precomputeWindow(X,Y),Y!==1)N.set(X,K(V))}return this.wNAF(Y,V,I)}}}function L0($){return H0($.Fp),j8($,{n:\"bigint\",h:\"bigint\",Gx:\"field\",Gy:\"field\"},{nBitLength:\"isSafeInteger\",nByteLength:\"isSafeInteger\"}),Object.freeze({...m8($.n,$.nBitLength),...$,...{p:$.Fp.ORDER}})}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */var d$=BigInt(0),d8=BigInt(1);var h$=function($){const J=L0($);return j8($,{hash:\"function\",a:\"bigint\",d:\"bigint\",randomBytes:\"function\"},{adjustScalarBytes:\"function\",domain:\"function\",uvRatio:\"function\",mapToCurve:\"function\"}),Object.freeze({...J})};function R0($){const J=h$($),{Fp:Q,n:q,prehash:X,hash:N,randomBytes:I,nByteLength:K,h:Y}=J,V=g8<<BigInt(K*8)-c,Z=Q.create,U=J.uvRatio||((G,j)=>{try{return{isValid:!0,value:Q.sqrt(G*Q.inv(j))}}catch(T){return{isValid:!1,value:h}}}),z=J.adjustScalarBytes||((G)=>G),S=J.domain||((G,j,T)=>{if(j.length||T)throw new Error(\"Contexts/pre-hash are not supported\");return G}),C=(G)=>typeof G===\"bigint\"&&h<G,A=(G,j)=>C(G)&&C(j)&&G<j,g=(G)=>G===h||A(G,V);function b(G,j){if(A(G,j))return G;throw new Error(`Expected valid scalar < ${j}, got ${typeof G} ${G}`)}function W(G){return G===h?G:b(G,q)}const x=new Map;function R(G){if(!(G instanceof O))throw new Error(\"ExtendedPoint expected\")}class O{constructor(G,j,T,k){if(this.ex=G,this.ey=j,this.ez=T,this.et=k,!g(G))throw new Error(\"x required\");if(!g(j))throw new Error(\"y required\");if(!g(T))throw new Error(\"z required\");if(!g(k))throw new Error(\"t required\")}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static fromAffine(G){if(G instanceof O)throw new Error(\"extended point not allowed\");const{x:j,y:T}=G||{};if(!g(j)||!g(T))throw new Error(\"invalid affine point\");return new O(j,T,c,Z(j*T))}static normalizeZ(G){const j=Q.invertBatch(G.map((T)=>T.ez));return G.map((T,k)=>T.toAffine(j[k])).map(O.fromAffine)}_setWindowSize(G){this._WINDOW_SIZE=G,x.delete(this)}assertValidity(){const{a:G,d:j}=J;if(this.is0())throw new Error(\"bad point: ZERO\");const{ex:T,ey:k,ez:H,et:L}=this,w=Z(T*T),D=Z(k*k),B=Z(H*H),f=Z(B*B),F=Z(w*G),m=Z(B*Z(F+D)),_=Z(f+Z(j*Z(w*D)));if(m!==_)throw new Error(\"bad point: equation left != right (1)\");const n=Z(T*k),o=Z(H*L);if(n!==o)throw new Error(\"bad point: equation left != right (2)\")}equals(G){R(G);const{ex:j,ey:T,ez:k}=this,{ex:H,ey:L,ez:w}=G,D=Z(j*w),B=Z(H*k),f=Z(T*w),F=Z(L*k);return D===B&&f===F}is0(){return this.equals(O.ZERO)}negate(){return new O(Z(-this.ex),this.ey,this.ez,Z(-this.et))}double(){const{a:G}=J,{ex:j,ey:T,ez:k}=this,H=Z(j*j),L=Z(T*T),w=Z(g8*Z(k*k)),D=Z(G*H),B=j+T,f=Z(Z(B*B)-H-L),F=D+L,m=F-w,_=D-L,n=Z(f*m),o=Z(F*_),D8=Z(f*_),H8=Z(m*F);return new O(n,o,H8,D8)}add(G){R(G);const{a:j,d:T}=J,{ex:k,ey:H,ez:L,et:w}=this,{ex:D,ey:B,ez:f,et:F}=G;if(j===BigInt(-1)){const t8=Z((H-k)*(B+D)),s8=Z((H+k)*(B-D)),f8=Z(s8-t8);if(f8===h)return this.double();const e8=Z(L*g8*F),$0=Z(w*g8*f),J0=$0+e8,Q0=s8+t8,q0=$0-e8,t0=Z(J0*f8),s0=Z(Q0*q0),e0=Z(J0*q0),$$=Z(f8*Q0);return new O(t0,s0,$$,e0)}const m=Z(k*D),_=Z(H*B),n=Z(w*T*F),o=Z(L*f),D8=Z((k+H)*(D+B)-m-_),H8=o-n,n8=o+n,o8=Z(_-j*m),r0=Z(D8*H8),a0=Z(n8*o8),n0=Z(D8*o8),o0=Z(H8*n8);return new O(r0,a0,o0,n0)}subtract(G){return this.add(G.negate())}wNAF(G){return y.wNAFCached(this,x,G,O.normalizeZ)}multiply(G){const{p:j,f:T}=this.wNAF(b(G,q));return O.normalizeZ([j,T])[0]}multiplyUnsafe(G){let j=W(G);if(j===h)return u;if(this.equals(u)||j===c)return this;if(this.equals(r))return this.wNAF(j).p;return y.unsafeLadder(this,j)}isSmallOrder(){return this.multiplyUnsafe(Y).is0()}isTorsionFree(){return y.unsafeLadder(this,q).is0()}toAffine(G){const{ex:j,ey:T,ez:k}=this,H=this.is0();if(G==null)G=H?l$:Q.inv(k);const L=Z(j*G),w=Z(T*G),D=Z(k*G);if(H)return{x:h,y:c};if(D!==c)throw new Error(\"invZ was invalid\");return{x:L,y:w}}clearCofactor(){const{h:G}=J;if(G===c)return this;return this.multiplyUnsafe(G)}static fromHex(G,j=!1){const{d:T,a:k}=J,H=Q.BYTES;G=i(\"pointHex\",G,H);const L=G.slice(),w=G[H-1];L[H-1]=w&-129;const D=V8(L);if(D===h);else if(j)b(D,V);else b(D,Q.ORDER);const B=Z(D*D),f=Z(B-c),F=Z(T*B-k);let{isValid:m,value:_}=U(f,F);if(!m)throw new Error(\"Point.fromHex: invalid y coordinate\");const n=(_&c)===c,o=(w&128)!==0;if(!j&&_===h&&o)throw new Error(\"Point.fromHex: x=0 and x_0=1\");if(o!==n)_=Z(-_);return O.fromAffine({x:_,y:D})}static fromPrivateKey(G){return a(G).point}toRawBytes(){const{x:G,y:j}=this.toAffine(),T=k8(j,Q.BYTES);return T[T.length-1]|=G&c?128:0,T}toHex(){return B8(this.toRawBytes())}}O.BASE=new O(J.Gx,J.Gy,c,Z(J.Gx*J.Gy)),O.ZERO=new O(h,c,c,h);const{BASE:r,ZERO:u}=O,y=A0(O,K*8);function q8(G){return v(G,q)}function I8(G){return q8(V8(G))}function a(G){const j=K;G=i(\"private key\",G,j);const T=i(\"hashed private key\",N(G),2*j),k=z(T.slice(0,j)),H=T.slice(j,2*j),L=I8(k),w=r.multiply(L),D=w.toRawBytes();return{head:k,prefix:H,scalar:L,point:w,pointBytes:D}}function z8(G){return a(G).pointBytes}function U8(G=new Uint8Array,...j){const T=c8(...j);return I8(N(S(T,i(\"context\",G),!!X)))}function S8(G,j,T={}){if(G=i(\"message\",G),X)G=X(G);const{prefix:k,scalar:H,pointBytes:L}=a(j),w=U8(T.context,k,G),D=r.multiply(w).toRawBytes(),B=U8(T.context,D,L,G),f=q8(w+B*H);W(f);const F=c8(D,k8(f,Q.BYTES));return i(\"result\",F,K*2)}const h0=p$;function i0(G,j,T,k=h0){const{context:H,zip215:L}=k,w=Q.BYTES;if(G=i(\"signature\",G,2*w),j=i(\"message\",j),X)j=X(j);const D=V8(G.slice(w,2*w));let B,f,F;try{B=O.fromHex(T,L),f=O.fromHex(G.slice(0,w),L),F=r.multiplyUnsafe(D)}catch(n){return!1}if(!L&&B.isSmallOrder())return!1;const m=U8(H,f.toRawBytes(),B.toRawBytes(),j);return f.add(B.multiplyUnsafe(m)).subtract(F).clearCofactor().equals(O.ZERO)}return r._setWindowSize(8),{CURVE:J,getPublicKey:z8,sign:S8,verify:i0,ExtendedPoint:O,utils:{getExtendedPublicKey:a,randomPrivateKey:()=>I(Q.BYTES),precompute(G=8,j=O.BASE){return j._setWindowSize(G),j.multiply(BigInt(3)),j}}}}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */var h=BigInt(0),c=BigInt(1),g8=BigInt(2),l$=BigInt(8),p$={zip215:!0};var n$=function($){const J=BigInt(10),Q=BigInt(20),q=BigInt(40),X=BigInt(80),N=l8,K=$*$%N*$%N,Y=p(K,g0,N)*K%N,V=p(Y,i$,N)*$%N,Z=p(V,r$,N)*V%N,U=p(Z,J,N)*Z%N,z=p(U,Q,N)*U%N,S=p(z,q,N)*z%N,C=p(S,X,N)*S%N,A=p(C,X,N)*S%N,g=p(A,J,N)*Z%N;return{pow_p_5_8:p(g,g0,N)*$%N,b2:K}},o$=function($){return $[0]&=248,$[31]&=127,$[31]|=64,$},t$=function($,J){const Q=l8,q=v(J*J*J,Q),X=v(q*q*J,Q),N=n$($*X).pow_p_5_8;let I=v($*q*N,Q);const K=v(J*I*I,Q),Y=I,V=v(I*B0,Q),Z=K===$,U=K===v(-$,Q),z=K===v(-$*B0,Q);if(Z)I=Y;if(U||z)I=V;if(D0(I,Q))I=v(-I,Q);return{isValid:Z||U,value:I}};/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */var l8=BigInt(\"57896044618658097711785492504343953926634992332820282019728792003956564819949\"),B0=BigInt(\"19681161376707505956807079304988542015446066515923890162744021073123829784752\"),YQ=BigInt(0),i$=BigInt(1),g0=BigInt(2),IQ=BigInt(3),r$=BigInt(5),a$=BigInt(8);var s$=(()=>w0(l8,void 0,!0))(),e$=(()=>({a:BigInt(-1),d:BigInt(\"37095705934669439343138083508754565189542113879843219016388785533085940283555\"),Fp:s$,n:BigInt(\"7237005577332262213973186563042994240857116359379907606001950938285454250989\"),h:a$,Gx:BigInt(\"15112221349535400772501151409588531511454012693041857206046113283949847762202\"),Gy:BigInt(\"46316835694926478169428394003475163141307993866256225615783033603165251855960\"),hash:W8,randomBytes:K0,adjustScalarBytes:o$,uvRatio:t$}))(),E8=(()=>R0(e$))();class p8 extends O8{constructor($,J){super();this.finished=!1,this.destroyed=!1,X0($);const Q=M8(J);if(this.iHash=$.create(),typeof this.iHash.update!==\"function\")throw new Error(\"Expected instance of class which extends utils.Hash\");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const q=this.blockLen,X=new Uint8Array(q);X.set(Q.length>q?$.create().update(Q).digest():Q);for(let N=0;N<X.length;N++)X[N]^=54;this.iHash.update(X),this.oHash=$.create();for(let N=0;N<X.length;N++)X[N]^=106;this.oHash.update(X),X.fill(0)}update($){return K8(this),this.iHash.update($),this}digestInto($){K8(this),d($,this.outputLen),this.finished=!0,this.iHash.digestInto($),this.oHash.update($),this.oHash.digestInto($),this.destroy()}digest(){const $=new Uint8Array(this.oHash.outputLen);return this.digestInto($),$}_cloneInto($){$||($=Object.create(Object.getPrototypeOf(this),{}));const{oHash:J,iHash:Q,finished:q,destroyed:X,blockLen:N,outputLen:I}=this;return $=$,$.finished=q,$.destroyed=X,$.blockLen=N,$.outputLen=I,$.oHash=J._cloneInto($.oHash),$.iHash=Q._cloneInto($.iHash),$}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}var v8=($,J,Q)=>new p8($,J).update(Q).digest();v8.create=($,J)=>new p8($,J);var E0=function($,J,Q,q){if($===0)return J^Q^q;else if($===1)return J&Q|~J&q;else if($===2)return(J|~Q)^q;else if($===3)return J&q|Q&~q;else return J^(Q|~q)},$J=new Uint8Array([7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8]),v0=new Uint8Array(new Array(16).fill(0).map(($,J)=>J)),JJ=v0.map(($)=>(9*$+5)%16),h8=[v0],i8=[JJ];for(let $=0;$<4;$++)for(let J of[h8,i8])J.push(J[$].map((Q)=>$J[Q]));var P0=[[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8],[12,13,11,15,6,9,9,7,12,15,11,13,7,8,7,7],[13,15,14,11,7,7,6,8,13,14,13,12,5,5,6,9],[14,11,12,14,8,6,5,5,15,12,15,14,9,9,8,6],[15,12,13,13,9,5,8,6,14,11,12,11,8,6,5,5]].map(($)=>new Uint8Array($)),QJ=h8.map(($,J)=>$.map((Q)=>P0[J][Q])),qJ=i8.map(($,J)=>$.map((Q)=>P0[J][Q])),NJ=new Uint32Array([0,1518500249,1859775393,2400959708,2840853838]),XJ=new Uint32Array([1352829926,1548603684,1836072691,2053994217,0]),P8=new Uint32Array(16);class f0 extends X8{constructor(){super(64,20,8,!0);this.h0=1732584193,this.h1=-271733879,this.h2=-1732584194,this.h3=271733878,this.h4=-1009589776}get(){const{h0:$,h1:J,h2:Q,h3:q,h4:X}=this;return[$,J,Q,q,X]}set($,J,Q,q,X){this.h0=$|0,this.h1=J|0,this.h2=Q|0,this.h3=q|0,this.h4=X|0}process($,J){for(let z=0;z<16;z++,J+=4)P8[z]=$.getUint32(J,!0);let Q=this.h0|0,q=Q,X=this.h1|0,N=X,I=this.h2|0,K=I,Y=this.h3|0,V=Y,Z=this.h4|0,U=Z;for(let z=0;z<5;z++){const S=4-z,C=NJ[z],A=XJ[z],g=h8[z],b=i8[z],W=QJ[z],x=qJ[z];for(let R=0;R<16;R++){const O=T8(Q+E0(z,X,I,Y)+P8[g[R]]+C,W[R])+Z|0;Q=Z,Z=Y,Y=T8(I,10)|0,I=X,X=O}for(let R=0;R<16;R++){const O=T8(q+E0(S,N,K,V)+P8[b[R]]+A,x[R])+U|0;q=U,U=V,V=T8(K,10)|0,K=N,N=O}}this.set(this.h1+I+V|0,this.h2+Y+U|0,this.h3+Z+q|0,this.h4+Q+N|0,this.h0+X+K|0)}roundClean(){P8.fill(0)}destroy(){this.destroyed=!0,this.buffer.fill(0),this.set(0,0,0,0,0)}}var F0=G8(()=>new f0);var ZJ=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),J8=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),Q8=new Uint32Array(64);class b0 extends X8{constructor(){super(64,32,8,!1);this.A=J8[0]|0,this.B=J8[1]|0,this.C=J8[2]|0,this.D=J8[3]|0,this.E=J8[4]|0,this.F=J8[5]|0,this.G=J8[6]|0,this.H=J8[7]|0}get(){const{A:$,B:J,C:Q,D:q,E:X,F:N,G:I,H:K}=this;return[$,J,Q,q,X,N,I,K]}set($,J,Q,q,X,N,I,K){this.A=$|0,this.B=J|0,this.C=Q|0,this.D=q|0,this.E=X|0,this.F=N|0,this.G=I|0,this.H=K|0}process($,J){for(let Z=0;Z<16;Z++,J+=4)Q8[Z]=$.getUint32(J,!1);for(let Z=16;Z<64;Z++){const U=Q8[Z-15],z=Q8[Z-2],S=l(U,7)^l(U,18)^U>>>3,C=l(z,17)^l(z,19)^z>>>10;Q8[Z]=C+Q8[Z-7]+S+Q8[Z-16]|0}let{A:Q,B:q,C:X,D:N,E:I,F:K,G:Y,H:V}=this;for(let Z=0;Z<64;Z++){const U=l(I,6)^l(I,11)^l(I,25),z=V+U+G0(I,K,Y)+ZJ[Z]+Q8[Z]|0,C=(l(Q,2)^l(Q,13)^l(Q,22))+V0(Q,q,X)|0;V=Y,Y=K,K=I,I=N+z|0,N=X,X=q,q=Q,Q=z+C|0}Q=Q+this.A|0,q=q+this.B|0,X=X+this.C|0,N=N+this.D|0,I=I+this.E|0,K=K+this.F|0,Y=Y+this.G|0,V=V+this.H|0,this.set(Q,q,X,N,I,K,Y,V)}roundClean(){Q8.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}var x0=G8(()=>new b0);var y0=function($,...J){if(typeof $===\"string\")$=I0($);return d($,...J),$};/*! micro-key-producer - MIT License (c) 2024 Paul Miller (paulmillr.com) */var YJ=A8(\"ed25519 seed\"),r8=2147483648,_0=new Uint8Array([0]),IJ=($)=>F0(x0($)),KJ=($)=>N8($).getUint32(0,!1),a8=($)=>{if(!Number.isSafeInteger($)||$<0||$>4294967295)throw new Error(`Invalid number=${$}. Should be from 0 to 2 ** 32 - 1`);const J=new Uint8Array(4);return N8(J).setUint32(0,$,!1),J};class C8{get publicKeyRaw(){return E8.getPublicKey(this.privateKey)}get publicKey(){return L8(_0,this.publicKeyRaw)}get pubHash(){return IJ(this.publicKey)}get fingerprint(){return KJ(this.pubHash)}get fingerprintHex(){return F8(a8(this.fingerprint))}get parentFingerprintHex(){return F8(a8(this.parentFingerprint))}static fromMasterSeed($){if($=y0($),8*$.length<128||8*$.length>512)throw new Error(`HDKey: wrong seed length=${$.length}. Should be between 128 and 512 bits; 256 bits is advised)`);const J=v8(W8,YJ,$);return new C8({privateKey:J.slice(0,32),chainCode:J.slice(32)})}constructor($){if(this.depth=0,this.index=0,this.parentFingerprint=0,!$||typeof $!==\"object\")throw new Error(\"HDKey.constructor must not be called directly\");if(d($.privateKey,32),d($.chainCode,32),this.depth=$.depth||0,this.index=$.index||0,this.parentFingerprint=$.parentFingerprint||0,!this.depth){if(this.parentFingerprint||this.index)throw new Error(\"HDKey: zero depth with non-zero index/parent fingerprint\")}this.chainCode=$.chainCode,this.privateKey=$.privateKey}derive($,J=!1){if(!/^[mM]'?/.test($))throw new Error('Path must start with \"m\" or \"M\"');if(/^[mM]'?$/.test($))return this;const Q=$.replace(/^[mM]'?\\//,\"\").split(\"/\");let q=this;for(let X of Q){const N=/^(\\d+)('?)$/.exec(X);if(!N||N.length!==3)throw new Error(`Invalid child index: ${X}`);let I=+N[1];if(!Number.isSafeInteger(I)||I>=r8)throw new Error(\"Invalid index\");if(J||N[2]===\"'\")I+=r8;q=q.deriveChild(I)}return q}deriveChild($){if($<r8)throw new Error(`Non-hardened child derivation not possible for Ed25519 (index=${$})`);const J=L8(_0,this.privateKey,a8($)),Q=v8(W8,this.chainCode,J);return new C8({chainCode:Q.slice(32),depth:this.depth+1,parentFingerprint:this.fingerprint,index:$,privateKey:Q.slice(0,32)})}sign($){return E8.sign($,this.privateKey)}verify($,J){return J=y0(J,64),E8.verify(J,$,this.publicKeyRaw)}}var p0=function($){try{const J=new Y8($);return Y8.isOnCurve(J.toBuffer())}catch(J){return!1}},wJ=function({phrase:$,derivationPath:J=SJ.SOL}){const Q=GJ($),q=C8.fromMasterSeed(Q);return WJ.fromSeed(q.derive(J,!0).privateKey)},AJ=function($){return $.publicKey.toString()};async function LJ({connection:$,address:J}){const Q=await $.getTokenAccountsByOwner(new Y8(J),{programId:jJ}),q=[];for await(let X of Q.value){const N=VJ.decode(X.account.data),{decimals:I,address:K}=await MJ($,N.mint);if(N.amount>BigInt(0))q.push(new d0({value:HJ.fromBigInt(N.amount,I),decimal:I,identifier:`${l0.Solana}.TOKEN-${K.toString()}`}))}return q}var RJ=function($){return async(J)=>{const Q=await $.getBalance(new Y8(J)),q=await LJ({connection:$,address:J});return[d0.from({chain:l0.Solana,value:BigInt(Q)}),...q]}};async function BJ({tokenAddress:$,recipient:J,from:Q,connection:q,amount:X,decimals:N}){const I=new m0,K=new Y8($),Y=await c0(K,Q),V=new Y8(J),Z=await c0(K,V);try{return await TJ(q,Z),I.add(UJ(Y,K,Z,Q,X,N))}catch(U){return I.add(zJ(Q,Z,V,K))}}var gJ=function($){return async({recipient:J,assetValue:Q,fromKeypair:q})=>{if(!p0(J))throw new u0(\"core_transaction_invalid_sender_address\");const X=Q.isGasAsset?new m0().add(kJ.transfer({fromPubkey:q.publicKey,lamports:Q.getValue(\"number\"),toPubkey:new Y8(J)})):Q.address?await BJ({amount:Q.getValue(\"number\"),connection:$,decimals:Q.decimal,from:q.publicKey,recipient:J,tokenAddress:Q.address}):void 0;if(!X)throw new u0(\"core_transaction_invalid_sender_address\");const N=await $.getLatestBlockhash();return X.recentBlockhash=N.blockhash,X.feePayer=q.publicKey,CJ($,X,[q])}},EJ=({rpcUrl:$=DJ.Solana}={})=>{const J=new OJ($,\"confirmed\");return{createKeysForPath:wJ,getAddressFromKeys:AJ,getBalance:RJ(J),transfer:gJ(J),validateAddress:p0}};export{EJ as SOLToolbox};\n\n//# debugId=E8ADE53E1E3C228964756E2164756E21\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["buffer_1","require","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","buf","reversed","reverse","hex","BigInt","num","width","padStart","__createBinding","this","o","m","k","k2","defineProperty","enumerable","get","__setModuleDefault","__decorate","decorators","target","key","desc","d","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","__importStar","mod","__esModule","result","__importDefault","deserializeUnchecked","deserialize","serialize","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","encoding","textDecoder","TextDecoder","fatal","default","INITIAL_LENGTH","message","super","fieldPath","originalMessage","addToFieldPath","fieldName","splice","join","alloc","maybeResize","concat","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","subarray","writeString","str","writeFixedArray","array","writeArray","fn","elem","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","args","apply","code","indexOf","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","len","readString","readFixedArray","readArray","capitalizeFirstLetter","string","charAt","toUpperCase","serializeField","schema","fieldType","writer","item","kind","type","size","forEach","val","serializeStruct","error","obj","borshSerialize","structSchema","map","field","deserializeField","reader","arr","Map","set","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","uuid","generateRequest","ClientBrowser","callServer","options","reviver","replacer","generator","version","notificationIdNull","module","request","method","params","id","callback","self","isBatch","hasCallback","err","JSON","stringify","response","_parseResponse","responseText","parse","isError","res","isNotError","filter","jsonrpc","getRandomValues","rnds8","rng","crypto","msCrypto","REGEX","test","byteToHex","substr","toLowerCase","validate","rnds","random","StructError","failure","failures","cached","explanation","rest","path","msg","cause","isObject","x","isNonArrayObject","print","toFailure","context","struct","branch","refinement","toFailures","Symbol","iterator","run","coerce","mask","ctx","coercer","status","validator","s","entries","ts","t","Set","add","refiner","Struct","props","assert","is","tuples","tuple","input","done","next","shiftIterator","define","Element","boolean","instance","Class","literal","constant","description","never","nullable","number","isNaN","optional","record","Key","Value","Structs","Never","max","keys","S","coerced","first","unknown","condition","WebSocketBrowserImpl","EventEmitter","socket","address","protocols","window","WebSocket","onopen","emit","onmessage","event","data","onerror","onclose","reason","send","optionsOrCallback","cb","close","addEventListener","listener","CommonClient","autoconnect","ready","reconnect","reconnect_timer_id","reconnect_interval","max_reconnects","rest_options","current_reconnects","generate_request_id","webSocketFactory","dataPack","queue","rpc_id","DefaultDataPack","_connect","connect","timeout","ws_opts","Promise","resolve","reject","promise","setTimeout","login","resp","listMethods","notify","subscribe","unsubscribe","setAutoReconnect","setReconnectInterval","interval","setMaxReconnects","clearTimeout","ArrayBuffer","notification","listeners","then","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","isOnCurve","ExtendedPoint","fromHex","sign","verify","toBuffer","isBuffer","byteLength","properties","SOLANA_SCHEMA","decodeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","unique","equals","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","toStringTag","createWithSeed","fromPublicKey","seed","programId","publicKeyBytes","sha256","createProgramAddressSync","seeds","createProgramAddress","findProgramAddressSync","nonce","seedsWithNonce","findProgramAddress","pubkeyData","_PublicKey","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","signature","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","decodeLength","bytes","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","addressTableLookupsCount","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","sort","y","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SendTransactionError","action","transactionMessage","logs","maybeLogsOutput","guideText","transactionLogs","transactionError","cachedLogs","getLogs","getTransaction","tx","logMessages","catch","SolanaJSONRPCError","customMessage","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","u64","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","createAccount","lamports","space","fromPubkey","newAccountPubkey","transfer","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","nonceInitialize","authorized","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","allocate","Loader","getMinNumSignatures","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","getSlot","slot","round","MS_PER_SLOT","objToString","objKeys","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","fetchImpl","globalThis","fetch","RpcWebSocketClient","url","rpc","underlyingSocket","readyState","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","ParsedInstructionStruct","parsed","PartiallyDecodedInstructionStruct","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","innerInstructions","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","_commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","fastStableStringify$1","confirmTransactionInitialTimeout","putativeUrl","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","parseInt","makeWebsocketUrl","customFetch","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","configWithoutEncoding","unsafeRes","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","aborted","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","clientSubscriptionId","log","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","maybeFilters","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","recentSlot","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","isValidPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","ecdsaSign","msgHash","privKey","toCompactRawBytes","recovery","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","_Lockup","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","maybeLockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","rentExemptReserve","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","UpdateValidatorIdentity","voteAuthorizeWithSeedArgs","Voter","VoteProgram","initializeAccount","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","website","details","iconUrl","keybaseUsername","TOKEN_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","bigIntBE","toBigIntBE","toBufferBE","BigNumber","bool","u8","boolLayout","publicKeyLayout","TokenError","TokenAccountNotFoundError","TokenInvalidAccountError","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","TokenInvalidMintError","TokenOwnerOffCurveError","AccountType","ACCOUNT_TYPE_SIZE","MultisigLayout","MULTISIG_SIZE","AccountState","AccountLayout","u32","ACCOUNT_SIZE","unpackAccount","rawAccount","tlvData","Account","delegateOption","delegatedAmount","isInitialized","Uninitialized","isFrozen","Frozen","isNative","isNativeOption","closeAuthority","closeAuthorityOption","MintLayout","MINT_SIZE","getMint","rawMint","Mint","mintAuthority","mintAuthorityOption","supply","freezeAuthority","freezeAuthorityOption","unpackMint","getAssociatedTokenAddress","allowOwnerOffCurve","associatedTokenProgramId","TokenInstruction","transferCheckedInstructionData","createTransferCheckedInstruction","destination","multiSigners","ownerOrAuthority","addSigners","TransferChecked","buildAssociatedTokenAccountInstruction","associatedToken","P","C","E","Q","Proxy","Arbitrum","Avalanche","BinanceSmartChain","Bitcoin","BitcoinCash","Chainflip","Cosmos","Dash","Dogecoin","Ethereum","Kujira","Litecoin","Maya","MayaStagenet","Optimism","Polkadot","Polygon","Radix","THORChain","THORChainStagenet","Solana","ArbitrumHex","AvalancheHex","BinanceSmartChainHex","EthereumHex","OptimismHex","PolygonHex","w","u","zn","M","ARB","AVAX","BCH","BSC","BTC","DASH","DOGE","DOT","ETH","FLIP","GAIA","KUJI","LTC","MATIC","MAYA","OP","SOL","THOR","XRD","ZEC","Jn","H","K","a","en","TC_SUPPORTED_TO_TC_SUPPORTED","TC_SUPPORTED_TO_ETH","TC_SUPPORTED_TO_AVAX","TC_SUPPORTED_TO_BSC","ETH_TO_TC_SUPPORTED","ETH_TO_ETH","ETH_TO_AVAX","ETH_TO_BSC","AVAX_TO_TC_SUPPORTED","AVAX_TO_ETH","AVAX_TO_AVAX","AVAX_TO_BSC","BSC_TO_TC_SUPPORTED","BSC_TO_ETH","BSC_TO_AVAX","BSC_TO_BSC","Zn","kn","tn","hn","Mn","bn","an","BRAVE","COINBASE_MOBILE","COINBASE_WEB","EIP6963","EXODUS","KEEPKEY","KEPLR","KEYSTORE","LEDGER","METAMASK","OKX","OKX_MOBILE","PHANTOM","POLKADOT_JS","RADIX_WALLET","TREZOR","TALISMAN","TRUSTWALLET_WEB","WALLETCONNECT","XDEFI","NoError","LockedDevice","TC_NotFound","Average","Fast","Fastest","Approve","CheckOnly","NAME_REGISTER","BOND","DEPOSIT","LEAVE","UNBOND","WITHDRAW","OPEN_LOAN","CLOSE_LOAN","pn","object","sellAsset","buyAsset","sellAmount","refine","providers","sourceAddress","destinationAddress","slippage","affiliate","affiliateFee","allowSmartContractSender","allowSmartContractReceiver","disableSecurityChecks","highSlippage","highPriceImpact","z","f","sn","Yn","describe","yn","contractAddress","contractMethod","contractParams","contractParamNames","approvalToken","approvalSpender","V","inbound","swap","outbound","CHAINFLIP","TRADERJOE_V1","PANGOLIN_V1","UNISWAP_V2","THORCHAIN","THORCHAIN_STREAMING","MAYACHAIN","ONEINCH","SUSHISWAP_V2","WOOFI_V2","PANCAKESWAP","LIQUIDITY","NETWORK","INBOUND","OUTBOUND","AFFILIATE","TAX","dn","nativeEnum","asset","chain","An","provider","estimatedTime","slipPercentage","omit","price","image","rn","priceImpact","assets","un","display","tooltip","qn","buyAmount","buyAmountMaxSlippage","slippageBps","targetAddress","inboundAddress","routerAddress","fees","expiration","gn","expectedBuyAmount","expectedBuyAmountMaxSlippage","evmTransactionDetails","routePathArray","totalSlippageBps","legs","errorCode","warnings","Qn","Nn","quoteId","routes","core_estimated_max_spendable_chain_not_supported","core_extend_error","core_inbound_data_not_found","core_approve_asset_address_or_from_not_found","core_plugin_not_found","core_plugin_swap_not_found","core_approve_asset_target_invalid","core_explorer_unsupported_chain","core_verify_message_not_supported","core_chain_halted","core_wallet_connection_not_found","core_wallet_xdefi_not_installed","core_wallet_evmwallet_not_installed","core_wallet_walletconnect_not_installed","core_wallet_keystore_not_installed","core_wallet_ledger_not_installed","core_wallet_trezor_not_installed","core_wallet_keplr_not_installed","core_wallet_okx_not_installed","core_wallet_keepkey_not_installed","core_wallet_talisman_not_installed","core_wallet_not_keypair_wallet","core_wallet_sign_message_not_supported","core_swap_invalid_params","core_swap_route_not_complete","core_swap_asset_not_recognized","core_swap_contract_not_found","core_swap_route_transaction_not_found","core_swap_contract_not_supported","core_swap_transaction_error","core_swap_quote_mode_not_supported","core_transaction_deposit_error","core_transaction_create_liquidity_base_error","core_transaction_create_liquidity_asset_error","core_transaction_create_liquidity_invalid_params","core_transaction_add_liquidity_invalid_params","core_transaction_add_liquidity_base_address","core_transaction_add_liquidity_base_error","core_transaction_add_liquidity_asset_error","core_transaction_withdraw_error","core_transaction_deposit_to_pool_error","core_transaction_deposit_insufficient_funds_error","core_transaction_deposit_gas_error","core_transaction_invalid_sender_address","core_transaction_deposit_server_error","core_transaction_user_rejected","wallet_connection_rejected_by_user","wallet_missing_api_key","wallet_chain_not_supported","wallet_missing_params","wallet_provider_not_found","wallet_failed_to_add_or_switch_network","wallet_ledger_connection_error","wallet_ledger_connection_claimed","wallet_ledger_get_address_error","wallet_ledger_device_not_found","wallet_ledger_device_locked","wallet_phantom_not_found","wallet_xdefi_not_found","wallet_xdefi_send_transaction_no_address","wallet_xdefi_contract_address_not_provided","wallet_xdefi_asset_not_defined","wallet_walletconnect_project_id_not_specified","wallet_walletconnect_connection_not_established","wallet_walletconnect_namespace_not_supported","wallet_trezor_failed_to_sign_transaction","wallet_trezor_derivation_path_not_supported","wallet_trezor_failed_to_get_address","wallet_talisman_not_enabled","wallet_talisman_not_found","wallet_polkadot_not_found","chainflip_channel_error","chainflip_unknown_asset","chainflip_broker_invalid_params","chainflip_broker_recipient_error","chainflip_broker_register","chainflip_broker_tx_error","chainflip_broker_withdraw","chainflip_broker_fund_only_flip_supported","chainflip_broker_fund_invalid_address","thorchain_chain_halted","thorchain_trading_halted","thorchain_swapin_router_required","thorchain_swapin_vault_required","thorchain_swapin_memo_required","thorchain_swapin_token_required","api_v2_invalid_response","toolbox_cosmos_signer_not_defined","toolbox_cosmos_no_accounts_found","toolbox_cosmos_verify_signature_no_pubkey","toolbox_evm_no_abi_fragment","toolbox_evm_no_signer","toolbox_evm_no_signer_address","toolbox_evm_no_from_address","toolbox_evm_no_contract_address","toolbox_evm_no_fee_data","toolbox_evm_no_gas_price","toolbox_evm_no_to_address","toolbox_evm_invalid_gas_asset_address","toolbox_evm_provider_not_eip1193_compatible","toolbox_evm_error_estimating_gas_limit","toolbox_evm_error_sending_transaction","helpers_invalid_number_different_decimals","helpers_invalid_number_of_years","helpers_invalid_identifier","helpers_invalid_asset_url","helpers_invalid_asset_identifier","helpers_invalid_memo_type","helpers_failed_to_switch_network","helpers_not_found_provider","not_implemented","R","static","errorKey","stack","ErrorCode","setPrototypeOf","Kn","Tn","bigIntDecimal","Y","decimal","substring","repeat","T","replace","F","Vn","format","replaceAll","at","getValue","J","log10","parseFloat","G","decimalMultiplier","bigIntValue","fromBigInt","shiftDecimals","getBaseValue","identifier","sub","mul","div","gt","gte","lt","lte","eqValue","formatBigIntToSafeValue","getBigIntValue","toSignificant","padEnd","toAbbreviation","abs","toCurrency","currencyPosition","decimalSeparator","thousandSeparator","Intl","NumberFormat","useGrouping","maximumFractionDigits","Bn","mn","B","Hn","l","W","O","X","isGasAsset","D","symbol","isSynthetic","ticker","tax","chainId","On","toUrl","eqAsset","fromUrl","urlAsset","fromBaseDecimal","asyncTokenLookup","ln","Rn","A","xn","Fn","Cn","q","h","Z","Wn","loadStaticAssets","tokens","fromString","fromIdentifier","fromStringSync","fromStringWithBase","fromStringWithBaseSync","fromIdentifierSync","fromChainOrSignature","wn","apiKey","_n","In","Pn","referrer","referer","$n","json","post","I","extend","Xn","accept","Dn","manager","Accept","network","resource_address","divisibility","vn","Un","Sn","j","N0","$","isSafeInteger","J$","K8","destroyed","finished","w8","F8","Q$","Y0","_0","_9","_A","_F","_a","_f","A8","TextEncoder","M8","L8","N","G8","update","digest","outputLen","blockLen","K0","N8","DataView","T8","Uint32Array","O8","clone","_cloneInto","G0","V0","X8","padOffset","isLE","pos","view","min","process","roundClean","digestInto","Z0","setBigUint64","setUint32","q$","destroy","j0","R8","b8","A$","fromBig","toBig","X$","shrSH","Z$","shrSL","Y$","rotrSH","I$","rotrSL","K$","rotrBH","G$","rotrBL","V$","rotr32H","j$","rotr32L","z$","rotlSH","U$","rotlSL","T$","rotlBH","M$","rotlBL","O$","add3L","k$","add3H","C$","add4L","S$","add4H","D$","add5H","w$","add5L","H$","L$","R$","$8","z0","Ah","Al","Bh","Bl","Ch","Cl","Dh","Dl","Eh","El","Fh","Fl","Gh","Gl","Hh","Hl","U","getUint32","q8","I8","z8","g","U8","S8","W8","x8","_8","B8","E$","T0","U0","M0","charCodeAt","V8","y8","k8","c8","j8","v$","B$","g$","W0","bigint","function","stringOrUint8Array","Fp","isValid","x$","S0","y$","f$","eql","sqr","C0","k0","Z8","ONE","neg","ZERO","_$","m8","nBitLength","nByteLength","w0","ORDER","BITS","BYTES","MASK","is0","isOdd","u$","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","reduceRight","m$","cmov","fromBytes","O0","c$","L0","H0","Gx","Gy","d$","d8","R0","randomBytes","adjustScalarBytes","domain","uvRatio","mapToCurve","h$","prehash","g8","ex","ey","ez","et","toAffine","fromAffine","normalizeZ","_setWindowSize","_WINDOW_SIZE","assertValidity","L","negate","double","D8","H8","t8","s8","f8","e8","$0","J0","Q0","q0","t0","s0","e0","$$","n8","o8","r0","a0","n0","o0","subtract","wNAF","wNAFCached","multiply","multiplyUnsafe","unsafeLadder","isSmallOrder","isTorsionFree","l$","clearCofactor","fromPrivateKey","point","toRawBytes","toHex","BASE","windows","windowSize","constTimeNegate","precomputeWindow","A0","head","scalar","pointBytes","h0","p$","CURVE","zip215","getExtendedPublicKey","precompute","o$","t$","l8","g0","i$","r$","pow_p_5_8","b2","n$","B0","D0","a$","s$","E8","p8","X0","iHash","oHash","getPrototypeOf","v8","E0","$J","v0","JJ","h8","i8","P0","QJ","qJ","NJ","XJ","P8","f0","h1","h2","h3","h4","F0","ZJ","J8","Q8","b0","x0","y0","I0","YJ","r8","a8","C8","publicKeyRaw","pubHash","IJ","fingerprint","KJ","fingerprintHex","parentFingerprintHex","parentFingerprint","fromMasterSeed","chainCode","depth","derive","exec","deriveChild","p0","Y8","wJ","phrase","derivationPath","SJ","GJ","WJ","AJ","RJ","jJ","VJ","MJ","d0","HJ","l0","LJ","BJ","m0","c0","TJ","UJ","zJ","gJ","assetValue","fromKeypair","u0","kJ","CJ","EJ","rpcUrl","DJ","OJ","createKeysForPath","getAddressFromKeys","validateAddress","inRange","ToDictionary","Stream","endOfStream","read","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}