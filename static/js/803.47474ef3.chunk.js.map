{"version":3,"file":"static/js/803.47474ef3.chunk.js","mappings":"wMAAIA,EAAwC,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAQ,OAAUG,GAAKL,EAAOK,EAAC,CAAM,CAC3F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAUU,MAASL,GAAU,OAAQG,GAAKL,EAAOK,EAAC,CAAM,CAC9F,SAASF,EAAKD,GAAUA,EAAOM,KAAOT,EAAQG,EAAOO,OAJzD,SAAeV,GAAS,OAAOA,aAAiBH,EAAIG,EAAQ,IAAIH,GAAE,SAAUI,GAAWA,EAAQD,EAAO,GAAM,CAI1CW,CAAMR,EAAOO,OAAOE,KAAKV,EAAWK,EAAY,CAC9GH,GAAMN,EAAYA,EAAUe,MAAMlB,EAASC,GAAc,KAAKS,OACtE,GACA,EAWA,MAAMS,EACFC,WAAAA,EAAcC,QAAApB,EAASqB,QAAApB,GAAY,CAAC,GAChCqB,KAAKC,gBAAkB,IACvBD,KAAKE,oBAAsB,KAC3BF,KAAKG,YAAc,KACnBH,KAAKI,QAAU,IAAIC,EAAAA,EAenBL,KAAKM,KAAO,CAAC1B,EAAKa,EAAKX,EAAIC,EAAIC,EAAOuB,EAAAA,EAAAC,OAAOC,MAAM,GAAIpB,EAAa,CAACqB,EAAAA,GAAYC,KAAOC,eAAA1B,GAAmB,CAAC,IAAMV,EAAUwB,UAAM,OAAQ,GAAQ,YAC9I,MAAMf,EAASe,KAAKa,OAAOC,mBAAmB,CAAEC,SAAU,SAC1D,GAAI/B,EAAKgC,QAAU,IACf,MAAA/B,EAAOgC,MAAM,uCAAwC,CAAEC,WAAYlC,EAAKgC,SAClE,IAAIG,EAAAA,GAAe,4CAA8CnC,EAAKgC,OAAQ,oBAExF/B,EAAOgC,MAAM,uBAAwB,CAAEL,eAAA1B,IACvC,MAAME,QAAiBY,KAAKoB,SAE5Bb,EAAAA,EAAAC,OAAOa,OAAO,CAACd,EAAAA,EAAAC,OAAOc,KAAK,CAAC1C,EAAKa,EAAKX,EAAIC,IAAMwB,EAAAA,EAAAC,OAAOc,KAAK,CAACtC,EAAKgC,SAAUhC,IAAQ,CAAE4B,eAAA1B,IACtFD,EAAOgC,MAAM,mCACb,MAAMM,EAAKnC,EAASoC,aAAapC,EAAS4B,OAAS,GACnD,IAAK3B,EAAWoC,MAAKC,GAAKA,IAAMH,IAC5B,MAAM,IAAII,EAAAA,GAAqBJ,GAEnC,OAAOnC,CACnB,IACQY,KAAK4B,YAAc,KACnB5B,KAAKa,OAAS,IAAIgB,EAAAA,EAAYlD,GA5Cb,YA4CkFD,EACtG,CAUD0C,QAAAA,CAAS1C,GAASkC,eAAgBjC,GAAoB,CAAC,GACnD,MAAM,IAAImD,MAAM,2BACnB,CAQDC,YAAAA,CAAarD,EAAOC,GAChB,IAAIC,GAAe,EAkBnB,OAdmBJ,EAAUwB,UAAM,OAAQ,GAAQ,YAC/C,IAAIpB,EAEJ,IAAK,MAAMG,KAAQL,EAAO,CACtB,MAAMM,QAAUgB,KAAKoB,SAASrC,GAC9B,GAAIH,EACA,OACJ,MAAMS,EAASL,EAAEwC,aAAaxC,EAAEgC,OAAS,GACzC,GAAI3B,IAAWqB,EAAAA,GAAYC,GACvB,MAAM,IAAIgB,EAAAA,GAAqBtC,GAEnCV,EAASQ,KAAKH,EACjB,CACb,IACeU,MAAK,KAAOd,GAAgBD,EAASqD,aAAYjD,IAAMH,GAAgBD,EAASsD,MAAMlD,KACtF,CAAEmD,YAlBWA,KAChBtD,GAAe,GAkBtB,CASDuD,cAAAA,CAAezD,GAAS,CAUxB0D,KAAAA,GACI,OAAOvD,QAAQwD,SAClB,CAQDC,EAAAA,CAAG5D,EAAWC,GACVqB,KAAKI,QAAQkC,GAAG5D,EAAWC,EAC9B,CAID4D,GAAAA,CAAI7D,EAAWC,GACXqB,KAAKI,QAAQoC,eAAe9D,EAAWC,EAC1C,CACD8D,IAAAA,CAAK/D,KAAUC,GACXqB,KAAKI,QAAQqC,KAAK/D,KAAUC,EAC/B,CAID+D,YAAAA,GACIC,QAAQC,KAAK,+FAChB,CAIDC,kBAAAA,CAAmBnE,GACfsB,KAAKC,gBAAkBvB,CAC1B,CAIDoE,8BAAAA,CAA+BpE,GAC3BsB,KAAKE,oBAAsBxB,CAC9B,CAQD,aAAOqE,CAAOrE,EAAc,IAAMC,GAC9B,OAAO,IAAIE,SAAQ,CAACD,EAASa,KACzB,IAAIX,GAAQ,EACZ,MAAMC,EAAMiB,KAAKgD,OAAO,CACpB7D,KAAME,IACFP,GAAQ,EACJC,GACAA,EAAImD,cACJlD,GACAiE,aAAajE,GACjBgB,KAAKkD,KAAK7D,EAAE8D,WAAYzE,GAAagB,KAAKd,EAASa,EAAO,EAE9DwC,MAAO5C,IACCL,GACAiE,aAAajE,GACjBS,EAAOJ,EAAE,EAEb2C,SAAUA,KACFhD,GACAiE,aAAajE,GACZF,GACDW,EAAO,IAAI0B,EAAAA,GAAenB,KAAKoD,2BAA4B,iBAAiB,IAIlFpE,EAAkBL,EAClB0E,YAAW,KACTtE,EAAImD,cACJzC,EAAO,IAAI0B,EAAAA,GAAenB,KAAKsD,2BAA4B,iBAAiB,GAC7E3E,GACD,IAAI,GAEjB,CASD4E,kBAAAA,CAAmB7E,GACf,OAAOF,EAAUwB,UAAM,OAAQ,GAAQ,YACnC,MAAMrB,EAASqB,KAAKa,OAAOC,mBAAmB,CAC1CC,SAAU,qBACVb,oBAAqBF,KAAKE,sBAE9B,GAAIF,KAAKwD,oBACL,MAAA7E,EAAOsC,MAAM,mCACP,IAAIwC,EAAAA,GAAuB,iFAGrC,IAAI7E,EACJ,MAAMa,EAAc,IAAIZ,SAAQG,IAC5BJ,EAAcI,CAAA,IAElBgB,KAAKwD,oBAAsB/D,EAE3B,IAAIX,GAAsB,EAC1B,MAAMC,EAAUsE,YAAW,KACvB1E,EAAOsC,MAAM,2DAA4D,CACrEf,oBAAqBF,KAAKE,sBAE9BpB,GAAsB,EACtBkB,KAAKyC,KAAK,eAAe,GAC1BzC,KAAKE,qBACR,IACI,MAAMlB,QAAYN,IAClB,OAAII,IACAH,EAAOsC,MAAM,gDACbjB,KAAKyC,KAAK,eAEPzD,CACV,SAEGL,EAAOsC,MAAM,iCACbgC,aAAalE,GACTH,GACAA,IACJoB,KAAKwD,oBAAsB,IAC9B,CACb,GACK,CACDE,qBAAAA,CAAsBhF,EAAMC,EAASC,GACjC,IAAK,MAAMa,KAAcd,EACrBD,EAAKe,GAAcO,KAAK2D,qBAAqBlE,EAAYf,EAAKe,GAAaf,EAAME,EAExF,CACD+E,oBAAAA,CAAqBjF,EAAYC,EAAGC,EAAKa,GACrC,MAAO,IAAIX,IAASN,EAAUwB,UAAM,OAAQ,GAAQ,YAChD,MAAQ4B,YAAA7C,GAAgBiB,KACxB,GAAIjB,EACA,OAAOF,QAAQ+E,OAAO,IAAIzC,EAAAA,GAAe,+BAAiCpC,EAAc,IAAK,oBAEjG,IACI,OAAAiB,KAAK4B,YAAclD,EACnBsB,KAAKmC,eAAe1C,SACPd,EAAEgB,MAAMf,EAAKE,EAC7B,SAEGkB,KAAK4B,YAAc,IACtB,CACb,GACK,CASDiC,eAAAA,CAAgBnF,GACZsB,KAAKa,OAASb,KAAKa,OAAOiD,YAAYpF,EACzC,CAQDqF,kBAAAA,CAAmBrF,GACfsB,KAAKa,OAAOmD,cAActF,EAC7B,CAIDuF,eAAAA,GACI,OAAOjE,KAAKa,OAAOqD,YACtB,EAELtE,EAAU0D,2BAA6B,mCACvC1D,EAAUwD,2BAA6B,yBCxSvC,SAASe,EAAW1F,GAChB,MAAMC,EAAI6B,EAAAA,EAAAC,OAAOC,MAAM,GACvB,OAAA/B,EAAE0F,cAAc3F,EAAO,GAChBC,CACX,CACA,MAAM2F,EAAa,CACfC,KAAM/D,EAAAA,EAAAC,OAAOC,MAAM,GACnBS,WAAY,EACZqD,SAAU,GCVd,IAAIC,EAAwC,SAAU/F,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAQ,OAAUG,GAAKL,EAAOK,EAAC,CAAM,CAC3F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAUU,MAASL,GAAU,OAAQG,GAAKL,EAAOK,EAAC,CAAM,CAC9F,SAASF,EAAKD,GAAUA,EAAOM,KAAOT,EAAQG,EAAOO,OAJzD,SAAeV,GAAS,OAAOA,aAAiBH,EAAIG,EAAQ,IAAIH,GAAE,SAAUI,GAAWA,EAAQD,EAAO,GAAM,CAI1CW,CAAMR,EAAOO,OAAOE,KAAKV,EAAWK,EAAY,CAC9GH,GAAMN,EAAYA,EAAUe,MAAMlB,EAASC,GAAc,KAAKS,OACtE,GACA,EAEA,MAAMsF,EAAgB,CAClB,CACIC,SAAUC,EAAAA,oBAGX,SAASC,IACZ,OAAOJ,EAAUxE,UAAM,OAAQ,GAAQ,YAInC,aAHqB6E,UAAUC,IAAIC,cAAc,CAC7CC,QAASP,GAGrB,GACA,CACO,SAASQ,IACZ,OAAOT,EAAUxE,UAAM,OAAQ,GAAQ,YAEnC,aADsB6E,UAAUC,IAAII,cACrBC,QAAOzG,GAAKA,EAAEgG,WAAaC,EAAAA,mBAClD,GACA,CC5BA,IAAIS,EAAwC,SAAU3G,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAQ,OAAUG,GAAKL,EAAOK,EAAC,CAAM,CAC3F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAUU,MAASL,GAAU,OAAQG,GAAKL,EAAOK,EAAC,CAAM,CAC9F,SAASF,EAAKD,GAAUA,EAAOM,KAAOT,EAAQG,EAAOO,OAJzD,SAAeV,GAAS,OAAOA,aAAiBH,EAAIG,EAAQ,IAAIH,GAAE,SAAUI,GAAWA,EAAQD,EAAO,GAAM,CAI1CW,CAAMR,EAAOO,OAAOE,KAAKV,EAAWK,EAAY,CAC9GH,GAAMN,EAAYA,EAAUe,MAAMlB,EAASC,GAAc,KAAKS,OACtE,GACA,EAgBA,MAAMkG,UAAwBzF,EAC1BC,WAAAA,CAAYnB,EAAQC,GAChB2G,QACAtF,KAAKuF,QAAUC,KAAKC,MAAsB,MAAhBD,KAAKE,UAC/B1F,KAAK2F,WAAa,GAClB3F,KAAK4F,oBAAqB,EAC1B5F,KAAK6F,gBAAmBjH,IAChBoB,KAAK4F,qBAET5F,KAAK4F,oBAAqB,EAC1B5F,KAAKyC,KAAK,aAAc7D,GAAC,EAE7BoB,KAAK8F,OAASpH,EACdsB,KAAK+F,gBAAkBpH,EACvBqB,KAAKG,aAAc6F,EAAAA,EAAAA,GAAqBtH,EAAOuH,UAClD,CAID,cAAOC,GACH,OAAOd,EAAUpF,UAAM,OAAQ,GAAQ,YACnC,MAAMtB,QAAekG,IACrB,OAAOS,EAAgBnC,KAAKxE,EACxC,GACK,CAID,oBAAOyH,GACH,OAAOf,EAAUpF,UAAM,OAAQ,GAAQ,YACnC,MAAMtB,QAAgBuG,IACtB,OAAuB,IAAnBvG,EAAQsC,OACD,KACJqE,EAAgBnC,KAAKxE,EAAQ,GAChD,GACK,CAID,WAAOwE,CAAKxE,GACR,OAAO0G,EAAUpF,UAAM,OAAQ,GAAQ,kBAC7BtB,EAAOwE,OACgB,OAAzBxE,EAAO0H,sBACD1H,EAAO2H,oBApDF,UAsDTC,EAAsB5H,GAC5B,MAAMC,EAAQD,EAAO6H,eAAe,GAAGC,WAAWC,MAAK,EAAGC,WAAA3H,KAAiBA,EAAW0C,MAAKzC,GAA0B,MAArBA,EAAE2H,mBAClG,IAAKhI,EACD,MAAM,IAAIiI,EAAAA,GAA+B,qGAE7C,MAAMhI,EAAkBD,EAAMoH,gBAC9B,UACUrH,EAAOmI,eAAejI,EAC/B,OACMG,GACH,YAAML,EAAO0D,QACP,IAAIwE,EAAAA,GAA+B7H,EAAE+H,QAC9C,CACD,MAAMrH,EAAY,IAAI4F,EAAgB3G,EAAQE,GACxCE,EAAeC,IACbL,IAAWK,EAAE+G,SAEbjB,UAAUC,IAAIiC,oBAAoB,aAAcjI,GAChDW,EAAUoG,gBAAgB,IAAImB,EAAAA,oBAAoB,EAI1D,OAAAnC,UAAUC,IAAImC,iBAAiB,aAAcnI,GACtCW,CACnB,GACK,CAID2C,KAAAA,GACI,OAAOgD,EAAUpF,UAAM,OAAQ,GAAQ,kBAC7BA,KAAKwD,0BACLxD,KAAK8F,OAAOoB,iBAAiBlH,KAAK+F,uBAClCO,EAAsBtG,KAAK8F,cAC3B9F,KAAK8F,OAAO1D,OAC9B,GACK,CAMDhB,QAAAA,CAAS1C,GACL,OAAO0G,EAAUpF,UAAM,OAAQ,GAAQ,YA6BnC,aA5BgBA,KAAKuD,oBAAmB,IAAM6B,EAAUpF,UAAM,OAAQ,GAAQ,YAC1E,MAAQuF,QAAA3G,EAAS+G,WAAAlG,GAAeO,MAChCmH,EAAAA,EAAAA,GAAI,OAAQ,MAAQzI,EAAK0I,SAAS,QAClC,MAAMtI,EFlGGuI,EAAC5I,EAASC,KAAA,CAQ3B4I,UAAAA,CAAW3I,GAKP,IAAIC,EAAO2B,EAAAA,EAAAC,OAAOa,OAAO,CAAC8C,EAAWxF,EAAKqC,QAASrC,IACnD,MAAMc,EAAYf,EAAa,EACzBI,EAAW0G,KAAK+B,KAAK3I,EAAKoC,OAASvB,GAEzCb,EAAO2B,EAAAA,EAAMC,OAACa,OAAO,CAACzC,EAAM2B,EAAAA,EAAAC,OAAOC,MAAM3B,EAAWW,EAAYb,EAAKoC,OAAS,GAAGwG,KAAK,KACtF,MAAMzI,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAUE,IAAK,CAC/B,MAAMK,EAAOkB,EAAAA,EAAAC,OAAOC,MAAM,GAC1BpB,EAAK+E,cAAc3F,EAAS,GAC5BY,EAAKoI,WAvCT,EAuCyB,GACrBpI,EAAK+E,cAAcpF,EAAG,GAEtB,MAAME,EAAQN,EAAK8I,MAAM1I,EAAIS,GAAYT,EAAI,GAAKS,GAClDV,EAAO4I,KAAKpH,EAAAA,EAAAC,OAAOa,OAAO,CAAChC,EAAMH,IACpC,CACD,OAAOH,CACV,EASD6I,cAAAA,CAAejJ,EAAKC,GAChB,IAAM0F,KAAA7E,EAAMyB,WAAApC,EAAYyF,SAAAxF,GAAaJ,GAAO0F,EAC5C,GAAIzF,EAAM4C,aAAa,KAAO/C,EAC1B,MAAM,IAAI0C,EAAAA,GAAe,kBAAmB,kBAEhD,GA5DA,IA4DIvC,EAAMiJ,UAAU,GAChB,MAAM,IAAI1G,EAAAA,GAAe,cAAe,cAE5C,GAAIvC,EAAM4C,aAAa,KAAOzC,EAC1B,MAAM,IAAIoC,EAAAA,GAAe,mBAAoB,mBAG5CxC,IACDG,EAAaF,EAAM4C,aAAa,IAEpCzC,IAEA,MAAMC,EAAYJ,EAAM8I,MAAM/I,EAAM,EAAI,GACxC,OAAAc,EAAOc,EAAAA,EAAMC,OAACa,OAAO,CAAC5B,EAAMT,IAExBS,EAAKuB,OAASlC,IACdW,EAAOA,EAAKiI,MAAM,EAAG5I,IAElB,CACHwF,KAAA7E,EACAyB,WAAApC,EACAyF,SAAAxF,EAEP,EAQD+I,gBAAAA,CAAiBnJ,GACb,GAAIA,GAAOA,EAAIuC,aAAevC,EAAI2F,KAAKtD,OACnC,OAAOrC,EAAI2F,IAElB,IEoBuByD,CAAWnJ,EAASa,GAE9BV,EAASD,EAAQwI,WAAW5I,GAClC,IAAK,IAAIQ,EAAI,EAAGA,EAAIH,EAAOiC,OAAQ9B,UACzBc,KAAK8F,OAAOkC,YAxGf,EAwG2CjJ,EAAOG,IAGzD,IAAIF,EACAK,EACJ,OAASL,EAASF,EAAQgJ,iBAAiBzI,KAAO,CAC9C,MAAMH,QAAUc,KAAK8F,OAAOmC,WA9GzB,EA8GoDxI,GAGjDR,EAASsB,EAAAA,EAAAC,OAAOc,KAAKpC,EAAEoF,KAAK4D,QAClC7I,EAAMP,EAAQ8I,eAAevI,EAAKJ,EACrC,CACD,OAAAkI,EAAAA,EAAAA,GAAI,OAAQ,MAAQnI,EAAOoI,SAAS,QAC7BpI,CACvB,MAAgBmJ,OAAMvJ,IACN,MAAIA,GAAKA,EAAEkI,SAAWlI,EAAEkI,QAAQsB,SAAS,iBACrCpI,KAAK6F,gBAAgBjH,GACf,IAAIyJ,EAAAA,GAAkCzJ,EAAEkI,UAE5ClI,CAAA,GAGtB,GACK,CACDuD,cAAAA,GAAoB,EA4CxB,SAASmE,EAAsB7H,GAC3B,OAAO2G,EAAUpF,UAAM,OAAQ,GAAQ,YACnC,UACUvB,EAAO6J,OAChB,OACM5J,GACHiE,QAAQC,KAAKlE,EAChB,CACT,GACA,CAhDA2G,EAAgBkD,YDhHWA,IAAM1J,QAAQwD,UAAUwC,aAAeA,UAAUC,KAA2C,mBAA7BD,UAAUC,IAAII,YCoHxGG,EAAgBmD,KAAOvD,EAOvBI,EAAgBrC,OAAUvE,IACtB,IAAIC,GAAe,EAsBnB,OD1JG,WACH,OAAO8F,EAAUxE,UAAM,OAAQ,GAAQ,YACnC,MAAMvB,QAAwBwG,IAC9B,OAAIxG,EAAgBuC,OAAS,EAClBvC,EAAgB,GACpBmG,GACf,GACA,CC8HI6D,GAAuB/I,MAAKd,IACxB,IAAKF,EAAc,CACf,MAAMe,GAAcuG,EAAAA,EAAAA,GAAqBpH,EAAOqH,WAChDxH,EAASU,KAAK,CACVuJ,KAAM,MACNvF,WAAYvE,EACZuB,YAAAV,IAEJhB,EAASuD,UACZ,KACFpD,IACK+J,OAAOC,cAAgBhK,aAAiB+J,OAAOC,cAA+B,KAAfhK,EAAMiK,KACrEpK,EAASwD,MAAM,IAAI6G,EAAAA,GAA+BlK,EAAMkI,UAGxDrI,EAASwD,MAAM,IAAI8G,EAAAA,GAA2BnK,EAAMkI,SAAS,IAM9D,CACH5E,YAJJ,WACIxD,GAAe,CAClB,EAGL,C,kICzLA,IAAIe,EAAK,EACT,MAAMT,EAAc,GAOPE,EAAM8J,CAACrK,EAAMC,EAASF,KAC/B,MAAMK,EAAM,CACR2J,KAAA/J,EACAsK,GAAIC,SAASzJ,GACb0J,KAAM,IAAIC,MAEVxK,IACAG,EAAI+H,QAAUlI,GACdF,IACAK,EAAIuF,KAAO5F,GACf0G,EAASrG,EAAI,EAiCV,MAAME,EACTY,WAAAA,CAAYjB,EAAMF,GACdsB,KAAK0I,KAAO9J,EACZoB,KAAKF,QAAUpB,CAClB,CACDuC,KAAAA,CAAMrC,EAASF,GA5BEuC,GAAGyH,KAAA/J,EAAMmI,QAAAlI,EAAS0F,KAAA5F,EAAMoB,QAAAf,MACzC,MAAMD,EAAM,CACR4J,KAAA/J,EACAsK,GAAIC,SAASzJ,GACb0J,KAAM,IAAIC,MAEVxK,IACAE,EAAIgI,QAAUlI,GACdF,IACAI,EAAIwF,KAAO5F,GACXK,IACAD,EAAIgB,QAAUf,GAClBqG,EAAStG,EAAI,EAiBTuG,CAAM,CACFqD,KAAM1I,KAAK0I,KACX5B,QAAAlI,EACA0F,KAAA5F,EACAoB,QAASE,KAAKF,SAErB,CACDoE,UAAAA,GACI,OAAOlE,KAAKF,OACf,CACDuJ,UAAAA,CAAWzK,GACPoB,KAAKF,QAAUlB,CAClB,CACDoF,aAAAA,CAAcpF,GACVoB,KAAKF,QAAUwJ,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGvJ,KAAKF,SAAUlB,EACjE,CACD4K,OAAAA,GACI,OAAOxJ,KAAK0I,IACf,CACDe,OAAAA,CAAQ7K,GACJoB,KAAK0I,KAAO9J,CACf,CAOD8K,QAAAA,CAAS9K,GACL,OAAO,IAAIK,EAAYL,EAAMoB,KAAKF,QACrC,CASDgE,WAAAA,CAAYlF,GACR,OAAO,IAAIK,EAAYe,KAAK0I,KAAM9J,EACrC,CAQDkC,kBAAAA,CAAmBlC,GACf,OAAO,IAAIK,EAAYe,KAAK0I,KAAMY,OAAOC,OAAOD,OAAOC,OAAO,CAAE,EAAEvJ,KAAKF,SAAUlB,GACpF,EAmBL,SAASwG,EAASzG,GACd,IAAK,IAAIC,EAAI,EAAGA,EAAII,EAAYgC,OAAQpC,IACpC,IACII,EAAYJ,GAAGD,EAClB,OACMD,GACHiE,QAAQV,MAAMvD,EACjB,CAET,QACWiK,OAAW,MAClBA,OAAOgB,mBAtBYhL,IACnBK,EAAY2I,KAAKhJ,GACV,KACH,MAAMC,EAAII,EAAY4K,QAAQjL,IACnB,IAAPC,IAEAI,EAAYJ,GAAKI,EAAYA,EAAYgC,OAAS,GAClDhC,EAAY6K,MAAG,G,8DCtGhBnL,EACAI,E,YAAAA,EAMRJ,IAAkBA,EAAgB,CAAE,IALrBoL,KAAU,OACxBhL,EAAciL,MAAW,QACzBjL,EAAckL,OAAY,SAC1BlL,EAAcmL,MAAW,QACzBnL,EAAcoL,KAAU,OAE5B,MAAMzK,EAAU,CACZ,CAACf,EAAcoL,MAAO,CAClBb,GAAIvK,EAAcoL,KAClBK,YAAa,iBACbC,YAAa,EACbC,mBAAoB,EACpBC,SAAS,EACTC,WAAY,OACZC,MAAO,CAAC,UAAY,WACpBC,aAAe3L,GAAoB,MAEvC,CAACJ,EAAcqL,OAAQ,CACnBd,GAAIvK,EAAcqL,MAClBI,YAAa,sBACbC,YAAa,GACbC,mBAAoB,EACpBC,SAAS,EACTC,WAAY,OACZC,MAAO,CAAC,WACRC,aAAe3L,IAAsB,IAAIG,EAAI,OAAOD,EAAAA,EAAO0L,GAA6C,QAAzCzL,EAAKD,EAAAA,EAAO2L,OAAO7L,UAAqC,IAAPG,EAAgBA,EAAK,GAAI,SAAW,KAAW,IAAQ,GAE3K,CAACP,EAAcsL,QAAS,CACpBf,GAAIvK,EAAcsL,OAClBG,YAAa,qBACbC,YAAa,GACbC,mBAAoB,EACpBC,SAAS,EACTC,WAAY,QACZC,MAAO,CAAC,WACRC,aAAe3L,GAAqB,IAExC,CAACJ,EAAcuL,OAAQ,CACnBhB,GAAIvK,EAAcuL,MAClBE,YAAa,sBACbC,YAAa,GACbC,mBAAoB,EACpBC,SAAS,EACTC,WAAY,QACZC,MAAO,CAAC,WACRC,aAAe3L,GAAoB,KACnC8L,cAAe,CACX,CACIC,YAAa,uCACbC,WAAY,uCACZC,UAAW,uCACXC,aAAc,0CAI1B,CAACtM,EAAcwL,MAAO,CAClBjB,GAAIvK,EAAcwL,KAClBC,YAAa,iBACbC,YAAa,GACbC,mBAAoB,EACpBC,SAAS,EACTC,WAAY,QACZC,MAAO,CAAC,WACRC,aAAe3L,GAAqB,GACpC8L,cAAe,CACX,CACIC,YAAa,uCACbC,WAAY,uCACZC,UAAW,uCACXC,aAAc,2CAMpBtM,EAAcoL,KACVpL,EAAcqL,MACTrL,EAAcsL,OACnBtL,EAAcuL,MAClBvL,EAAcwL,KAExB,MAAMnL,EAAcuK,OAAO2B,OAAOxL,GAIrBgE,EAAoB,MAwBpBtC,EAAwBrC,IACjC,MAAMG,EAASF,EAAY0H,MAAK9H,GAAKA,EAAE0L,qBAAuBvL,IAC9D,GAAIG,EACA,OAAOA,EACX,MAAML,EAAKE,GAAgB,EAE3B,OADoBC,EAAY0H,MAAK9H,GAAKA,EAAEyL,cAAgBxL,GAAG,EAO7DS,EAAoB,GACpBZ,EAAqB,CAAC,EAC5B,IAAK,MAAMK,KAAMW,EAAS,CACtB,MAAMR,EAAcQ,EAAQX,IACpB8L,cAAAhM,GAAkBK,EAC1B,GAAIL,EACA,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAcoC,OAAQ9B,IAAK,CAC3C,MAAMP,EAAOC,EAAcM,GAC3BG,EAAkBsI,KAAKhJ,EAAKkM,aAC5BpM,EAAmBE,EAAKkM,aAAepM,EAAmBE,EAAKkM,YAAYK,QAAQ,KAAM,KAAO5B,OAAOC,OAAO,CAAEpJ,YAAAlB,GAAeN,EAClI,CAET,C,8ICnJY,MAACM,EAA0BL,IACnC,MAAMF,UAAyBoD,MAC3BjC,WAAAA,CAAYb,EAASP,EAAQE,GAOzB,GAJA2G,MAAMtG,GAAWJ,EAAMD,GAEvB2K,OAAO6B,eAAenL,KAAMtB,EAAiB0M,WAC7CpL,KAAKqL,KAAOzM,EACRH,EACA,IAAK,MAAMgB,KAAKhB,EAGZuB,KAAKP,GAAKhB,EAAOgB,GAGzB,GAAId,GAchB,SAAkBC,GACd,MAAwB,iBAAVA,CAClB,CAhB2B8B,CAAS/B,IAAY,UAAWA,KAAa,UAAWqB,MAAO,CAG1E,MAAMP,EAAQd,EAAQ2M,MACtBtL,KAAKsL,MAAQ7L,EACT,UAAWA,IACXO,KAAKuL,MAAQvL,KAAKuL,MAAQ,YAAc9L,EAAM8L,MAErD,CACJ,EAGL,OAAO7M,CAAA,ECdC,MAACqK,EAAqB9J,EAAuB,sBAC5CsC,EAAoCtC,EAAuB,qCA6D3DoJ,EAAsBpJ,EAAuB,uBAE7CwE,EAA6BxE,EAAuB,8BACpDI,EAAiCJ,EAAuB,kCACxD2F,EAAyB3F,EAAuB,0BAChDC,EAAiCD,EAAuB,kCAoC3D,IAACuM,EACA5M,KAKR4M,IAAyBA,EAAuB,CAAE,IAJ5BC,QAAa,UAClC7M,EAAqB8M,yBAA8B,2BACnD9M,EAAqB+M,6BAAkC,+BACvD/M,EAAqBgN,yBAA8B,2BAsBhD,MAAM5E,UAAuBlF,MAChCjC,WAAAA,CAAYnB,EAAS4H,GACjB,MAAMtH,EAAO,iBACbsG,MAAM5G,GAAWM,GACjBgB,KAAKqL,KAAOrM,EACZgB,KAAK8G,QAAUpI,EACfsB,KAAKuL,MAAQ,IAAIzJ,MAAMpD,GAAS6M,MAChCvL,KAAKiJ,GAAK3C,CACb,EAGO,MAACxH,EAAc,CACvB+M,+BAAgC,MAChCC,wBAAyB,MACzBC,kBAAmB,MACnBC,aAAc,MACdC,qBAAsB,MACtBC,oCAAqC,MACrCC,gCAAiC,MACjCC,2BAA4B,MAC5BC,iCAAkC,MAClCC,wBAAyB,MACzBC,mBAAoB,MACpBC,oBAAqB,MACrBC,eAAgB,MAChBC,eAAgB,MAChBC,OAAQ,MACRC,kBAAmB,MACnBC,eAAgB,MAChBC,iBAAkB,MAClBC,gBAAiB,MACjBC,kBAAmB,MACnBC,qBAAsB,MACtBC,uBAAwB,MACxBC,YAAa,MACbC,eAAgB,MAChBC,UAAW,MACXC,cAAe,MACfC,kBAAmB,MACnBC,eAAgB,MAChBC,2BAA4B,MAC5BC,eAAgB,MAChBC,wBAAyB,MACzBhN,GAAI,MACJiN,uBAAwB,MACxBC,0BAA2B,MAC3BC,8BAA+B,MAC/BC,kBAAmB,MACnBC,aAAc,MACdC,uBAAwB,MACxBC,iBAAkB,OA4Bf,MAAMnP,UAA6B+C,MAOtCjC,WAAAA,CAAYnB,GAAcyP,wBAAA7H,GAA0B,GAAS,CAAC,GAC1D,MAAMtH,EAAasK,OAAO8E,KAAKtP,GAAa2H,MAAKG,GAAK9H,EAAY8H,KAAOlI,KAAe,gBAClFD,EAnCP,SAA6BG,GAChC,OAAQA,GAEJ,KAAK,MACD,MAAO,mBACX,KAAK,MACD,MAAO,6BACX,KAAK,MACD,MAAO,uEACX,KAAK,MACD,MAAO,uDACX,KAAK,MACD,MAAO,wBACX,KAAK,MACD,MAAO,6BACX,KAAK,MACD,MAAO,gBAEf,GAAI,OAAUA,GAAQA,GAAQ,MAC1B,MAAO,+BAEf,CAcqByP,CAAoB3P,IAAeM,EAE1CS,EAAU,kBAAkBhB,QADZC,EAAW0I,SAAS,OAQ1C,GANA9B,MAAM7F,GACNO,KAAKqL,KAAO,uBACZrL,KAAKsO,WAAa5P,EAClBsB,KAAKuO,WAAavP,EAClBsK,OAAO6B,eAAenL,KAAMjB,EAAqBqM,WAE7C9E,GAA2B5H,IAAeI,EAAYwO,cACtD,OAAO,IAAIkB,EAAkB/O,EAEpC,EAEE,MAAM+O,UAA0BzP,EACnCc,WAAAA,CAAYnB,GACR4G,MAAMxG,EAAYwO,cAAe,CAAEa,yBAAyB,IACxDzP,IACAsB,KAAK8G,QAAUpI,GAEnBsB,KAAKqL,KAAO,oBACZ/B,OAAO6B,eAAenL,KAAMwO,EAAkBpD,UACjD,E","sources":["../node_modules/.pnpm/@ledgerhq+hw-transport@6.30.4/node_modules/@ledgerhq/hw-transport/lib-es/Transport.js","../node_modules/.pnpm/@ledgerhq+devices@8.2.1/node_modules/@ledgerhq/devices/lib-es/hid-framing.js","../node_modules/.pnpm/@ledgerhq+hw-transport-webusb@6.28.4/node_modules/@ledgerhq/hw-transport-webusb/lib-es/webusb.js","../node_modules/.pnpm/@ledgerhq+hw-transport-webusb@6.28.4/node_modules/@ledgerhq/hw-transport-webusb/lib-es/TransportWebUSB.js","../node_modules/.pnpm/@ledgerhq+logs@6.12.0/node_modules/@ledgerhq/logs/lib-es/index.js","../node_modules/.pnpm/@ledgerhq+devices@8.2.1/node_modules/@ledgerhq/devices/lib-es/index.js","../node_modules/.pnpm/@ledgerhq+errors@6.16.2/node_modules/@ledgerhq/errors/lib-es/helpers.js","../node_modules/.pnpm/@ledgerhq+errors@6.16.2/node_modules/@ledgerhq/errors/lib-es/index.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport EventEmitter from \"events\";\nimport { TransportRaceCondition, TransportError, StatusCodes, getAltStatusMessage, TransportStatusError, } from \"@ledgerhq/errors\";\nimport { LocalTracer } from \"@ledgerhq/logs\";\nexport { TransportError, TransportStatusError, StatusCodes, getAltStatusMessage };\nconst DEFAULT_LOG_TYPE = \"transport\";\n/**\n * The Transport class defines a generic interface for communicating with a Ledger hardware wallet.\n * There are different kind of transports based on the technology (channels like U2F, HID, Bluetooth, Webusb) and environment (Node, Web,...).\n * It is an abstract class that needs to be implemented.\n */\nclass Transport {\n    constructor({ context, logType } = {}) {\n        this.exchangeTimeout = 30000;\n        this.unresponsiveTimeout = 15000;\n        this.deviceModel = null;\n        this._events = new EventEmitter();\n        /**\n         * Send data to the device using the higher level API.\n         *\n         * @param {number} cla - The instruction class for the command.\n         * @param {number} ins - The instruction code for the command.\n         * @param {number} p1 - The first parameter for the instruction.\n         * @param {number} p2 - The second parameter for the instruction.\n         * @param {Buffer} data - The data to be sent. Defaults to an empty buffer.\n         * @param {Array<number>} statusList - A list of acceptable status codes for the response. Defaults to [StatusCodes.OK].\n         * @param {Object} options - Contains optional options for the exchange function\n         *  - abortTimeoutMs: stop the send after a given timeout. Another timeout exists\n         *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.\n         * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.\n         */\n        this.send = (cla, ins, p1, p2, data = Buffer.alloc(0), statusList = [StatusCodes.OK], { abortTimeoutMs } = {}) => __awaiter(this, void 0, void 0, function* () {\n            const tracer = this.tracer.withUpdatedContext({ function: \"send\" });\n            if (data.length >= 256) {\n                tracer.trace(\"data.length exceeded 256 bytes limit\", { dataLength: data.length });\n                throw new TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n            }\n            tracer.trace(\"Starting an exchange\", { abortTimeoutMs });\n            const response = yield this.exchange(\n            // The size of the data is added in 1 byte just before `data`\n            Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]), { abortTimeoutMs });\n            tracer.trace(\"Received response from exchange\");\n            const sw = response.readUInt16BE(response.length - 2);\n            if (!statusList.some(s => s === sw)) {\n                throw new TransportStatusError(sw);\n            }\n            return response;\n        });\n        this._appAPIlock = null;\n        this.tracer = new LocalTracer(logType !== null && logType !== void 0 ? logType : DEFAULT_LOG_TYPE, context);\n    }\n    /**\n     * Send data to the device using a low level API.\n     * It's recommended to use the \"send\" method for a higher level API.\n     * @param {Buffer} apdu - The data to send.\n     * @param {Object} options - Contains optional options for the exchange function\n     *  - abortTimeoutMs: stop the exchange after a given timeout. Another timeout exists\n     *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.\n     * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.\n     */\n    exchange(_apdu, { abortTimeoutMs: _abortTimeoutMs } = {}) {\n        throw new Error(\"exchange not implemented\");\n    }\n    /**\n     * Send apdus in batch to the device using a low level API.\n     * The default implementation is to call exchange for each apdu.\n     * @param {Array<Buffer>} apdus - array of apdus to send.\n     * @param {Observer<Buffer>} observer - an observer that will receive the response of each apdu.\n     * @returns {Subscription} A Subscription object on which you can call \".unsubscribe()\" to stop sending apdus.\n     */\n    exchangeBulk(apdus, observer) {\n        let unsubscribed = false;\n        const unsubscribe = () => {\n            unsubscribed = true;\n        };\n        const main = () => __awaiter(this, void 0, void 0, function* () {\n            if (unsubscribed)\n                return;\n            for (const apdu of apdus) {\n                const r = yield this.exchange(apdu);\n                if (unsubscribed)\n                    return;\n                const status = r.readUInt16BE(r.length - 2);\n                if (status !== StatusCodes.OK) {\n                    throw new TransportStatusError(status);\n                }\n                observer.next(r);\n            }\n        });\n        main().then(() => !unsubscribed && observer.complete(), e => !unsubscribed && observer.error(e));\n        return { unsubscribe };\n    }\n    /**\n     * Set the \"scramble key\" for the next data exchanges with the device.\n     * Each app can have a different scramble key and it is set internally during instantiation.\n     * @param {string} key - The scramble key to set.\n     * deprecated This method is no longer needed for modern transports and should be migrated away from.\n     * no @ before deprecated as it breaks documentationjs on version 14.0.2\n     * https://github.com/documentationjs/documentation/issues/1596\n     */\n    setScrambleKey(_key) { }\n    /**\n     * Close the connection with the device.\n     *\n     * Note: for certain transports (hw-transport-node-hid-singleton for ex), once the promise resolved,\n     * the transport instance is actually still cached, and the device is disconnected only after a defined timeout.\n     * But for the consumer of the Transport, this does not matter and it can consider the transport to be closed.\n     *\n     * @returns {Promise<void>} A promise that resolves when the transport is closed.\n     */\n    close() {\n        return Promise.resolve();\n    }\n    /**\n     * Listen for an event on the transport instance.\n     * Transport implementations may have specific events. Common events include:\n     * \"disconnect\" : triggered when the transport is disconnected.\n     * @param {string} eventName - The name of the event to listen for.\n     * @param {(...args: Array<any>) => any} cb - The callback function to be invoked when the event occurs.\n     */\n    on(eventName, cb) {\n        this._events.on(eventName, cb);\n    }\n    /**\n     * Stop listening to an event on an instance of transport.\n     */\n    off(eventName, cb) {\n        this._events.removeListener(eventName, cb);\n    }\n    emit(event, ...args) {\n        this._events.emit(event, ...args);\n    }\n    /**\n     * Enable or not logs of the binary exchange\n     */\n    setDebugMode() {\n        console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n    }\n    /**\n     * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n     */\n    setExchangeTimeout(exchangeTimeout) {\n        this.exchangeTimeout = exchangeTimeout;\n    }\n    /**\n     * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n     */\n    setExchangeUnresponsiveTimeout(unresponsiveTimeout) {\n        this.unresponsiveTimeout = unresponsiveTimeout;\n    }\n    /**\n     * create() allows to open the first descriptor available or\n     * throw if there is none or if timeout is reached.\n     * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n     * @example\n    TransportFoo.create().then(transport => ...)\n     */\n    static create(openTimeout = 3000, listenTimeout) {\n        return new Promise((resolve, reject) => {\n            let found = false;\n            const sub = this.listen({\n                next: e => {\n                    found = true;\n                    if (sub)\n                        sub.unsubscribe();\n                    if (listenTimeoutId)\n                        clearTimeout(listenTimeoutId);\n                    this.open(e.descriptor, openTimeout).then(resolve, reject);\n                },\n                error: e => {\n                    if (listenTimeoutId)\n                        clearTimeout(listenTimeoutId);\n                    reject(e);\n                },\n                complete: () => {\n                    if (listenTimeoutId)\n                        clearTimeout(listenTimeoutId);\n                    if (!found) {\n                        reject(new TransportError(this.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n                    }\n                },\n            });\n            const listenTimeoutId = listenTimeout\n                ? setTimeout(() => {\n                    sub.unsubscribe();\n                    reject(new TransportError(this.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n                }, listenTimeout)\n                : null;\n        });\n    }\n    /**\n     * Wrapper to make an exchange \"atomic\" (blocking any other exchange)\n     *\n     * It also handles \"unresponsiveness\" by emitting \"unresponsive\" and \"responsive\" events.\n     *\n     * @param f The exchange job, using the transport to run\n     * @returns a Promise resolving with the output of the given job\n     */\n    exchangeAtomicImpl(f) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tracer = this.tracer.withUpdatedContext({\n                function: \"exchangeAtomicImpl\",\n                unresponsiveTimeout: this.unresponsiveTimeout,\n            });\n            if (this.exchangeBusyPromise) {\n                tracer.trace(\"Atomic exchange is already busy\");\n                throw new TransportRaceCondition(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n            }\n            // Sets the atomic guard\n            let resolveBusy;\n            const busyPromise = new Promise(r => {\n                resolveBusy = r;\n            });\n            this.exchangeBusyPromise = busyPromise;\n            // The device unresponsiveness handler\n            let unresponsiveReached = false;\n            const timeout = setTimeout(() => {\n                tracer.trace(`Timeout reached, emitting Transport event \"unresponsive\"`, {\n                    unresponsiveTimeout: this.unresponsiveTimeout,\n                });\n                unresponsiveReached = true;\n                this.emit(\"unresponsive\");\n            }, this.unresponsiveTimeout);\n            try {\n                const res = yield f();\n                if (unresponsiveReached) {\n                    tracer.trace(\"Device was unresponsive, emitting responsive\");\n                    this.emit(\"responsive\");\n                }\n                return res;\n            }\n            finally {\n                tracer.trace(\"Finalize, clearing busy guard\");\n                clearTimeout(timeout);\n                if (resolveBusy)\n                    resolveBusy();\n                this.exchangeBusyPromise = null;\n            }\n        });\n    }\n    decorateAppAPIMethods(self, methods, scrambleKey) {\n        for (const methodName of methods) {\n            self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n        }\n    }\n    decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {\n        return (...args) => __awaiter(this, void 0, void 0, function* () {\n            const { _appAPIlock } = this;\n            if (_appAPIlock) {\n                return Promise.reject(new TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\"));\n            }\n            try {\n                this._appAPIlock = methodName;\n                this.setScrambleKey(scrambleKey);\n                return yield f.apply(ctx, args);\n            }\n            finally {\n                this._appAPIlock = null;\n            }\n        });\n    }\n    /**\n     * Sets the context used by the logging/tracing mechanism\n     *\n     * Useful when re-using (cached) the same Transport instance,\n     * but with a new tracing context.\n     *\n     * @param context A TraceContext, that can undefined to reset the context\n     */\n    setTraceContext(context) {\n        this.tracer = this.tracer.withContext(context);\n    }\n    /**\n     * Updates the context used by the logging/tracing mechanism\n     *\n     * The update only overrides the key-value that are already defined in the current context.\n     *\n     * @param contextToAdd A TraceContext that will be added to the current context\n     */\n    updateTraceContext(contextToAdd) {\n        this.tracer.updateContext(contextToAdd);\n    }\n    /**\n     * Gets the tracing context of the transport instance\n     */\n    getTraceContext() {\n        return this.tracer.getContext();\n    }\n}\nTransport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\nTransport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";\nexport default Transport;\n//# sourceMappingURL=Transport.js.map","import { TransportError } from \"@ledgerhq/errors\";\nconst Tag = 0x05;\nfunction asUInt16BE(value) {\n    const b = Buffer.alloc(2);\n    b.writeUInt16BE(value, 0);\n    return b;\n}\nconst initialAcc = {\n    data: Buffer.alloc(0),\n    dataLength: 0,\n    sequence: 0,\n};\n/**\n * Object to handle HID frames (encoding and decoding)\n *\n * @param channel\n * @param packetSize The HID protocol packet size in bytes (usually 64)\n */\nconst createHIDframing = (channel, packetSize) => {\n    return {\n        /**\n         * Frames/encodes an APDU message into HID USB packets/frames\n         *\n         * @param apdu The APDU message to send, in a Buffer containing [cla, ins, p1, p2, data length, data(if not empty)]\n         * @returns an array of HID USB frames ready to be sent\n         */\n        makeBlocks(apdu) {\n            // Encodes the APDU length in 2 bytes before the APDU itself.\n            // The length is measured as the number of bytes.\n            // As the size of the APDU `data` should have been added in 1 byte just before `data`,\n            // the minimum size of an APDU is 5 bytes.\n            let data = Buffer.concat([asUInt16BE(apdu.length), apdu]);\n            const blockSize = packetSize - 5;\n            const nbBlocks = Math.ceil(data.length / blockSize);\n            // Fills data with 0-padding\n            data = Buffer.concat([data, Buffer.alloc(nbBlocks * blockSize - data.length + 1).fill(0)]);\n            const blocks = [];\n            for (let i = 0; i < nbBlocks; i++) {\n                const head = Buffer.alloc(5);\n                head.writeUInt16BE(channel, 0);\n                head.writeUInt8(Tag, 2);\n                head.writeUInt16BE(i, 3);\n                // `slice` and not `subarray`: this might not be a Node Buffer, but probably only a Uint8Array\n                const chunk = data.slice(i * blockSize, (i + 1) * blockSize);\n                blocks.push(Buffer.concat([head, chunk]));\n            }\n            return blocks;\n        },\n        /**\n         * Reduces HID USB packets/frames to one response.\n         *\n         * @param acc The value resulting from (accumulating) the previous call of reduceResponse.\n         *   On first call initialized to `initialAcc`. The accumulator enables handling multi-frames messages.\n         * @param chunk Current chunk to reduce into accumulator\n         * @returns An accumulator value updated with the current chunk\n         */\n        reduceResponse(acc, chunk) {\n            let { data, dataLength, sequence } = acc || initialAcc;\n            if (chunk.readUInt16BE(0) !== channel) {\n                throw new TransportError(\"Invalid channel\", \"InvalidChannel\");\n            }\n            if (chunk.readUInt8(2) !== Tag) {\n                throw new TransportError(\"Invalid tag\", \"InvalidTag\");\n            }\n            if (chunk.readUInt16BE(3) !== sequence) {\n                throw new TransportError(\"Invalid sequence\", \"InvalidSequence\");\n            }\n            // Gets the total length of the response from the 1st frame\n            if (!acc) {\n                dataLength = chunk.readUInt16BE(5);\n            }\n            sequence++;\n            // The total length on the 1st frame takes 2 more bytes\n            const chunkData = chunk.slice(acc ? 5 : 7);\n            data = Buffer.concat([data, chunkData]);\n            // Removes any 0 padding\n            if (data.length > dataLength) {\n                data = data.slice(0, dataLength);\n            }\n            return {\n                data,\n                dataLength,\n                sequence,\n            };\n        },\n        /**\n         * Returns the response message that has been reduced from the HID USB frames\n         *\n         * @param acc The accumulator\n         * @returns A Buffer containing the cleaned response message, or null if no response message, or undefined if the\n         *   accumulator is incorrect (message length is not valid)\n         */\n        getReducedResult(acc) {\n            if (acc && acc.dataLength === acc.data.length) {\n                return acc.data;\n            }\n        },\n    };\n};\nexport default createHIDframing;\n//# sourceMappingURL=hid-framing.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ledgerUSBVendorId } from \"@ledgerhq/devices\";\nconst ledgerDevices = [\n    {\n        vendorId: ledgerUSBVendorId,\n    },\n];\nexport function requestLedgerDevice() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const device = yield navigator.usb.requestDevice({\n            filters: ledgerDevices,\n        });\n        return device;\n    });\n}\nexport function getLedgerDevices() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const devices = yield navigator.usb.getDevices();\n        return devices.filter(d => d.vendorId === ledgerUSBVendorId);\n    });\n}\nexport function getFirstLedgerDevice() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const existingDevices = yield getLedgerDevices();\n        if (existingDevices.length > 0)\n            return existingDevices[0];\n        return requestLedgerDevice();\n    });\n}\nexport const isSupported = () => Promise.resolve(!!navigator && !!navigator.usb && typeof navigator.usb.getDevices === \"function\");\n//# sourceMappingURL=webusb.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport Transport from \"@ledgerhq/hw-transport\";\nimport hidFraming from \"@ledgerhq/devices/hid-framing\";\nimport { identifyUSBProductId } from \"@ledgerhq/devices\";\nimport { log } from \"@ledgerhq/logs\";\nimport { TransportOpenUserCancelled, TransportInterfaceNotAvailable, TransportWebUSBGestureRequired, DisconnectedDeviceDuringOperation, DisconnectedDevice, } from \"@ledgerhq/errors\";\nimport { getLedgerDevices, getFirstLedgerDevice, requestLedgerDevice, isSupported } from \"./webusb\";\nconst configurationValue = 1;\nconst endpointNumber = 3;\n/**\n * WebUSB Transport implementation\n * @example\n * import TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\n * ...\n * TransportWebUSB.create().then(transport => ...)\n */\nclass TransportWebUSB extends Transport {\n    constructor(device, interfaceNumber) {\n        super();\n        this.channel = Math.floor(Math.random() * 0xffff);\n        this.packetSize = 64;\n        this._disconnectEmitted = false;\n        this._emitDisconnect = (e) => {\n            if (this._disconnectEmitted)\n                return;\n            this._disconnectEmitted = true;\n            this.emit(\"disconnect\", e);\n        };\n        this.device = device;\n        this.interfaceNumber = interfaceNumber;\n        this.deviceModel = identifyUSBProductId(device.productId);\n    }\n    /**\n     * Similar to create() except it will always display the device permission (even if some devices are already accepted).\n     */\n    static request() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const device = yield requestLedgerDevice();\n            return TransportWebUSB.open(device);\n        });\n    }\n    /**\n     * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).\n     */\n    static openConnected() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const devices = yield getLedgerDevices();\n            if (devices.length === 0)\n                return null;\n            return TransportWebUSB.open(devices[0]);\n        });\n    }\n    /**\n     * Create a Ledger transport with a USBDevice\n     */\n    static open(device) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield device.open();\n            if (device.configuration === null) {\n                yield device.selectConfiguration(configurationValue);\n            }\n            yield gracefullyResetDevice(device);\n            const iface = device.configurations[0].interfaces.find(({ alternates }) => alternates.some(a => a.interfaceClass === 255));\n            if (!iface) {\n                throw new TransportInterfaceNotAvailable(\"No WebUSB interface found for your Ledger device. Please upgrade firmware or contact techsupport.\");\n            }\n            const interfaceNumber = iface.interfaceNumber;\n            try {\n                yield device.claimInterface(interfaceNumber);\n            }\n            catch (e) {\n                yield device.close();\n                throw new TransportInterfaceNotAvailable(e.message);\n            }\n            const transport = new TransportWebUSB(device, interfaceNumber);\n            const onDisconnect = e => {\n                if (device === e.device) {\n                    // $FlowFixMe\n                    navigator.usb.removeEventListener(\"disconnect\", onDisconnect);\n                    transport._emitDisconnect(new DisconnectedDevice());\n                }\n            };\n            // $FlowFixMe\n            navigator.usb.addEventListener(\"disconnect\", onDisconnect);\n            return transport;\n        });\n    }\n    /**\n     * Release the transport device\n     */\n    close() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.exchangeBusyPromise;\n            yield this.device.releaseInterface(this.interfaceNumber);\n            yield gracefullyResetDevice(this.device);\n            yield this.device.close();\n        });\n    }\n    /**\n     * Exchange with the device using APDU protocol.\n     * @param apdu\n     * @returns a promise of apdu response\n     */\n    exchange(apdu) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const b = yield this.exchangeAtomicImpl(() => __awaiter(this, void 0, void 0, function* () {\n                const { channel, packetSize } = this;\n                log(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n                const framing = hidFraming(channel, packetSize);\n                // Write...\n                const blocks = framing.makeBlocks(apdu);\n                for (let i = 0; i < blocks.length; i++) {\n                    yield this.device.transferOut(endpointNumber, blocks[i]);\n                }\n                // Read...\n                let result;\n                let acc;\n                while (!(result = framing.getReducedResult(acc))) {\n                    const r = yield this.device.transferIn(endpointNumber, packetSize);\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    const buffer = Buffer.from(r.data.buffer);\n                    acc = framing.reduceResponse(acc, buffer);\n                }\n                log(\"apdu\", \"<= \" + result.toString(\"hex\"));\n                return result;\n            })).catch(e => {\n                if (e && e.message && e.message.includes(\"disconnected\")) {\n                    this._emitDisconnect(e);\n                    throw new DisconnectedDeviceDuringOperation(e.message);\n                }\n                throw e;\n            });\n            return b;\n        });\n    }\n    setScrambleKey() { }\n}\n/**\n * Check if WebUSB transport is supported.\n */\nTransportWebUSB.isSupported = isSupported;\n/**\n * List the WebUSB devices that was previously authorized by the user.\n */\nTransportWebUSB.list = getLedgerDevices;\n/**\n * Actively listen to WebUSB devices and emit ONE device\n * that was either accepted before, if not it will trigger the native permission UI.\n *\n * Important: it must be called in the context of a UI click!\n */\nTransportWebUSB.listen = (observer) => {\n    let unsubscribed = false;\n    getFirstLedgerDevice().then(device => {\n        if (!unsubscribed) {\n            const deviceModel = identifyUSBProductId(device.productId);\n            observer.next({\n                type: \"add\",\n                descriptor: device,\n                deviceModel,\n            });\n            observer.complete();\n        }\n    }, error => {\n        if (window.DOMException && error instanceof window.DOMException && error.code === 18) {\n            observer.error(new TransportWebUSBGestureRequired(error.message));\n        }\n        else {\n            observer.error(new TransportOpenUserCancelled(error.message));\n        }\n    });\n    function unsubscribe() {\n        unsubscribed = true;\n    }\n    return {\n        unsubscribe,\n    };\n};\nexport default TransportWebUSB;\nfunction gracefullyResetDevice(device) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield device.reset();\n        }\n        catch (err) {\n            console.warn(err);\n        }\n    });\n}\n//# sourceMappingURL=TransportWebUSB.js.map","let id = 0;\nconst subscribers = [];\n/**\n * Logs something\n *\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport const log = (type, message, data) => {\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date(),\n    };\n    if (message)\n        obj.message = message;\n    if (data)\n        obj.data = data;\n    dispatch(obj);\n};\n/**\n * A simple tracer function, only expanding the existing log function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param context Anything representing the context where the log occurred\n */\nexport const trace = ({ type, message, data, context, }) => {\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date(),\n    };\n    if (message)\n        obj.message = message;\n    if (data)\n        obj.data = data;\n    if (context)\n        obj.context = context;\n    dispatch(obj);\n};\n/**\n * A simple tracer class, that can be used to avoid repetition when using the `trace` function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param type A given type (not level) for the current local tracer (\"hw\", \"withDevice\", etc.)\n * @param context Anything representing the context where the log occurred\n */\nexport class LocalTracer {\n    constructor(type, context) {\n        this.type = type;\n        this.context = context;\n    }\n    trace(message, data) {\n        trace({\n            type: this.type,\n            message,\n            data,\n            context: this.context,\n        });\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n    }\n    updateContext(contextToAdd) {\n        this.context = Object.assign(Object.assign({}, this.context), contextToAdd);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = type;\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `type`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */\n    withType(type) {\n        return new LocalTracer(type, this.context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with a new `context`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     *\n     * @param context A TraceContext, that can undefined to reset the context\n     */\n    withContext(context) {\n        return new LocalTracer(this.type, context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `context`,\n     * on which an additional context is merged with the existing one.\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */\n    withUpdatedContext(contextToAdd) {\n        return new LocalTracer(this.type, Object.assign(Object.assign({}, this.context), contextToAdd));\n    }\n}\n/**\n * Adds a subscribers to the emitted logs.\n *\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport const listen = (cb) => {\n    subscribers.push(cb);\n    return () => {\n        const i = subscribers.indexOf(cb);\n        if (i !== -1) {\n            // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n            subscribers[i] = subscribers[subscribers.length - 1];\n            subscribers.pop();\n        }\n    };\n};\nfunction dispatch(log) {\n    for (let i = 0; i < subscribers.length; i++) {\n        try {\n            subscribers[i](log);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\nif (typeof window !== \"undefined\") {\n    window.__ledgerLogsListen = listen;\n}\n//# sourceMappingURL=index.js.map","import semver from \"semver\";\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\nexport const IIGenericHID = 0x01;\nexport const IIKeyboardHID = 0x02;\nexport const IIU2F = 0x04;\nexport const IICCID = 0x08;\nexport const IIWebUSB = 0x10;\nexport var DeviceModelId;\n(function (DeviceModelId) {\n    DeviceModelId[\"blue\"] = \"blue\";\n    DeviceModelId[\"nanoS\"] = \"nanoS\";\n    DeviceModelId[\"nanoSP\"] = \"nanoSP\";\n    DeviceModelId[\"nanoX\"] = \"nanoX\";\n    DeviceModelId[\"stax\"] = \"stax\";\n})(DeviceModelId || (DeviceModelId = {}));\nconst devices = {\n    [DeviceModelId.blue]: {\n        id: DeviceModelId.blue,\n        productName: \"Ledger Blue\",\n        productIdMM: 0x00,\n        legacyUsbProductId: 0x0000,\n        usbOnly: true,\n        memorySize: 480 * 1024,\n        masks: [0x31000000, 0x31010000],\n        getBlockSize: (_firwareVersion) => 4 * 1024,\n    },\n    [DeviceModelId.nanoS]: {\n        id: DeviceModelId.nanoS,\n        productName: \"Ledger Nano S\",\n        productIdMM: 0x10,\n        legacyUsbProductId: 0x0001,\n        usbOnly: true,\n        memorySize: 320 * 1024,\n        masks: [0x31100000],\n        getBlockSize: (firmwareVersion) => { var _a; return semver.lt((_a = semver.coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : \"\", \"2.0.0\") ? 4 * 1024 : 2 * 1024; },\n    },\n    [DeviceModelId.nanoSP]: {\n        id: DeviceModelId.nanoSP,\n        productName: \"Ledger Nano S Plus\",\n        productIdMM: 0x50,\n        legacyUsbProductId: 0x0005,\n        usbOnly: true,\n        memorySize: 1533 * 1024,\n        masks: [0x33100000],\n        getBlockSize: (_firmwareVersion) => 32,\n    },\n    [DeviceModelId.nanoX]: {\n        id: DeviceModelId.nanoX,\n        productName: \"Ledger Nano X\",\n        productIdMM: 0x40,\n        legacyUsbProductId: 0x0004,\n        usbOnly: false,\n        memorySize: 2 * 1024 * 1024,\n        masks: [0x33000000],\n        getBlockSize: (_firwareVersion) => 4 * 1024,\n        bluetoothSpec: [\n            {\n                serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n                notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n                writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n                writeCmdUuid: \"13d63400-2c97-0004-0003-4c6564676572\",\n            },\n        ],\n    },\n    [DeviceModelId.stax]: {\n        id: DeviceModelId.stax,\n        productName: \"Ledger Stax\",\n        productIdMM: 0x60,\n        legacyUsbProductId: 0x0006,\n        usbOnly: false,\n        memorySize: 1533 * 1024,\n        masks: [0x33200000],\n        getBlockSize: (_firmwareVersion) => 32,\n        bluetoothSpec: [\n            {\n                serviceUuid: \"13d63400-2c97-6004-0000-4c6564676572\",\n                notifyUuid: \"13d63400-2c97-6004-0001-4c6564676572\",\n                writeUuid: \"13d63400-2c97-6004-0002-4c6564676572\",\n                writeCmdUuid: \"13d63400-2c97-6004-0003-4c6564676572\",\n            },\n        ],\n    },\n};\nconst productMap = {\n    Blue: DeviceModelId.blue,\n    \"Nano S\": DeviceModelId.nanoS,\n    \"Nano S Plus\": DeviceModelId.nanoSP,\n    \"Nano X\": DeviceModelId.nanoX,\n    Stax: DeviceModelId.stax,\n};\nconst devicesList = Object.values(devices);\n/**\n *\n */\nexport const ledgerUSBVendorId = 0x2c97;\n/**\n *\n */\nexport const getDeviceModel = (id) => {\n    const info = devices[id];\n    if (!info)\n        throw new Error(\"device '\" + id + \"' does not exist\");\n    return info;\n};\n/**\n * Given a `targetId`, return the deviceModel associated to it,\n * based on the first two bytes.\n */\nexport const identifyTargetId = (targetId) => {\n    const deviceModel = devicesList.find(({ masks }) => masks.find(mask => (targetId & 0xffff0000) === mask));\n    return deviceModel;\n};\n/**\n * From a given USB product id, return the deviceModel associated to it.\n *\n * The mapping from the product id is only based on the 2 most significant bytes.\n * For example, Stax is defined with a product id of 0x60ii, a product id 0x6011 would be mapped to it.\n */\nexport const identifyUSBProductId = (usbProductId) => {\n    const legacy = devicesList.find(d => d.legacyUsbProductId === usbProductId);\n    if (legacy)\n        return legacy;\n    const mm = usbProductId >> 8;\n    const deviceModel = devicesList.find(d => d.productIdMM === mm);\n    return deviceModel;\n};\nexport const identifyProductName = (productName) => {\n    const deviceModel = devicesList.find(d => d.id === productMap[productName]);\n    return deviceModel;\n};\nconst bluetoothServices = [];\nconst serviceUuidToInfos = {};\nfor (const id in devices) {\n    const deviceModel = devices[id];\n    const { bluetoothSpec } = deviceModel;\n    if (bluetoothSpec) {\n        for (let i = 0; i < bluetoothSpec.length; i++) {\n            const spec = bluetoothSpec[i];\n            bluetoothServices.push(spec.serviceUuid);\n            serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = Object.assign({ deviceModel }, spec);\n        }\n    }\n}\n/**\n *\n */\nexport const getBluetoothServiceUuids = () => bluetoothServices;\n/**\n *\n */\nexport const getInfosForServiceUuid = (uuid) => serviceUuidToInfos[uuid.toLowerCase()];\n//# sourceMappingURL=index.js.map","/* eslint-disable no-continue */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\nconst errorClasses = {};\nconst deserializers = {};\nexport const addCustomErrorDeserializer = (name, deserializer) => {\n    deserializers[name] = deserializer;\n};\nexport const createCustomErrorClass = (name) => {\n    class CustomErrorClass extends Error {\n        constructor(message, fields, options) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            super(message || name, options);\n            // Set the prototype explicitly. See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n            Object.setPrototypeOf(this, CustomErrorClass.prototype);\n            this.name = name;\n            if (fields) {\n                for (const k in fields) {\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this[k] = fields[k];\n                }\n            }\n            if (options && isObject(options) && \"cause\" in options && !(\"cause\" in this)) {\n                // .cause was specified but the superconstructor\n                // did not create an instance property.\n                const cause = options.cause;\n                this.cause = cause;\n                if (\"stack\" in cause) {\n                    this.stack = this.stack + \"\\nCAUSE: \" + cause.stack;\n                }\n            }\n        }\n    }\n    errorClasses[name] = CustomErrorClass;\n    return CustomErrorClass;\n};\nfunction isObject(value) {\n    return typeof value === \"object\";\n}\n// inspired from https://github.com/programble/errio/blob/master/index.js\nexport const deserializeError = (object) => {\n    if (object && typeof object === \"object\") {\n        try {\n            if (typeof object.message === \"string\") {\n                const msg = JSON.parse(object.message);\n                if (msg.message && msg.name) {\n                    object = msg;\n                }\n            }\n        }\n        catch (e) {\n            // nothing\n        }\n        let error;\n        if (typeof object.name === \"string\") {\n            const { name } = object;\n            const des = deserializers[name];\n            if (des) {\n                error = des(object);\n            }\n            else {\n                let constructor = name === \"Error\" ? Error : errorClasses[name];\n                if (!constructor) {\n                    console.warn(\"deserializing an unknown class '\" + name + \"'\");\n                    constructor = createCustomErrorClass(name);\n                }\n                error = Object.create(constructor.prototype);\n                try {\n                    for (const prop in object) {\n                        if (object.hasOwnProperty(prop)) {\n                            error[prop] = object[prop];\n                        }\n                    }\n                }\n                catch (e) {\n                    // sometimes setting a property can fail (e.g. .name)\n                }\n            }\n        }\n        else {\n            if (typeof object.message === \"string\") {\n                error = new Error(object.message);\n            }\n        }\n        if (error && !error.stack && Error.captureStackTrace) {\n            Error.captureStackTrace(error, deserializeError);\n        }\n        return error;\n    }\n    return new Error(String(object));\n};\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\nexport const serializeError = (value) => {\n    if (!value)\n        return value;\n    if (typeof value === \"object\") {\n        return destroyCircular(value, []);\n    }\n    if (typeof value === \"function\") {\n        return `[Function: ${value.name || \"anonymous\"}]`;\n    }\n    return value;\n};\n// https://www.npmjs.com/package/destroy-circular\nfunction destroyCircular(from, seen) {\n    const to = {};\n    seen.push(from);\n    for (const key of Object.keys(from)) {\n        const value = from[key];\n        if (typeof value === \"function\") {\n            continue;\n        }\n        if (!value || typeof value !== \"object\") {\n            to[key] = value;\n            continue;\n        }\n        if (seen.indexOf(from[key]) === -1) {\n            to[key] = destroyCircular(from[key], seen.slice(0));\n            continue;\n        }\n        to[key] = \"[Circular]\";\n    }\n    if (typeof from.name === \"string\") {\n        to.name = from.name;\n    }\n    if (typeof from.message === \"string\") {\n        to.message = from.message;\n    }\n    if (typeof from.stack === \"string\") {\n        to.stack = from.stack;\n    }\n    return to;\n}\n//# sourceMappingURL=helpers.js.map","import { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer, } from \"./helpers\";\nexport { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer };\nexport const AccountNameRequiredError = createCustomErrorClass(\"AccountNameRequired\");\nexport const AccountNotSupported = createCustomErrorClass(\"AccountNotSupported\");\nexport const AmountRequired = createCustomErrorClass(\"AmountRequired\");\nexport const BluetoothRequired = createCustomErrorClass(\"BluetoothRequired\");\nexport const BtcUnmatchedApp = createCustomErrorClass(\"BtcUnmatchedApp\");\nexport const CantOpenDevice = createCustomErrorClass(\"CantOpenDevice\");\nexport const CashAddrNotSupported = createCustomErrorClass(\"CashAddrNotSupported\");\nexport const ClaimRewardsFeesWarning = createCustomErrorClass(\"ClaimRewardsFeesWarning\");\nexport const CurrencyNotSupported = createCustomErrorClass(\"CurrencyNotSupported\");\nexport const DeviceAppVerifyNotSupported = createCustomErrorClass(\"DeviceAppVerifyNotSupported\");\nexport const DeviceGenuineSocketEarlyClose = createCustomErrorClass(\"DeviceGenuineSocketEarlyClose\");\nexport const DeviceNotGenuineError = createCustomErrorClass(\"DeviceNotGenuine\");\nexport const DeviceOnDashboardExpected = createCustomErrorClass(\"DeviceOnDashboardExpected\");\nexport const DeviceOnDashboardUnexpected = createCustomErrorClass(\"DeviceOnDashboardUnexpected\");\nexport const DeviceInOSUExpected = createCustomErrorClass(\"DeviceInOSUExpected\");\nexport const DeviceHalted = createCustomErrorClass(\"DeviceHalted\");\nexport const DeviceNameInvalid = createCustomErrorClass(\"DeviceNameInvalid\");\nexport const DeviceSocketFail = createCustomErrorClass(\"DeviceSocketFail\");\nexport const DeviceSocketNoBulkStatus = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\nexport const DeviceNeedsRestart = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\nexport const UnresponsiveDeviceError = createCustomErrorClass(\"UnresponsiveDeviceError\");\nexport const DisconnectedDevice = createCustomErrorClass(\"DisconnectedDevice\");\nexport const DisconnectedDeviceDuringOperation = createCustomErrorClass(\"DisconnectedDeviceDuringOperation\");\nexport const DeviceExtractOnboardingStateError = createCustomErrorClass(\"DeviceExtractOnboardingStateError\");\nexport const DeviceOnboardingStatePollingError = createCustomErrorClass(\"DeviceOnboardingStatePollingError\");\nexport const EnpointConfigError = createCustomErrorClass(\"EnpointConfig\");\nexport const EthAppPleaseEnableContractData = createCustomErrorClass(\"EthAppPleaseEnableContractData\");\nexport const FeeEstimationFailed = createCustomErrorClass(\"FeeEstimationFailed\");\nexport const FirmwareNotRecognized = createCustomErrorClass(\"FirmwareNotRecognized\");\nexport const HardResetFail = createCustomErrorClass(\"HardResetFail\");\nexport const InvalidXRPTag = createCustomErrorClass(\"InvalidXRPTag\");\nexport const InvalidAddress = createCustomErrorClass(\"InvalidAddress\");\nexport const InvalidNonce = createCustomErrorClass(\"InvalidNonce\");\nexport const InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass(\"InvalidAddressBecauseDestinationIsAlsoSource\");\nexport const LatestMCUInstalledError = createCustomErrorClass(\"LatestMCUInstalledError\");\nexport const UnknownMCU = createCustomErrorClass(\"UnknownMCU\");\nexport const LedgerAPIError = createCustomErrorClass(\"LedgerAPIError\");\nexport const LedgerAPIErrorWithMessage = createCustomErrorClass(\"LedgerAPIErrorWithMessage\");\nexport const LedgerAPINotAvailable = createCustomErrorClass(\"LedgerAPINotAvailable\");\nexport const ManagerAppAlreadyInstalledError = createCustomErrorClass(\"ManagerAppAlreadyInstalled\");\nexport const ManagerAppRelyOnBTCError = createCustomErrorClass(\"ManagerAppRelyOnBTC\");\nexport const ManagerAppDepInstallRequired = createCustomErrorClass(\"ManagerAppDepInstallRequired\");\nexport const ManagerAppDepUninstallRequired = createCustomErrorClass(\"ManagerAppDepUninstallRequired\");\nexport const ManagerDeviceLockedError = createCustomErrorClass(\"ManagerDeviceLocked\");\nexport const ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass(\"ManagerFirmwareNotEnoughSpace\");\nexport const ManagerNotEnoughSpaceError = createCustomErrorClass(\"ManagerNotEnoughSpace\");\nexport const ManagerUninstallBTCDep = createCustomErrorClass(\"ManagerUninstallBTCDep\");\nexport const NetworkDown = createCustomErrorClass(\"NetworkDown\");\nexport const NetworkError = createCustomErrorClass(\"NetworkError\");\nexport const NoAddressesFound = createCustomErrorClass(\"NoAddressesFound\");\nexport const NotEnoughBalance = createCustomErrorClass(\"NotEnoughBalance\");\nexport const NotEnoughBalanceToDelegate = createCustomErrorClass(\"NotEnoughBalanceToDelegate\");\nexport const NotEnoughBalanceInParentAccount = createCustomErrorClass(\"NotEnoughBalanceInParentAccount\");\nexport const NotEnoughSpendableBalance = createCustomErrorClass(\"NotEnoughSpendableBalance\");\nexport const NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass(\"NotEnoughBalanceBecauseDestinationNotCreated\");\nexport const NoAccessToCamera = createCustomErrorClass(\"NoAccessToCamera\");\nexport const NotEnoughGas = createCustomErrorClass(\"NotEnoughGas\");\n// Error message specifically for the PTX swap flow\nexport const NotEnoughGasSwap = createCustomErrorClass(\"NotEnoughGasSwap\");\nexport const NotSupportedLegacyAddress = createCustomErrorClass(\"NotSupportedLegacyAddress\");\nexport const GasLessThanEstimate = createCustomErrorClass(\"GasLessThanEstimate\");\nexport const PriorityFeeTooLow = createCustomErrorClass(\"PriorityFeeTooLow\");\nexport const PriorityFeeTooHigh = createCustomErrorClass(\"PriorityFeeTooHigh\");\nexport const PriorityFeeHigherThanMaxFee = createCustomErrorClass(\"PriorityFeeHigherThanMaxFee\");\nexport const MaxFeeTooLow = createCustomErrorClass(\"MaxFeeTooLow\");\nexport const PasswordsDontMatchError = createCustomErrorClass(\"PasswordsDontMatch\");\nexport const PasswordIncorrectError = createCustomErrorClass(\"PasswordIncorrect\");\nexport const RecommendSubAccountsToEmpty = createCustomErrorClass(\"RecommendSubAccountsToEmpty\");\nexport const RecommendUndelegation = createCustomErrorClass(\"RecommendUndelegation\");\nexport const TimeoutTagged = createCustomErrorClass(\"TimeoutTagged\");\nexport const UnexpectedBootloader = createCustomErrorClass(\"UnexpectedBootloader\");\nexport const MCUNotGenuineToDashboard = createCustomErrorClass(\"MCUNotGenuineToDashboard\");\nexport const RecipientRequired = createCustomErrorClass(\"RecipientRequired\");\nexport const UnavailableTezosOriginatedAccountReceive = createCustomErrorClass(\"UnavailableTezosOriginatedAccountReceive\");\nexport const UnavailableTezosOriginatedAccountSend = createCustomErrorClass(\"UnavailableTezosOriginatedAccountSend\");\nexport const UpdateFetchFileFail = createCustomErrorClass(\"UpdateFetchFileFail\");\nexport const UpdateIncorrectHash = createCustomErrorClass(\"UpdateIncorrectHash\");\nexport const UpdateIncorrectSig = createCustomErrorClass(\"UpdateIncorrectSig\");\nexport const UpdateYourApp = createCustomErrorClass(\"UpdateYourApp\");\nexport const UserRefusedDeviceNameChange = createCustomErrorClass(\"UserRefusedDeviceNameChange\");\nexport const UserRefusedAddress = createCustomErrorClass(\"UserRefusedAddress\");\nexport const UserRefusedFirmwareUpdate = createCustomErrorClass(\"UserRefusedFirmwareUpdate\");\nexport const UserRefusedAllowManager = createCustomErrorClass(\"UserRefusedAllowManager\");\nexport const UserRefusedOnDevice = createCustomErrorClass(\"UserRefusedOnDevice\"); // TODO rename because it's just for transaction refusal\nexport const ExpertModeRequired = createCustomErrorClass(\"ExpertModeRequired\");\nexport const TransportOpenUserCancelled = createCustomErrorClass(\"TransportOpenUserCancelled\");\nexport const TransportInterfaceNotAvailable = createCustomErrorClass(\"TransportInterfaceNotAvailable\");\nexport const TransportRaceCondition = createCustomErrorClass(\"TransportRaceCondition\");\nexport const TransportWebUSBGestureRequired = createCustomErrorClass(\"TransportWebUSBGestureRequired\");\nexport const TransactionHasBeenValidatedError = createCustomErrorClass(\"TransactionHasBeenValidatedError\");\nexport const TransportExchangeTimeoutError = createCustomErrorClass(\"TransportExchangeTimeoutError\");\nexport const DeviceShouldStayInApp = createCustomErrorClass(\"DeviceShouldStayInApp\");\nexport const WebsocketConnectionError = createCustomErrorClass(\"WebsocketConnectionError\");\nexport const WebsocketConnectionFailed = createCustomErrorClass(\"WebsocketConnectionFailed\");\nexport const WrongDeviceForAccount = createCustomErrorClass(\"WrongDeviceForAccount\");\nexport const WrongAppForCurrency = createCustomErrorClass(\"WrongAppForCurrency\");\nexport const ETHAddressNonEIP = createCustomErrorClass(\"ETHAddressNonEIP\");\nexport const CantScanQRCode = createCustomErrorClass(\"CantScanQRCode\");\nexport const FeeNotLoaded = createCustomErrorClass(\"FeeNotLoaded\");\nexport const FeeNotLoadedSwap = createCustomErrorClass(\"FeeNotLoadedSwap\");\nexport const FeeRequired = createCustomErrorClass(\"FeeRequired\");\nexport const FeeTooHigh = createCustomErrorClass(\"FeeTooHigh\");\nexport const PendingOperation = createCustomErrorClass(\"PendingOperation\");\nexport const SyncError = createCustomErrorClass(\"SyncError\");\nexport const PairingFailed = createCustomErrorClass(\"PairingFailed\");\nexport const PeerRemovedPairing = createCustomErrorClass(\"PeerRemovedPairing\");\nexport const GenuineCheckFailed = createCustomErrorClass(\"GenuineCheckFailed\");\nexport const LedgerAPI4xx = createCustomErrorClass(\"LedgerAPI4xx\");\nexport const LedgerAPI5xx = createCustomErrorClass(\"LedgerAPI5xx\");\nexport const FirmwareOrAppUpdateRequired = createCustomErrorClass(\"FirmwareOrAppUpdateRequired\");\n// SpeedUp / Cancel EVM tx\nexport const ReplacementTransactionUnderpriced = createCustomErrorClass(\"ReplacementTransactionUnderpriced\");\n// Bitcoin family\nexport const OpReturnDataSizeLimit = createCustomErrorClass(\"OpReturnSizeLimit\");\nexport const DustLimit = createCustomErrorClass(\"DustLimit\");\n// Language\nexport const LanguageNotFound = createCustomErrorClass(\"LanguageNotFound\");\n// db stuff, no need to translate\nexport const NoDBPathGiven = createCustomErrorClass(\"NoDBPathGiven\");\nexport const DBWrongPassword = createCustomErrorClass(\"DBWrongPassword\");\nexport const DBNotReset = createCustomErrorClass(\"DBNotReset\");\n/**\n * Type of a Transport error used to represent all equivalent errors coming from all possible implementation of Transport\n */\nexport var HwTransportErrorType;\n(function (HwTransportErrorType) {\n    HwTransportErrorType[\"Unknown\"] = \"Unknown\";\n    HwTransportErrorType[\"LocationServicesDisabled\"] = \"LocationServicesDisabled\";\n    HwTransportErrorType[\"LocationServicesUnauthorized\"] = \"LocationServicesUnauthorized\";\n    HwTransportErrorType[\"BluetoothScanStartFailed\"] = \"BluetoothScanStartFailed\";\n})(HwTransportErrorType || (HwTransportErrorType = {}));\n/**\n * Represents an error coming from the usage of any Transport implementation.\n *\n * Needed to map a specific implementation error into an error that\n * can be managed by any code unaware of the specific Transport implementation\n * that was used.\n */\nexport class HwTransportError extends Error {\n    constructor(type, message) {\n        super(message);\n        this.name = \"HwTransportError\";\n        this.type = type;\n        // Needed as long as we target < ES6\n        Object.setPrototypeOf(this, HwTransportError.prototype);\n    }\n}\n/**\n * TransportError is used for any generic transport errors.\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\n */\nexport class TransportError extends Error {\n    constructor(message, id) {\n        const name = \"TransportError\";\n        super(message || name);\n        this.name = name;\n        this.message = message;\n        this.stack = new Error(message).stack;\n        this.id = id;\n    }\n}\naddCustomErrorDeserializer(\"TransportError\", e => new TransportError(e.message, e.id));\nexport const StatusCodes = {\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\n    CLA_NOT_SUPPORTED: 0x6e00,\n    CODE_BLOCKED: 0x9840,\n    CODE_NOT_INITIALIZED: 0x9802,\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\n    CONTRADICTION_INVALIDATION: 0x9810,\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\n    CUSTOM_IMAGE_BOOTLOADER: 0x662f,\n    CUSTOM_IMAGE_EMPTY: 0x662e,\n    FILE_ALREADY_EXISTS: 0x6a89,\n    FILE_NOT_FOUND: 0x9404,\n    GP_AUTH_FAILED: 0x6300,\n    HALTED: 0x6faa,\n    INCONSISTENT_FILE: 0x9408,\n    INCORRECT_DATA: 0x6a80,\n    INCORRECT_LENGTH: 0x6700,\n    INCORRECT_P1_P2: 0x6b00,\n    INS_NOT_SUPPORTED: 0x6d00,\n    DEVICE_NOT_ONBOARDED: 0x6d07,\n    DEVICE_NOT_ONBOARDED_2: 0x6611,\n    INVALID_KCV: 0x9485,\n    INVALID_OFFSET: 0x9402,\n    LICENSING: 0x6f42,\n    LOCKED_DEVICE: 0x5515,\n    MAX_VALUE_REACHED: 0x9850,\n    MEMORY_PROBLEM: 0x9240,\n    MISSING_CRITICAL_PARAMETER: 0x6800,\n    NO_EF_SELECTED: 0x9400,\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\n    OK: 0x9000,\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\n    TECHNICAL_PROBLEM: 0x6f00,\n    UNKNOWN_APDU: 0x6d02,\n    USER_REFUSED_ON_DEVICE: 0x5501,\n    NOT_ENOUGH_SPACE: 0x5102,\n};\nexport function getAltStatusMessage(code) {\n    switch (code) {\n        // improve text of most common errors\n        case 0x6700:\n            return \"Incorrect length\";\n        case 0x6800:\n            return \"Missing critical parameter\";\n        case 0x6982:\n            return \"Security not satisfied (dongle locked or have invalid access rights)\";\n        case 0x6985:\n            return \"Condition of use not satisfied (denied by the user?)\";\n        case 0x6a80:\n            return \"Invalid data received\";\n        case 0x6b00:\n            return \"Invalid parameter received\";\n        case 0x5515:\n            return \"Locked device\";\n    }\n    if (0x6f00 <= code && code <= 0x6fff) {\n        return \"Internal error, please report\";\n    }\n}\n/**\n * Error thrown when a device returned a non success status.\n * the error.statusCode is one of the `StatusCodes` exported by this library.\n */\nexport class TransportStatusError extends Error {\n    /**\n     * @param statusCode The error status code coming from a Transport implementation\n     * @param options containing:\n     *  - canBeMappedToChildError: enable the mapping of TransportStatusError to an error extending/inheriting from it\n     *  . Ex: LockedDeviceError. Default to true.\n     */\n    constructor(statusCode, { canBeMappedToChildError = true } = {}) {\n        const statusText = Object.keys(StatusCodes).find(k => StatusCodes[k] === statusCode) || \"UNKNOWN_ERROR\";\n        const smsg = getAltStatusMessage(statusCode) || statusText;\n        const statusCodeStr = statusCode.toString(16);\n        const message = `Ledger device: ${smsg} (0x${statusCodeStr})`;\n        super(message);\n        this.name = \"TransportStatusError\";\n        this.statusCode = statusCode;\n        this.statusText = statusText;\n        Object.setPrototypeOf(this, TransportStatusError.prototype);\n        // Maps to a LockedDeviceError\n        if (canBeMappedToChildError && statusCode === StatusCodes.LOCKED_DEVICE) {\n            return new LockedDeviceError(message);\n        }\n    }\n}\nexport class LockedDeviceError extends TransportStatusError {\n    constructor(message) {\n        super(StatusCodes.LOCKED_DEVICE, { canBeMappedToChildError: false });\n        if (message) {\n            this.message = message;\n        }\n        this.name = \"LockedDeviceError\";\n        Object.setPrototypeOf(this, LockedDeviceError.prototype);\n    }\n}\naddCustomErrorDeserializer(\"TransportStatusError\", e => new TransportStatusError(e.statusCode));\n//# sourceMappingURL=index.js.map"],"names":["v","a","e","n","t","Promise","o","i","s","c","d","next","l","u","throw","done","value","r","then","apply","g","constructor","context","logType","this","exchangeTimeout","unresponsiveTimeout","deviceModel","_events","U","send","f","Buffer","alloc","I","OK","abortTimeoutMs","tracer","withUpdatedContext","function","length","trace","dataLength","m","exchange","concat","from","x","readUInt16BE","some","M","b","_appAPIlock","q","Error","exchangeBulk","complete","error","unsubscribe","setScrambleKey","close","resolve","on","off","removeListener","emit","setDebugMode","console","warn","setExchangeTimeout","setExchangeUnresponsiveTimeout","create","listen","clearTimeout","open","descriptor","ErrorMessage_NoDeviceFound","setTimeout","ErrorMessage_ListenTimeout","exchangeAtomicImpl","exchangeBusyPromise","S","decorateAppAPIMethods","decorateAppAPIMethod","reject","setTraceContext","withContext","updateTraceContext","updateContext","getTraceContext","getContext","F","writeUInt16BE","K","data","sequence","w","G","vendorId","L","A","navigator","usb","requestDevice","filters","y","getDevices","filter","h","p","super","channel","Math","floor","random","packetSize","_disconnectEmitted","_emitDisconnect","device","interfaceNumber","k","productId","request","openConnected","configuration","selectConfiguration","E","configurations","interfaces","find","alternates","interfaceClass","T","claimInterface","message","removeEventListener","R","addEventListener","releaseInterface","B","toString","createHIDframing","makeBlocks","ceil","fill","writeUInt8","slice","push","reduceResponse","readUInt8","getReducedResult","z","transferOut","transferIn","buffer","catch","includes","C","reset","isSupported","list","V","type","window","DOMException","code","P","N","log","id","String","date","Date","setContext","Object","assign","getType","setType","withType","__ledgerLogsListen","indexOf","pop","blue","nanoS","nanoSP","nanoX","stax","productName","productIdMM","legacyUsbProductId","usbOnly","memorySize","masks","getBlockSize","lt","coerce","bluetoothSpec","serviceUuid","notifyUuid","writeUuid","writeCmdUuid","values","replace","setPrototypeOf","prototype","name","cause","stack","_","Unknown","LocationServicesDisabled","LocationServicesUnauthorized","BluetoothScanStartFailed","ACCESS_CONDITION_NOT_FULFILLED","ALGORITHM_NOT_SUPPORTED","CLA_NOT_SUPPORTED","CODE_BLOCKED","CODE_NOT_INITIALIZED","COMMAND_INCOMPATIBLE_FILE_STRUCTURE","CONDITIONS_OF_USE_NOT_SATISFIED","CONTRADICTION_INVALIDATION","CONTRADICTION_SECRET_CODE_STATUS","CUSTOM_IMAGE_BOOTLOADER","CUSTOM_IMAGE_EMPTY","FILE_ALREADY_EXISTS","FILE_NOT_FOUND","GP_AUTH_FAILED","HALTED","INCONSISTENT_FILE","INCORRECT_DATA","INCORRECT_LENGTH","INCORRECT_P1_P2","INS_NOT_SUPPORTED","DEVICE_NOT_ONBOARDED","DEVICE_NOT_ONBOARDED_2","INVALID_KCV","INVALID_OFFSET","LICENSING","LOCKED_DEVICE","MAX_VALUE_REACHED","MEMORY_PROBLEM","MISSING_CRITICAL_PARAMETER","NO_EF_SELECTED","NOT_ENOUGH_MEMORY_SPACE","PIN_REMAINING_ATTEMPTS","REFERENCED_DATA_NOT_FOUND","SECURITY_STATUS_NOT_SATISFIED","TECHNICAL_PROBLEM","UNKNOWN_APDU","USER_REFUSED_ON_DEVICE","NOT_ENOUGH_SPACE","canBeMappedToChildError","keys","D","statusCode","statusText","O"],"sourceRoot":""}