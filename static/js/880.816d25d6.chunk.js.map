{"version":3,"file":"static/js/880.816d25d6.chunk.js","mappings":"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","sources":["../node_modules/@swapkit/toolbox-solana/node_modules/@noble/hashes/src/_assert.ts","../node_modules/@swapkit/toolbox-solana/node_modules/@noble/hashes/src/utils.ts","../node_modules/@swapkit/toolbox-solana/node_modules/@noble/hashes/src/hmac.ts","../node_modules/@swapkit/toolbox-solana/node_modules/@noble/hashes/src/pbkdf2.ts","../node_modules/@swapkit/toolbox-solana/node_modules/@noble/hashes/src/_md.ts","../node_modules/@swapkit/toolbox-solana/node_modules/@noble/hashes/src/_u64.ts","../node_modules/@swapkit/toolbox-solana/node_modules/@noble/hashes/src/sha512.ts","../node_modules/@swapkit/toolbox-solana/node_modules/@scure/bip39/esm/index.js","../node_modules/@solana/spl-memo/src/index.ts","../node_modules/@swapkit/toolbox-solana/dist/index.js"],"sourcesContent":["function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","import { hash as assertHash, number as assertNumber } from './_assert.js';\nimport { hmac } from './hmac.js';\nimport { Hash, CHash, Input, createView, toBytes, checkOpts, asyncLoop } from './utils.js';\n\n// PBKDF (RFC 2898)\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: Input, _salt: Input, _opts: Pbkdf2Opt) {\n  assertHash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  assertNumber(c);\n  assertNumber(dkLen);\n  assertNumber(asyncTick);\n  if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');\n  const password = toBytes(_password);\n  const salt = toBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  u.fill(0);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nexport function pbkdf2(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\nexport async function pbkdf2Async(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, () => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Choice: a ? b : c\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n","/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nimport { bytes as assertBytes, number as assertNumber } from '@noble/hashes/_assert';\nimport { pbkdf2, pbkdf2Async } from '@noble/hashes/pbkdf2';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { utils as baseUtils } from '@scure/base';\n// Japanese wordlist\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\n// Normalization replaces equivalent sequences of characters\n// so that any two texts that are equivalent will be reduced\n// to the same sequence of code points, called the normal form of the original text.\n// https://tonsky.me/blog/unicode/#why-is-a----\nfunction nfkd(str) {\n    if (typeof str !== 'string')\n        throw new TypeError(`Invalid mnemonic type: ${typeof str}`);\n    return str.normalize('NFKD');\n}\nfunction normalize(str) {\n    const norm = nfkd(str);\n    const words = norm.split(' ');\n    if (![12, 15, 18, 21, 24].includes(words.length))\n        throw new Error('Invalid mnemonic');\n    return { nfkd: norm, words };\n}\nfunction assertEntropy(entropy) {\n    assertBytes(entropy, 16, 20, 24, 28, 32);\n}\n/**\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\n * @param wordlist imported wordlist for specific language\n * @param strength mnemonic strength 128-256 bits\n * @example\n * generateMnemonic(wordlist, 128)\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nexport function generateMnemonic(wordlist, strength = 128) {\n    assertNumber(strength);\n    if (strength % 32 !== 0 || strength > 256)\n        throw new TypeError('Invalid entropy');\n    return entropyToMnemonic(randomBytes(strength / 8), wordlist);\n}\nconst calcChecksum = (entropy) => {\n    // Checksum is ent.length/4 bits long\n    const bitsLeft = 8 - entropy.length / 4;\n    // Zero rightmost \"bitsLeft\" bits in byte\n    // For example: bitsLeft=4 val=10111101 -> 10110000\n    return new Uint8Array([(sha256(entropy)[0] >> bitsLeft) << bitsLeft]);\n};\nfunction getCoder(wordlist) {\n    if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== 'string')\n        throw new Error('Wordlist: expected array of 2048 strings');\n    wordlist.forEach((i) => {\n        if (typeof i !== 'string')\n            throw new Error(`Wordlist: non-string element: ${i}`);\n    });\n    return baseUtils.chain(baseUtils.checksum(1, calcChecksum), baseUtils.radix2(11, true), baseUtils.alphabet(wordlist));\n}\n/**\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\n * @param mnemonic 12-24 words\n * @param wordlist imported wordlist for specific language\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToEntropy(mnem, wordlist)\n * // Produces\n * new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ])\n */\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n    const { words } = normalize(mnemonic);\n    const entropy = getCoder(wordlist).decode(words);\n    assertEntropy(entropy);\n    return entropy;\n}\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy byte array\n * @param wordlist imported wordlist for specific language\n * @returns 12-24 words\n * @example\n * const ent = new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ]);\n * entropyToMnemonic(ent, wordlist);\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nexport function entropyToMnemonic(entropy, wordlist) {\n    assertEntropy(entropy);\n    const words = getCoder(wordlist).encode(entropy);\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\n}\n/**\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\n */\nexport function validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nconst salt = (passphrase) => nfkd(`mnemonic${passphrase}`);\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * await mnemonicToSeed(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nexport function mnemonicToSeed(mnemonic, passphrase = '') {\n    return pbkdf2Async(sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToSeedSync(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nexport function mnemonicToSeedSync(mnemonic, passphrase = '') {\n    return pbkdf2(sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\n","import { Buffer } from 'buffer';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\n\nexport const MEMO_PROGRAM_ID: PublicKey = new PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr');\n\n/**\n * Creates and returns an instruction which validates a string of UTF-8\n * encoded characters and verifies that any accounts provided are signers of\n * the transaction.  The program also logs the memo, as well as any verified\n * signer addresses, to the transaction log, so that anyone can easily observe\n * memos and know they were approved by zero or more addresses by inspecting\n * the transaction log from a trusted provider.\n *\n * Public keys passed in via the signerPubkeys will identify Signers which\n * must subsequently sign the Transaction including the returned\n * TransactionInstruction in order for the transaction to be valid.\n *\n * @param memo The UTF-8 encoded memo string to validate\n * @param signerPubkeys An array of public keys which must sign the\n *        Transaction including the returned TransactionInstruction in order\n *        for the transaction to be valid and the memo verification to\n *        succeed.  null is allowed if there are no signers for the memo\n *        verification.\n **/\nexport function createMemoInstruction(memo: string, signerPubkeys?: Array<PublicKey>): TransactionInstruction {\n    const keys =\n        signerPubkeys == null\n            ? []\n            : signerPubkeys.map(function (key) {\n                  return { pubkey: key, isSigner: true, isWritable: false };\n              });\n\n    return new TransactionInstruction({\n        keys: keys,\n        programId: MEMO_PROGRAM_ID,\n        data: Buffer.from(memo, 'utf8'),\n    });\n}\n","import{mnemonicToSeedSync as Y}from\"@scure/bip39\";import{createMemoInstruction as Z}from\"@solana/spl-memo\";import{TOKEN_PROGRAM_ID as _,createAssociatedTokenAccountInstruction as $,createTransferCheckedInstruction as F,getAccount as H,getAssociatedTokenAddress as y}from\"@solana/spl-token\";import{TokenListProvider as U}from\"@solana/spl-token-registry\";import{Connection as D,Keypair as L,PublicKey as M,SystemProgram as B,Transaction as z,sendAndConfirmTransaction as P}from\"@solana/web3.js\";import{AssetValue as G,Chain as W,DerivationPath as l,SwapKitError as v,SwapKitNumber as I,getRPCUrl as V}from\"@swapkit/helpers\";import{HDKey as K}from\"micro-key-producer/slip10.js\";function p(g){try{let T=new M(g);return M.isOnCurve(T.toBytes())}catch(T){return!1}}function A({phrase:g,derivationPath:T=l.SOL}){let x=Y(g),O=K.fromMasterSeed(x);return L.fromSeed(O.derive(T,!0).privateKey)}function f(g){return g.publicKey.toString()}async function k({connection:g,address:T}){let x=await g.getParsedTokenAccountsByOwner(new M(T),{programId:_}),q=(await new U().resolve()).filterByChainId(101).getList(),h=[];for await(let C of x.value){let R=C.account.data.parsed.info,j=R.tokenAmount.uiAmount,w=R.mint,b=R.tokenAmount.decimals,E=q.find((X)=>X.address===w),Q=E?E.symbol:\"UNKNOWN\";if(j>BigInt(0))h.push(new G({value:I.fromBigInt(R.tokenAmount.amount,b),decimal:b,identifier:`${W.Solana}.${Q}${w?`-${w.toString()}`:\"\"}`}))}return h}function u(g){return async(T)=>{let x=await g.getBalance(new M(T)),O=await k({connection:g,address:T});return[G.from({chain:W.Solana,value:BigInt(x)}),...O]}}async function J({tokenAddress:g,recipient:T,from:x,connection:O,amount:S,decimals:q}){let h=new z,C=new M(g),R=await y(C,x),j=new M(T),w=await y(C,j),b=!1;try{await H(O,w),b=!0}catch(E){}if(!b)h.add($(x,w,j,C));return h.add(F(R,C,w,x,S,q)),h}function N(g){return async({recipient:T,assetValue:x,fromPublicKey:O,memo:S,isProgramDerivedAddress:q})=>{if(!(q||p(T)))throw new v(\"core_transaction_invalid_recipient_address\");let h=x.isGasAsset?new z().add(B.transfer({fromPubkey:O,lamports:x.getBaseValue(\"number\"),toPubkey:new M(T)})):x.address?await J({amount:x.getBaseValue(\"number\"),connection:g,decimals:x.decimal,from:O,recipient:T,tokenAddress:x.address}):void 0;if(!h)throw new v(\"core_transaction_invalid_sender_address\");if(S)h.add(Z(S));let C=await g.getLatestBlockhash();return h.recentBlockhash=C.blockhash,h.feePayer=O,h}}function m(g){return async({recipient:T,assetValue:x,fromKeypair:O,memo:S,isProgramDerivedAddress:q})=>{let h=await N(g)({recipient:T,assetValue:x,memo:S,fromPublicKey:O.publicKey,isProgramDerivedAddress:q});return P(g,h,[O])}}function d(g){return(T)=>{return g.sendRawTransaction(T.serialize())}}var a=({rpcUrl:g=V(W.Solana)}={})=>{let T=new D(g,\"confirmed\");return{connection:T,createKeysForPath:A,getAddressFromKeys:f,createSolanaTransaction:N(T),getBalance:u(T),transfer:m(T),broadcastTransaction:d(T),validateAddress:p}};export{p as validateAddress,J as createSolanaTokenTransaction,a as SOLToolbox};\n\n//# debugId=4F1AB63D7417146A64756E2164756E21\n"],"names":["number","n","Number","isSafeInteger","Error","bytes","b","lengths","a","Uint8Array","constructor","name","isBytes","length","includes","hash","h","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","createView","arr","DataView","buffer","byteOffset","byteLength","Uint32Array","toBytes","data","str","TextEncoder","encode","utf8ToBytes","abytes","Hash","clone","this","_cloneInto","toStr","toString","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","HMAC","_key","super","assertHash","key","iHash","pad","set","i","oHash","fill","buf","assertExists","digestInto","assertBytes","destroy","to","Object","getPrototypeOf","hmac","message","pbkdf2Init","_password","_salt","_opts","opts","defaults","undefined","call","assign","checkOpts","dkLen","asyncTick","c","assertNumber","password","salt","DK","PRF","PRFSalt","pbkdf2Output","prfW","u","HashMD","padOffset","isLE","pos","view","len","take","Math","subarray","process","dataView","roundClean","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","l","setUint32","oview","outLen","state","get","res","slice","U32_MASK64","fromBig","le","split","lst","Ah","Al","toBig","shrSH","_l","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","offset","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","nfkd","TypeError","normalize","norm","words","passphrase","mnemonicToSeedSync","mnemonic","ti","Ti","setInt32","ui","pbkdf2","MEMO_PROGRAM_ID","PublicKey","p","g","T","M","isOnCurve","A","phrase","derivationPath","SOL","x","Y","O","K","fromMasterSeed","L","fromSeed","derive","privateKey","f","publicKey","async","getBalance","connection","address","getParsedTokenAccountsByOwner","programId","_","q","U","resolve","filterByChainId","getList","C","R","account","parsed","info","j","tokenAmount","uiAmount","w","mint","decimals","E","find","X","Q","symbol","push","G","I","fromBigInt","amount","decimal","identifier","W","Solana","k","from","chain","J","tokenAddress","recipient","S","z","y","H","$","F","N","assetValue","fromPublicKey","memo","isProgramDerivedAddress","v","isGasAsset","B","transfer","fromPubkey","lamports","getBaseValue","toPubkey","signerPubkeys","keys","pubkey","isSigner","isWritable","TransactionInstruction","Buffer","Z","getLatestBlockhash","recentBlockhash","blockhash","feePayer","m","fromKeypair","P","d","sendRawTransaction","serialize","rpcUrl","V","D","createKeysForPath","getAddressFromKeys","createSolanaTransaction","broadcastTransaction","validateAddress"],"sourceRoot":""}