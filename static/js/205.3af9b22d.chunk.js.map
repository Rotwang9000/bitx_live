{"version":3,"file":"static/js/205.3af9b22d.chunk.js","mappings":"mNAMIA,GAAgCC,EAAAA,EAAAA,KAAO,CAACC,EAAOC,IAC7CD,IAAUE,EAAAA,GAAOC,SACZF,EAAQG,WAAW,MAAQC,EAAAA,EAAEC,SAASC,OAAO,IAAIC,MAAMP,IAAWQ,EAAAA,EAAAA,IAAWC,EAAAA,EAAYT,GAASU,MAEpGV,GACN,iBACCW,GAAkCb,EAAAA,EAAAA,KAAO,CAACc,EAASC,IAAWT,EAAAA,EAAEU,MAAM,CACxEC,EAAAA,GACAA,EAAAA,GACAX,EAAAA,EAAEY,MAAM,CACNC,EAAAA,GACAC,EAAAA,IACAC,EAAAA,EAAAA,IAAWP,KAEbR,EAAAA,EAAEgB,SACFC,EAAAA,GAAkBC,MAAMlB,EAAAA,EAAEmB,OAAO,CAC/BC,UAAWC,EAAAA,GACXC,aAActB,EAAAA,EAAEY,MAAM,CACpBE,EAAAA,GACAd,EAAAA,EAAEC,WACDsB,cACDC,WAAU,EAAGC,aAAYC,MAAW,CACtCD,UACAE,cAAeD,EAAKJ,aACpBM,WAAYF,EAAKN,cACfG,WACJvB,EAAAA,EAAEgB,SAASO,WACXvB,EAAAA,EAAE6B,MAAMC,EAAAA,IAAiBP,aACxBpB,MAAMM,IAAS,mBACdsB,GAAmCrC,EAAAA,EAAAA,KAAO,CAACc,EAASwB,IAAahC,EAAAA,EAAEmB,OAAO,CAC5EvB,QAASI,EAAAA,EAAEY,MAAM,CACfqB,EAAAA,GACAC,EAAAA,IACAnB,EAAAA,EAAAA,IAAWP,KAEb2B,aAAcnC,EAAAA,EAAEgB,SAChBoB,WAAYpC,EAAAA,EAAEgB,SACdqB,0BAA2BrC,EAAAA,EAAEsC,SAC7BC,oBAAqBvC,EAAAA,EAAEsC,WACtBd,WAAU,EAAG5B,UAASuC,eAAcC,aAAYC,4BAA2BE,0BAA0B,CACtG3C,UACA4C,YAAaL,EACbM,UAAWC,OAAON,GAClBO,uBAAwBN,EACxBO,kBAAmBL,MACjBpC,MAAM6B,IAAW,oBACrBa,eAAeC,EAA0BC,EAAaC,EAAMC,GAC1D,MAAM,SAAEC,EAAQ,SAAEC,EAAQ,UAAEC,EAAS,UAAEC,EAAS,YAAEC,EAAW,eAAEC,GAAmBR,EAC5ES,EAAS,IAAIC,EAAAA,GAAWT,EAAKU,KAC7BjD,EAASF,EAAgB0C,EAAkB,CAC/C,CACEU,MAAOT,EACPvD,MAAOwD,GAET,CACEQ,MAAOP,EACPzD,MAAO0D,GAET5D,EAAc4D,EAAWC,GACzBN,EAAKY,cACLb,EAAYc,aAAe,IACtBd,EAAYc,YACfvC,kBAAc,GAEhBiC,EACAP,EAAKc,aAED9B,QAAiBwB,EAAOO,YAAY,sCAAuCtD,GACjF,OAAOsB,EAAiBkB,EAAkBjB,EAC5C,EACAtC,EAAAA,EAAAA,IAAOoD,EAA2B,4B","sources":["../node_modules/@chainflip/sdk/dist/broker-ZOUQBZB6.mjs"],"sourcesContent":["import { z, assetAndChain, numericString, hexString, btcAddress, ccmMetadataSchema, hexStringFromNumber, affiliateBroker, dotAddress, ethereumAddress } from './chunk-M2KPIR26.mjs';\nimport { __name, Chains } from './chunk-VT6GEMQN.mjs';\nimport { HttpClient } from '@chainflip/rpc';\nimport { bytesToHex } from '@chainflip/utils/bytes';\nimport * as ss58 from '@chainflip/utils/ss58';\n\nvar submitAddress = /* @__PURE__ */ __name((chain, address) => {\n  if (chain === Chains.Polkadot) {\n    return address.startsWith(\"0x\") ? z.string().length(66).parse(address) : bytesToHex(ss58.decode(address).data);\n  }\n  return address;\n}, \"submitAddress\");\nvar validateRequest = /* @__PURE__ */ __name((network, params) => z.tuple([\n  assetAndChain,\n  assetAndChain,\n  z.union([\n    numericString,\n    hexString,\n    btcAddress(network)\n  ]),\n  z.number(),\n  ccmMetadataSchema.merge(z.object({\n    gasBudget: hexStringFromNumber,\n    cfParameters: z.union([\n      hexString,\n      z.string()\n    ]).optional()\n  })).transform(({ message, ...rest }) => ({\n    message,\n    cf_parameters: rest.cfParameters,\n    gas_budget: rest.gasBudget\n  })).optional(),\n  z.number().optional(),\n  z.array(affiliateBroker).optional()\n]).parse(params), \"validateRequest\");\nvar validateResponse = /* @__PURE__ */ __name((network, response) => z.object({\n  address: z.union([\n    dotAddress,\n    ethereumAddress,\n    btcAddress(network)\n  ]),\n  issued_block: z.number(),\n  channel_id: z.number(),\n  source_chain_expiry_block: z.bigint(),\n  channel_opening_fee: z.bigint()\n}).transform(({ address, issued_block, channel_id, source_chain_expiry_block, channel_opening_fee }) => ({\n  address,\n  issuedBlock: issued_block,\n  channelId: BigInt(channel_id),\n  sourceChainExpiryBlock: source_chain_expiry_block,\n  channelOpeningFee: channel_opening_fee\n})).parse(response), \"validateResponse\");\nasync function requestSwapDepositAddress(swapRequest, opts, chainflipNetwork) {\n  const { srcAsset, srcChain, destAsset, destChain, destAddress, maxBoostFeeBps } = swapRequest;\n  const client = new HttpClient(opts.url);\n  const params = validateRequest(chainflipNetwork, [\n    {\n      asset: srcAsset,\n      chain: srcChain\n    },\n    {\n      asset: destAsset,\n      chain: destChain\n    },\n    submitAddress(destChain, destAddress),\n    opts.commissionBps,\n    swapRequest.ccmMetadata && {\n      ...swapRequest.ccmMetadata,\n      cfParameters: void 0\n    },\n    maxBoostFeeBps,\n    opts.affiliates\n  ]);\n  const response = await client.sendRequest(\"broker_requestSwapDepositAddress\", ...params);\n  return validateResponse(chainflipNetwork, response);\n}\n__name(requestSwapDepositAddress, \"requestSwapDepositAddress\");\n\nexport { requestSwapDepositAddress };\n"],"names":["submitAddress","__name","chain","address","Chains","Polkadot","startsWith","z","string","length","parse","bytesToHex","ss58","data","validateRequest","network","params","tuple","assetAndChain","union","numericString","hexString","btcAddress","number","ccmMetadataSchema","merge","object","gasBudget","hexStringFromNumber","cfParameters","optional","transform","message","rest","cf_parameters","gas_budget","array","affiliateBroker","validateResponse","response","dotAddress","ethereumAddress","issued_block","channel_id","source_chain_expiry_block","bigint","channel_opening_fee","issuedBlock","channelId","BigInt","sourceChainExpiryBlock","channelOpeningFee","async","requestSwapDepositAddress","swapRequest","opts","chainflipNetwork","srcAsset","srcChain","destAsset","destChain","destAddress","maxBoostFeeBps","client","HttpClient","url","asset","commissionBps","ccmMetadata","affiliates","sendRequest"],"sourceRoot":""}