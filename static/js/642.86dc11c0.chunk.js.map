{"version":3,"file":"static/js/642.86dc11c0.chunk.js","mappings":"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","sources":["../node_modules/@ledgerhq/hw-app-cosmos/src/Cosmos.ts","../node_modules/bip32-path/index.js"],"sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2017-2018 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport BIPPath from \"bip32-path\";\nimport { UserRefusedOnDevice } from \"@ledgerhq/errors\";\nconst CHUNK_SIZE = 250;\nconst CLA = 0x55;\nconst APP_KEY = \"CSM\";\nconst INS_GET_VERSION = 0x00;\nconst INS_SIGN_SECP256K1 = 0x02;\nconst INS_GET_ADDR_SECP256K1 = 0x04;\nconst PAYLOAD_TYPE_INIT = 0x00;\nconst PAYLOAD_TYPE_ADD = 0x01;\nconst PAYLOAD_TYPE_LAST = 0x02;\nconst SW_OK = 0x9000;\nconst SW_CANCEL = 0x6986;\n/**\n * Cosmos API\n *\n * @example\n * import Cosmos from \"@ledgerhq/hw-app-cosmos\";\n * const cosmos = new Cosmos(transport)\n */\n\nexport default class Cosmos {\n  transport: Transport;\n\n  constructor(transport: Transport, scrambleKey: string = APP_KEY) {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\"getAddress\", \"sign\", \"getAppConfiguration\"],\n      scrambleKey,\n    );\n  }\n\n  // FIXME: understand what is going on with the return type here\n  getAppConfiguration(): Promise<{\n    test_mode: boolean;\n    version: string;\n    device_locked: boolean;\n    major: number;\n  }> {\n    return this.transport.send(CLA, INS_GET_VERSION, 0, 0).then(response => {\n      return {\n        test_mode: response[0] !== 0,\n        version: \"\" + response[1] + \".\" + response[2] + \".\" + response[3],\n        device_locked: response[4] === 1,\n        major: response[1],\n      };\n    });\n  }\n\n  serializePath(path: Buffer): Buffer {\n    const buf = Buffer.alloc(20);\n    // HACK : without the >>>,\n    // the bitwise implicitly casts the result to be a signed int32,\n    // which fails the internal type check of Buffer in case of overload.\n    buf.writeUInt32LE((0x80000000 | path[0]) >>> 0, 0);\n    buf.writeUInt32LE((0x80000000 | path[1]) >>> 0, 4);\n    buf.writeUInt32LE((0x80000000 | path[2]) >>> 0, 8);\n    buf.writeUInt32LE(path[3], 12);\n    buf.writeUInt32LE(path[4], 16);\n    return buf;\n  }\n\n  serializeHRP(hrp: string): Buffer {\n    if (hrp == null || hrp.length === 0 || hrp.length > 83) {\n      throw new Error(\"Invalid HRP\");\n    }\n\n    const buf = Buffer.alloc(1 + hrp.length);\n    buf.writeUInt8(hrp.length, 0);\n    buf.write(hrp, 1);\n    return buf;\n  }\n\n  /**\n   * get Cosmos address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @param hrp usually cosmos\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * cosmos.getAddress(\"44'/60'/0'/0/0\", \"cosmos\").then(o => o.address)\n   */\n  getAddress(\n    path: string,\n    hrp: string,\n    boolDisplay?: boolean,\n  ): Promise<{\n    publicKey: string;\n    address: string;\n  }> {\n    const bipPath = BIPPath.fromString(path).toPathArray();\n    const serializedPath = this.serializePath(bipPath);\n    const data = Buffer.concat([this.serializeHRP(hrp), serializedPath]);\n    return this.transport\n      .send(CLA, INS_GET_ADDR_SECP256K1, boolDisplay ? 1 : 0, 0, data, [SW_OK])\n      .then(response => {\n        const address = Buffer.from(response.slice(33, -2)).toString();\n        const publicKey = Buffer.from(response.slice(0, 33)).toString(\"hex\");\n        return {\n          address,\n          publicKey,\n        };\n      });\n  }\n\n  foreach<T, A>(arr: T[], callback: (arg0: T, arg1: number) => Promise<A>): Promise<A[]> {\n    function iterate(index, array, result) {\n      if (index >= array.length) {\n        return result;\n      } else\n        return callback(array[index], index).then(function (res) {\n          result.push(res);\n          return iterate(index + 1, array, result);\n        });\n    }\n\n    return Promise.resolve().then(() => iterate(0, arr, []));\n  }\n\n  async sign(\n    path: string,\n    message: string,\n  ): Promise<{\n    signature: null | Buffer;\n    return_code: number | string;\n  }> {\n    const bipPath = BIPPath.fromString(path).toPathArray();\n    const serializedPath = this.serializePath(bipPath);\n    const chunks: Buffer[] = [];\n    chunks.push(serializedPath);\n    const buffer = Buffer.from(message);\n\n    for (let i = 0; i < buffer.length; i += CHUNK_SIZE) {\n      let end = i + CHUNK_SIZE;\n\n      if (i > buffer.length) {\n        end = buffer.length;\n      }\n\n      chunks.push(buffer.slice(i, end));\n    }\n\n    let response: any = {};\n    return this.foreach(chunks, (data, j) =>\n      this.transport\n        .send(\n          CLA,\n          INS_SIGN_SECP256K1,\n          j === 0\n            ? PAYLOAD_TYPE_INIT\n            : j + 1 === chunks.length\n              ? PAYLOAD_TYPE_LAST\n              : PAYLOAD_TYPE_ADD,\n          0,\n          data,\n          [SW_OK, SW_CANCEL],\n        )\n        .then(apduResponse => (response = apduResponse)),\n    ).then(() => {\n      const errorCodeData = response.slice(-2);\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n      let signature: Buffer | null = null;\n\n      if (response.length > 2) {\n        signature = response.slice(0, response.length - 2);\n      }\n\n      if (returnCode === 0x6986) {\n        throw new UserRefusedOnDevice();\n      }\n\n      return {\n        signature,\n        return_code: returnCode,\n      };\n    });\n  }\n}\n","/*\n * Bitcoin BIP32 path helpers\n * (C) 2016 Alex Beregszaszi\n */\n\nconst HARDENED = 0x80000000\n\nvar BIPPath = function (path) {\n  if (!Array.isArray(path)) {\n    throw new Error('Input must be an Array')\n  }\n  if (path.length === 0) {\n    throw new Error('Path must contain at least one level')\n  }\n  for (var i = 0; i < path.length; i++) {\n    if (typeof path[i] !== 'number') {\n      throw new Error('Path element is not a number')\n    }\n  }\n  this.path = path\n}\n\nBIPPath.validatePathArray = function (path) {\n  try {\n    BIPPath.fromPathArray(path)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nBIPPath.validateString = function (text, reqRoot) {\n  try {\n    BIPPath.fromString(text, reqRoot)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nBIPPath.fromPathArray = function (path) {\n  return new BIPPath(path)\n}\n\nBIPPath.fromString = function (text, reqRoot) {\n  // skip the root\n  if (/^m\\//i.test(text)) {\n    text = text.slice(2)\n  } else if (reqRoot) {\n    throw new Error('Root element is required')\n  }\n\n  var path = text.split('/')\n  var ret = new Array(path.length)\n  for (var i = 0; i < path.length; i++) {\n    var tmp = /(\\d+)([hH\\']?)/.exec(path[i])\n    if (tmp === null) {\n      throw new Error('Invalid input')\n    }\n    ret[i] = parseInt(tmp[1], 10)\n\n    if (ret[i] >= HARDENED) {\n      throw new Error('Invalid child index')\n    }\n\n    if (tmp[2] === 'h' || tmp[2] === 'H' || tmp[2] === '\\'') {\n      ret[i] += HARDENED\n    } else if (tmp[2].length != 0) {\n      throw new Error('Invalid modifier')\n    }\n  }\n  return new BIPPath(ret)\n}\n\nBIPPath.prototype.toPathArray = function () {\n  return this.path\n}\n\nBIPPath.prototype.toString = function (noRoot, oldStyle) {\n  var ret = new Array(this.path.length)\n  for (var i = 0; i < this.path.length; i++) {\n    var tmp = this.path[i]\n    if (tmp & HARDENED) {\n      ret[i] = (tmp & ~HARDENED) + (oldStyle ? 'h' : '\\'')\n    } else {\n      ret[i] = tmp\n    }\n  }\n  return (noRoot ? '' : 'm/') + ret.join('/')\n}\n\nBIPPath.prototype.inspect = function () {\n  return 'BIPPath <' + this.toString() + '>'\n}\n\nmodule.exports = BIPPath\n"],"names":["Cosmos","constructor","transport","scrambleKey","this","decorateAppAPIMethods","getAppConfiguration","send","then","response","test_mode","version","device_locked","major","serializePath","path","buf","Buffer","alloc","writeUInt32LE","serializeHRP","hrp","length","Error","writeUInt8","write","getAddress","boolDisplay","bipPath","BIPPath","toPathArray","serializedPath","data","concat","address","from","slice","toString","publicKey","foreach","arr","callback","iterate","index","array","result","res","push","Promise","resolve","sign","message","chunks","buffer","i","end","j","apduResponse","errorCodeData","returnCode","signature","UserRefusedOnDevice","return_code","HARDENED","Array","isArray","validatePathArray","fromPathArray","e","validateString","text","reqRoot","fromString","test","split","ret","tmp","exec","parseInt","prototype","noRoot","oldStyle","join","inspect","module","exports"],"sourceRoot":""}