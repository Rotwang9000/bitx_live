{"version":3,"file":"static/js/937.6763e721.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@polkadot+x-textdecoder@12.6.2/node_modules/@polkadot/x-textdecoder/packageInfo.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/detectOther.js","../node_modules/.pnpm/@polkadot+x-textencoder@12.6.2/node_modules/@polkadot/x-textencoder/packageInfo.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/detectPackage.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/packageInfo.js","../node_modules/.pnpm/@polkadot+x-global@12.6.2/node_modules/@polkadot/x-global/index.js","../node_modules/.pnpm/@polkadot+x-textdecoder@12.6.2/node_modules/@polkadot/x-textdecoder/browser.js","../node_modules/.pnpm/@polkadot+x-textdecoder@12.6.2/node_modules/@polkadot/x-textdecoder/fallback.js","../node_modules/.pnpm/@polkadot+x-textencoder@12.6.2/node_modules/@polkadot/x-textencoder/browser.js","../node_modules/.pnpm/@polkadot+x-textencoder@12.6.2/node_modules/@polkadot/x-textencoder/fallback.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/function.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/versionDetect.js","../node_modules/.pnpm/@polkadot+x-bigint@12.6.2/node_modules/@polkadot/x-bigint/index.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bi/consts.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toBigInt.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/hex/toU8a.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/bn.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/hex.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/object.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/helpers.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/toBigInt.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/toBn.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bi/toBigInt.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/hex/toBigInt.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/has.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/buffer.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/u8a.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/string/toU8a.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toU8a.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/concat.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/empty.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/eq.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/fixLength.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toBn.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toString.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/wrap.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bi/toU8a.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/hex/toBn.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/hex/stripPrefix.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bn/consts.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/bigInt.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bn/toBn.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bn/toU8a.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/compact/toU8a.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/compact/addLength.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/string.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/number.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/object/spread.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/array/chunk.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/array/flatten.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/assert.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bi/helpers.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toFloat.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/u8a/toNumber.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bn/min.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bn/sqrt.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/bn/toHex.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/compact/fromU8a.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/compact/stripLength.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/float/toU8a.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/boolean.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/format/formatDecimal.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/format/getSeparator.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/format/si.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/format/formatBalance.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/format/formatDate.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/format/formatNumber.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/ascii.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/class.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/childClass.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/codec.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/compact.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/stringify.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/null.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/undefined.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/is/utf8.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/lazy.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/noop.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/logger.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/memoize.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/nextTick.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/object/clear.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/object/property.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/string/camelCase.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/string/lowerFirst.js","../node_modules/.pnpm/@polkadot+util@12.6.2/node_modules/@polkadot/util/string/toHex.js"],"sourcesContent":["export const packageInfo = { name: '@polkadot/x-textdecoder', path: (import.meta && import.meta.url) ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf('/') + 1) : 'auto', type: 'esm', version: '12.6.2' };\n","import { packageInfo as decoderInfo } from '@polkadot/x-textdecoder';\nimport { packageInfo as encoderInfo } from '@polkadot/x-textencoder';\nexport default [decoderInfo, encoderInfo];\n","export const packageInfo = { name: '@polkadot/x-textencoder', path: (import.meta && import.meta.url) ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf('/') + 1) : 'auto', type: 'esm', version: '12.6.2' };\n","import others from './detectOther.js';\nimport { packageInfo } from './packageInfo.js';\nimport { detectPackage } from './versionDetect.js';\ndetectPackage(packageInfo, null, others);\n","export const packageInfo = { name: '@polkadot/util', path: (import.meta && import.meta.url) ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf('/') + 1) : 'auto', type: 'esm', version: '12.6.2' };\n","export { packageInfo } from './packageInfo.js';\n/** @internal Last-resort \"this\", if it gets here it probably would fail anyway */\nfunction evaluateThis(fn) {\n    return fn('return this');\n}\n/**\n * A cross-environment implementation for globalThis\n */\nexport const xglobal = /*#__PURE__*/ (typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof global !== 'undefined'\n        ? global\n        : typeof self !== 'undefined'\n            ? self\n            : typeof window !== 'undefined'\n                ? window\n                : evaluateThis(Function));\n/**\n * Extracts a known global from the environment, applying a fallback if not found\n */\nexport function extractGlobal(name, fallback) {\n    // Not quite sure why this is here - snuck in with TS 4.7.2 with no real idea\n    // (as of now) as to why this looks like an \"any\" when we do cast it to a T\n    //\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return typeof xglobal[name] === 'undefined'\n        ? fallback\n        : xglobal[name];\n}\n/**\n * Expose a value as a known global, if not already defined\n */\nexport function exposeGlobal(name, fallback) {\n    if (typeof xglobal[name] === 'undefined') {\n        xglobal[name] = fallback;\n    }\n}\n","import { extractGlobal } from '@polkadot/x-global';\nimport { TextDecoder as Fallback } from './fallback.js';\nexport { packageInfo } from './packageInfo.js';\nexport const TextDecoder = /*#__PURE__*/ extractGlobal('TextDecoder', Fallback);\n","export class TextDecoder {\n    __encoding;\n    constructor(encoding) {\n        this.__encoding = encoding;\n    }\n    decode(value) {\n        let result = '';\n        for (let i = 0, count = value.length; i < count; i++) {\n            result += String.fromCharCode(value[i]);\n        }\n        return result;\n    }\n}\n","import { extractGlobal } from '@polkadot/x-global';\nimport { TextEncoder as Fallback } from './fallback.js';\nexport { packageInfo } from './packageInfo.js';\nexport const TextEncoder = /*#__PURE__*/ extractGlobal('TextEncoder', Fallback);\n","export class TextEncoder {\n    encode(value) {\n        const count = value.length;\n        const u8a = new Uint8Array(count);\n        for (let i = 0; i < count; i++) {\n            u8a[i] = value.charCodeAt(i);\n        }\n        return u8a;\n    }\n}\n","/**\n * @name isFunction\n * @summary Tests for a `function`.\n * @description\n * Checks to see if the input value is a JavaScript function.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isFunction } from '@polkadot/util';\n *\n * isFunction(() => false); // => true\n * ```\n */\nexport function isFunction(value) {\n    return typeof value === 'function';\n}\n","import { xglobal } from '@polkadot/x-global';\nimport { isFunction } from './is/function.js';\nconst DEDUPE = 'Either remove and explicitly install matching versions or dedupe using your package manager.\\nThe following conflicting packages were found:';\nexport const POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG = 'POLKADOTJS_DISABLE_ESM_CJS_WARNING';\n/** @internal */\nfunction getEntry(name) {\n    const _global = xglobal;\n    if (!_global.__polkadotjs) {\n        _global.__polkadotjs = {};\n    }\n    if (!_global.__polkadotjs[name]) {\n        _global.__polkadotjs[name] = [];\n    }\n    return _global.__polkadotjs[name];\n}\n/** @internal */\nfunction formatDisplay(all, fmt) {\n    let max = 0;\n    for (let i = 0, count = all.length; i < count; i++) {\n        max = Math.max(max, all[i].version.length);\n    }\n    return all\n        .map((d) => `\\t${fmt(d.version.padEnd(max), d).join('\\t')}`)\n        .join('\\n');\n}\n/** @internal */\nfunction formatInfo(version, { name }) {\n    return [\n        version,\n        name\n    ];\n}\n/** @internal */\nfunction formatVersion(version, { path, type }) {\n    let extracted;\n    if (path && path.length >= 5) {\n        const nmIndex = path.indexOf('node_modules');\n        extracted = nmIndex === -1\n            ? path\n            : path.substring(nmIndex);\n    }\n    else {\n        extracted = '<unknown>';\n    }\n    return [\n        `${`${type || ''}`.padStart(3)} ${version}`,\n        extracted\n    ];\n}\n/** @internal */\nfunction getPath(infoPath, pathOrFn) {\n    if (infoPath) {\n        return infoPath;\n    }\n    else if (isFunction(pathOrFn)) {\n        try {\n            return pathOrFn() || '';\n        }\n        catch {\n            return '';\n        }\n    }\n    return pathOrFn || '';\n}\n/** @internal */\nfunction warn(pre, all, fmt) {\n    console.warn(`${pre}\\n${DEDUPE}\\n${formatDisplay(all, fmt)}`);\n}\n/**\n * @name detectPackage\n * @summary Checks that a specific package is only imported once\n * @description A `@polkadot/*` version detection utility, checking for one occurrence of a package in addition to checking for dependency versions.\n */\nexport function detectPackage({ name, path, type, version }, pathOrFn, deps = []) {\n    if (!name.startsWith('@polkadot')) {\n        throw new Error(`Invalid package descriptor ${name}`);\n    }\n    const entry = getEntry(name);\n    entry.push({ path: getPath(path, pathOrFn), type, version });\n    // if we have more than one entry at DIFFERENT version types then warn. If there is more than one entry at the same\n    // version and ESM/CJS dual warnings are disabled, then do not display warnings\n    const entriesSameVersion = entry.every((e) => e.version === version);\n    const esmCjsWarningDisabled = xglobal.process?.env?.[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG] === '1';\n    const multipleEntries = entry.length !== 1;\n    const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;\n    if (multipleEntries && !disableWarnings) {\n        warn(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion);\n    }\n    else {\n        const mismatches = deps.filter((d) => d && d.version !== version);\n        if (mismatches.length) {\n            warn(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo);\n        }\n    }\n}\n","import { extractGlobal } from '@polkadot/x-global';\nexport { packageInfo } from './packageInfo.js';\n/**\n * @internal\n *\n * There are _still_ some older environments (specifically RN < 0.70), that does\n * not have proper BigInt support - a non-working fallback is provided for those.\n *\n * We detect availability of BigInt upon usage, so this is purely to allow functional\n * compilation & bundling. Since we have operators such as *+-/ top-level, a number-ish\n * result is used here.\n */\nfunction invalidFallback() {\n    return Number.NaN;\n}\nexport const BigInt = /*#__PURE__*/ extractGlobal('BigInt', invalidFallback);\n","import { BigInt } from '@polkadot/x-bigint';\n/**\n * @name _0n\n * @summary BigInt constant for 0.\n */\nexport const _0n = /*#__PURE__*/ BigInt(0);\n/**\n * @name _1n\n * @summary BigInt constant for 1.\n */\nexport const _1n = /*#__PURE__*/ BigInt(1);\n/**\n * @name _2n\n * @summary BigInt constant for 2.\n */\nexport const _2n = /*#__PURE__*/ BigInt(2);\n/**\n * @name _3n\n * @summary BigInt constant for 3.\n */\nexport const _3n = /*#__PURE__*/ BigInt(3);\n/**\n * @name _4n\n * @summary BigInt constant for 4.\n */\nexport const _4n = /*#__PURE__*/ BigInt(4);\n/**\n * @name _5n\n * @summary BigInt constant for 5.\n */\nexport const _5n = /*#__PURE__*/ BigInt(5);\n/**\n * @name _6n\n * @summary BigInt constant for 6.\n */\nexport const _6n = /*#__PURE__*/ BigInt(6);\n/**\n * @name _7n\n * @summary BigInt constant for 7.\n */\nexport const _7n = /*#__PURE__*/ BigInt(7);\n/**\n * @name _8n\n * @summary BigInt constant for 8.\n */\nexport const _8n = /*#__PURE__*/ BigInt(8);\n/**\n * @name _9n\n * @summary BigInt constant for 9.\n */\nexport const _9n = /*#__PURE__*/ BigInt(9);\n/**\n * @name _10n\n * @summary BigInt constant for 10.\n */\nexport const _10n = /*#__PURE__*/ BigInt(10);\n/**\n * @name _100n\n * @summary BigInt constant for 100.\n */\nexport const _100n = /*#__PURE__*/ BigInt(100);\n/**\n * @name _1000n\n * @summary BigInt constant for 1000.\n */\nexport const _1000n = /*#__PURE__*/ BigInt(1000);\n/**\n * @name _1Mn\n * @summary BigInt constant for 1,000,000 (million).\n */\nexport const _1Mn = /*#__PURE__*/ BigInt(1000000);\n/**\n* @name _1Bn\n* @summary BigInt constant for 1,000,000,000 (billion).\n*/\nexport const _1Bn = /*#__PURE__*/ BigInt(1000000000);\n/**\n* @name _1Qn\n* @summary BigInt constant for 1,000,000,000,000,000,000 (quitillion).\n*/\nexport const _1Qn = _1Bn * _1Bn;\n/**\n* @name _2pow53n\n* @summary BigInt constant for MAX_SAFE_INTEGER\n*/\nexport const _2pow53n = /*#__PURE__*/ BigInt(Number.MAX_SAFE_INTEGER);\n/**\n * @name _sqrt2pow53n\n * @summary BigInt constant for Math.sqrt(MAX_SAFE_INTEGER)\n */\nexport const _sqrt2pow53n = /*#__PURE__*/ BigInt(94906265);\n","import { BigInt } from '@polkadot/x-bigint';\nimport { _1n } from '../bi/consts.js';\nconst U8_MAX = BigInt(256);\nconst U16_MAX = BigInt(256 * 256);\nconst U64_MAX = BigInt('0x10000000000000000');\n/**\n * @name u8aToBigInt\n * @summary Creates a BigInt from a Uint8Array object.\n */\nexport function u8aToBigInt(value, { isLe = true, isNegative = false } = {}) {\n    // slice + reverse is expensive, however SCALE is LE by default so this is the path\n    // we are most interested in (the BE is added for the sake of being comprehensive)\n    if (!isLe) {\n        value = value.slice().reverse();\n    }\n    const count = value.length;\n    if (isNegative && count && (value[count - 1] & 0x80)) {\n        switch (count) {\n            case 0:\n                return BigInt(0);\n            case 1:\n                return BigInt(((value[0] ^ 255) * -1) - 1);\n            case 2:\n                return BigInt((((value[0] + (value[1] << 8)) ^ 65535) * -1) - 1);\n            case 4:\n                return BigInt((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) * -1) - 1);\n        }\n        const dvI = new DataView(value.buffer, value.byteOffset);\n        if (count === 8) {\n            return dvI.getBigInt64(0, true);\n        }\n        let result = BigInt(0);\n        const mod = count % 2;\n        for (let i = count - 2; i >= mod; i -= 2) {\n            result = (result * U16_MAX) + BigInt(dvI.getUint16(i, true) ^ 0xffff);\n        }\n        if (mod) {\n            result = (result * U8_MAX) + BigInt(value[0] ^ 0xff);\n        }\n        return (result * -_1n) - _1n;\n    }\n    switch (count) {\n        case 0:\n            return BigInt(0);\n        case 1:\n            return BigInt(value[0]);\n        case 2:\n            return BigInt(value[0] + (value[1] << 8));\n        case 4:\n            return BigInt(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216));\n    }\n    const dvI = new DataView(value.buffer, value.byteOffset);\n    switch (count) {\n        case 8:\n            return dvI.getBigUint64(0, true);\n        case 16:\n            return (dvI.getBigUint64(8, true) * U64_MAX) + dvI.getBigUint64(0, true);\n        default: {\n            let result = BigInt(0);\n            const mod = count % 2;\n            for (let i = count - 2; i >= mod; i -= 2) {\n                result = (result * U16_MAX) + BigInt(dvI.getUint16(i, true));\n            }\n            if (mod) {\n                result = (result * U8_MAX) + BigInt(value[0]);\n            }\n            return result;\n        }\n    }\n}\n","const CHR = '0123456789abcdef';\nconst U8 = new Uint8Array(256);\nconst U16 = new Uint8Array(256 * 256);\nfor (let i = 0, count = CHR.length; i < count; i++) {\n    U8[CHR[i].charCodeAt(0) | 0] = i | 0;\n    if (i > 9) {\n        U8[CHR[i].toUpperCase().charCodeAt(0) | 0] = i | 0;\n    }\n}\nfor (let i = 0; i < 256; i++) {\n    const s = i << 8;\n    for (let j = 0; j < 256; j++) {\n        U16[s | j] = (U8[i] << 4) | U8[j];\n    }\n}\n/**\n * @name hexToU8a\n * @summary Creates a Uint8Array object from a hex string.\n * @description\n * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToU8a } from '@polkadot/util';\n *\n * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])\n * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])\n * ```\n */\nexport function hexToU8a(value, bitLength = -1) {\n    if (!value) {\n        return new Uint8Array();\n    }\n    let s = value.startsWith('0x')\n        ? 2\n        : 0;\n    const decLength = Math.ceil((value.length - s) / 2);\n    const endLength = Math.ceil(bitLength === -1\n        ? decLength\n        : bitLength / 8);\n    const result = new Uint8Array(endLength);\n    const offset = endLength > decLength\n        ? endLength - decLength\n        : 0;\n    for (let i = offset; i < endLength; i++, s += 2) {\n        // The big factor here is actually the string lookups. If we do\n        // HEX_TO_U16[value.substring()] we get an 10x slowdown. In the\n        // same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is\n        // also the faster operation by at least 2x with the character map above\n        result[i] = U16[(value.charCodeAt(s) << 8) | value.charCodeAt(s + 1)];\n    }\n    return result;\n}\n","import { BN } from '../bn/bn.js';\n/**\n * @name isBn\n * @summary Tests for a `BN` object instance.\n * @description\n * Checks to see if the input object is an instance of `BN` (bn.js).\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { isBn } from '@polkadot/util';\n *\n * console.log('isBn', isBn(new BN(1))); // => true\n * ```\n */\nexport function isBn(value) {\n    return BN.isBN(value);\n}\n","export const REGEX_HEX_PREFIXED = /^0x[\\da-fA-F]+$/;\nexport const REGEX_HEX_NOPREFIX = /^[\\da-fA-F]+$/;\n/**\n * @name isHex\n * @summary Tests for a hex string.\n * @description\n * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isHex } from '@polkadot/util';\n *\n * isHex('0x1234'); // => true\n * isHex('0x1234', 8); // => false\n * ```\n */\nexport function isHex(value, bitLength = -1, ignoreLength) {\n    return (typeof value === 'string' && (value === '0x' ||\n        REGEX_HEX_PREFIXED.test(value))) && (bitLength === -1\n        ? (ignoreLength || (value.length % 2 === 0))\n        : (value.length === (2 + Math.ceil(bitLength / 4))));\n}\n","/**\n * @name isObject\n * @summary Tests for an `object`.\n * @description\n * Checks to see if the input value is a JavaScript object.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isObject } from '@polkadot/util';\n *\n * isObject({}); // => true\n * isObject('something'); // => false\n * ```\n */\nexport function isObject(value) {\n    return !!value && typeof value === 'object';\n}\n","import { isFunction } from './function.js';\nimport { isObject } from './object.js';\nexport function isOn(...fns) {\n    return (value) => (isObject(value) || isFunction(value)) &&\n        fns.every((f) => isFunction(value[f]));\n}\nexport function isOnFunction(...fns) {\n    return (value) => isFunction(value) &&\n        fns.every((f) => isFunction(value[f]));\n}\nexport function isOnObject(...fns) {\n    return (value) => isObject(value) &&\n        fns.every((f) => isFunction(value[f]));\n}\n","import { isOn } from './helpers.js';\nexport const isToBigInt = /*#__PURE__*/ isOn('toBigInt');\n","import { isOn } from './helpers.js';\nexport const isToBn = /*#__PURE__*/ isOn('toBn');\n","import { BigInt } from '@polkadot/x-bigint';\nimport { hexToBigInt } from '../hex/toBigInt.js';\nimport { isBn } from '../is/bn.js';\nimport { isHex } from '../is/hex.js';\nimport { isToBigInt } from '../is/toBigInt.js';\nimport { isToBn } from '../is/toBn.js';\n/**\n * @name nToBigInt\n * @summary Creates a bigInt value from a BN, bigint, string (base 10 or hex) or number input.\n */\nexport function nToBigInt(value) {\n    return typeof value === 'bigint'\n        ? value\n        : !value\n            ? BigInt(0)\n            : isHex(value)\n                ? hexToBigInt(value.toString())\n                : isBn(value)\n                    ? BigInt(value.toString())\n                    : isToBigInt(value)\n                        ? value.toBigInt()\n                        : isToBn(value)\n                            ? BigInt(value.toBn().toString())\n                            : BigInt(value);\n}\n","import { BigInt } from '@polkadot/x-bigint';\nimport { u8aToBigInt } from '../u8a/toBigInt.js';\nimport { hexToU8a } from './toU8a.js';\n/**\n * @name hexToBigInt\n * @summary Creates a BigInt instance object from a hex string.\n */\nexport function hexToBigInt(value, { isLe = false, isNegative = false } = {}) {\n    return !value || value === '0x'\n        ? BigInt(0)\n        : u8aToBigInt(hexToU8a(value), { isLe, isNegative });\n}\n","import { BigInt } from '@polkadot/x-bigint';\nimport { xglobal } from '@polkadot/x-global';\n/** true if the environment has proper BigInt support */\nexport const hasBigInt = typeof BigInt === 'function' && typeof BigInt.asIntN === 'function';\n/** true if the environment is CJS */\nexport const hasCjs = typeof require === 'function' && typeof module !== 'undefined';\n/** true if the environment has __dirname available */\nexport const hasDirname = typeof __dirname !== 'undefined';\n/** true if the environment is ESM */\nexport const hasEsm = !hasCjs;\n/** true if the environment has WebAssembly available */\nexport const hasWasm = typeof WebAssembly !== 'undefined';\n/** true if the environment has support for Buffer (typically Node.js) */\nexport const hasBuffer = typeof xglobal.Buffer === 'function' && typeof xglobal.Buffer.isBuffer === 'function';\n/** true if the environment has process available (typically Node.js) */\nexport const hasProcess = typeof xglobal.process === 'object';\n","import { xglobal } from '@polkadot/x-global';\nimport { hasBuffer } from '../has.js';\nimport { isFunction } from './function.js';\n/**\n * @name isBuffer\n * @summary Tests for a `Buffer` object instance.\n * @description\n * Checks to see if the input object is an instance of `Buffer`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isBuffer } from '@polkadot/util';\n *\n * console.log('isBuffer', isBuffer(Buffer.from([]))); // => true\n * ```\n */\nexport function isBuffer(value) {\n    // we do check a function first, since it is slightly faster than isBuffer itself\n    return hasBuffer && !!value && isFunction(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);\n}\n","/**\n * @name isU8a\n * @summary Tests for a `Uint8Array` object instance.\n * @description\n * Checks to see if the input object is an instance of `Uint8Array`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isUint8Array } from '@polkadot/util';\n *\n * console.log('isU8a', isU8a([])); // => false\n * ```\n */\nexport function isU8a(value) {\n    // here we defer the instanceof check which is actually slightly\n    // slower than just checking the constrctor (direct instances)\n    return (((value && value.constructor) === Uint8Array) ||\n        value instanceof Uint8Array);\n}\n","import { TextEncoder } from '@polkadot/x-textencoder';\nconst encoder = new TextEncoder();\n/**\n * @name stringToU8a\n * @summary Creates a Uint8Array object from a utf-8 string.\n * @description\n * String input values return the actual encoded `UInt8Array`. `null` or `undefined` values returns an empty encoded array.\n * @example\n * <BR>\n *\n * ```javascript\n * import { stringToU8a } from '@polkadot/util';\n *\n * stringToU8a('hello'); // [0x68, 0x65, 0x6c, 0x6c, 0x6f]\n * ```\n */\nexport function stringToU8a(value) {\n    return value\n        ? encoder.encode(value.toString())\n        : new Uint8Array();\n}\n","import { hexToU8a } from '../hex/toU8a.js';\nimport { isBuffer } from '../is/buffer.js';\nimport { isHex } from '../is/hex.js';\nimport { isU8a } from '../is/u8a.js';\nimport { stringToU8a } from '../string/toU8a.js';\n/**\n * @name u8aToU8a\n * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.\n * @description\n * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToU8a } from '@polkadot/util';\n *\n * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])\n * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])\n * ```\n */\nexport function u8aToU8a(value) {\n    return isU8a(value)\n        // NOTE isBuffer needs to go here since it actually extends\n        // Uint8Array on Node.js environments, so all Buffer are Uint8Array,\n        // but Uint8Array is not Buffer\n        ? isBuffer(value)\n            ? new Uint8Array(value)\n            : value\n        : isHex(value)\n            ? hexToU8a(value)\n            : Array.isArray(value)\n                ? new Uint8Array(value)\n                : stringToU8a(value);\n}\n","import { u8aToU8a } from './toU8a.js';\n/**\n * @name u8aConcat\n * @summary Creates a concatenated Uint8Array from the inputs.\n * @description\n * Concatenates the input arrays into a single `UInt8Array`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { { u8aConcat } from '@polkadot/util';\n *\n * u8aConcat(\n *   new Uint8Array([1, 2, 3]),\n *   new Uint8Array([4, 5, 6])\n * ); // [1, 2, 3, 4, 5, 6]\n * ```\n */\nexport function u8aConcat(...list) {\n    const count = list.length;\n    const u8as = new Array(count);\n    let length = 0;\n    for (let i = 0; i < count; i++) {\n        u8as[i] = u8aToU8a(list[i]);\n        length += u8as[i].length;\n    }\n    return u8aConcatStrict(u8as, length);\n}\n/**\n * @name u8aConcatStrict\n * @description A strict version of [[u8aConcat]], accepting only Uint8Array inputs\n */\nexport function u8aConcatStrict(u8as, length = 0) {\n    const count = u8as.length;\n    let offset = 0;\n    if (!length) {\n        for (let i = 0; i < count; i++) {\n            length += u8as[i].length;\n        }\n    }\n    const result = new Uint8Array(length);\n    for (let i = 0; i < count; i++) {\n        result.set(u8as[i], offset);\n        offset += u8as[i].length;\n    }\n    return result;\n}\n","/**\n * @name u8aEmpty\n * @summary Tests for a `Uint8Array` for emptyness\n * @description\n * Checks to see if the input `Uint8Array` has zero length or contains all 0 values.\n */\nexport function u8aEmpty(value) {\n    const len = value.length | 0;\n    // on smaller sizes, the byte-by-byte compare is faster than allocating\n    // another object for DataView (on very large arrays the DataView is faster)\n    for (let i = 0; i < len; i++) {\n        if (value[i] | 0) {\n            return false;\n        }\n    }\n    return true;\n}\n","import { u8aToU8a } from './toU8a.js';\n/**\n * @name u8aEq\n * @summary Compares two Uint8Arrays for equality.\n * @description\n * For `UInt8Array` (or hex string) input values true if there is a match.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aEq } from '@polkadot/util';\n *\n * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true\n * ```\n */\nexport function u8aEq(a, b) {\n    const u8aa = u8aToU8a(a);\n    const u8ab = u8aToU8a(b);\n    if (u8aa.length === u8ab.length) {\n        const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);\n        const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);\n        const mod = (u8aa.length % 4) | 0;\n        const length = (u8aa.length - mod) | 0;\n        for (let i = 0; i < length; i += 4) {\n            if (dvA.getUint32(i) !== dvB.getUint32(i)) {\n                return false;\n            }\n        }\n        for (let i = length, count = u8aa.length; i < count; i++) {\n            if (u8aa[i] !== u8ab[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n","/**\n * @name u8aFixLength\n * @summary Shifts a Uint8Array to a specific bitLength\n * @description\n * Returns a uint8Array with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aFixLength } from '@polkadot/util';\n *\n * u8aFixLength('0x12') // => 0x12\n * u8aFixLength('0x12', 16) // => 0x0012\n * u8aFixLength('0x1234', 8) // => 0x12\n * ```\n */\nexport function u8aFixLength(value, bitLength = -1, atStart = false) {\n    const byteLength = Math.ceil(bitLength / 8);\n    if (bitLength === -1 || value.length === byteLength) {\n        return value;\n    }\n    else if (value.length > byteLength) {\n        return value.subarray(0, byteLength);\n    }\n    const result = new Uint8Array(byteLength);\n    result.set(value, atStart ? 0 : (byteLength - value.length));\n    return result;\n}\n","import { BN } from '../bn/bn.js';\n/**\n * @name u8aToBn\n * @summary Creates a BN from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.\n * @param value The value to convert\n * @param options Options to pass while converting\n * @param options.isLe Convert using Little Endian (default)\n * @param options.isNegative Convert using two's complement\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToBn } from '@polkadot/util';\n *\n * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f\n * ```\n */\nexport function u8aToBn(value, { isLe = true, isNegative = false } = {}) {\n    // slice + reverse is expensive, however SCALE is LE by default so this is the path\n    // we are most interested in (the BE is added for the sake of being comprehensive)\n    if (!isLe) {\n        value = value.slice().reverse();\n    }\n    const count = value.length;\n    // shortcut for <= u48 values - in this case the manual conversion\n    // here seems to be more efficient than passing the full array\n    if (isNegative && count && (value[count - 1] & 0x80)) {\n        // Most common case i{8, 16, 32} default LE SCALE-encoded\n        // For <= 32, we also optimize the xor to a single op\n        switch (count) {\n            case 0:\n                return new BN(0);\n            case 1:\n                return new BN(((value[0] ^ 255) * -1) - 1);\n            case 2:\n                return new BN((((value[0] + (value[1] << 8)) ^ 65535) * -1) - 1);\n            case 3:\n                return new BN((((value[0] + (value[1] << 8) + (value[2] << 16)) ^ 16777215) * -1) - 1);\n            case 4:\n                // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n                // 32-bit, in the case where the top-most bit is set this yields a negative value\n                return new BN((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) * -1) - 1);\n            case 5:\n                return new BN(((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + ((value[4] ^ 0xff) * 4294967296)) * -1) - 1);\n            case 6:\n                return new BN(((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + (((value[4] + (value[5] << 8)) ^ 65535) * 4294967296)) * -1) - 1);\n            default:\n                return new BN(value, 'le').fromTwos(count * 8);\n        }\n    }\n    // Most common case - u{8, 16, 32} default LE SCALE-encoded\n    //\n    // There are some slight benefits in unrolling this specific loop,\n    // however it comes with diminishing returns since here the actual\n    // `new BN` does seem to take up the bulk of the time\n    switch (count) {\n        case 0:\n            return new BN(0);\n        case 1:\n            return new BN(value[0]);\n        case 2:\n            return new BN(value[0] + (value[1] << 8));\n        case 3:\n            return new BN(value[0] + (value[1] << 8) + (value[2] << 16));\n        case 4:\n            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n            // 32-bit, in the case where the top-most bit is set this yields a negative value\n            return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216));\n        case 5:\n            return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8)) * 16777216));\n        case 6:\n            return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216));\n        default:\n            return new BN(value, 'le');\n    }\n}\n","import { TextDecoder } from '@polkadot/x-textdecoder';\nconst decoder = new TextDecoder('utf-8');\n/**\n * @name u8aToString\n * @summary Creates a utf-8 string from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual decoded utf-8 string. `null` or `undefined` values returns an empty string.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToString } from '@polkadot/util';\n *\n * u8aToString(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f])); // hello\n * ```\n */\nexport function u8aToString(value) {\n    return value\n        ? decoder.decode(value)\n        : '';\n}\n","import { u8aConcatStrict } from './concat.js';\nimport { u8aEq } from './eq.js';\nimport { u8aToU8a } from './toU8a.js';\n/** @internal */\nexport const U8A_WRAP_ETHEREUM = /*#__PURE__*/ u8aToU8a('\\x19Ethereum Signed Message:\\n');\n/** @internal */\nexport const U8A_WRAP_PREFIX = /*#__PURE__*/ u8aToU8a('<Bytes>');\n/** @internal */\nexport const U8A_WRAP_POSTFIX = /*#__PURE__*/ u8aToU8a('</Bytes>');\nconst WRAP_LEN = U8A_WRAP_PREFIX.length + U8A_WRAP_POSTFIX.length;\n/** @internal */\nexport function u8aIsWrapped(u8a, withEthereum) {\n    return ((u8a.length >= WRAP_LEN &&\n        u8aEq(u8a.subarray(0, U8A_WRAP_PREFIX.length), U8A_WRAP_PREFIX) &&\n        u8aEq(u8a.slice(-U8A_WRAP_POSTFIX.length), U8A_WRAP_POSTFIX)) ||\n        (withEthereum &&\n            u8a.length >= U8A_WRAP_ETHEREUM.length &&\n            u8aEq(u8a.subarray(0, U8A_WRAP_ETHEREUM.length), U8A_WRAP_ETHEREUM)));\n}\n/**\n * @name u8aUnwrapBytes\n * @description Removes all <Bytes>...</Bytes> wrappers from the supplied value\n */\nexport function u8aUnwrapBytes(bytes) {\n    const u8a = u8aToU8a(bytes);\n    // we don't want to unwrap Ethereum-style wraps\n    return u8aIsWrapped(u8a, false)\n        ? u8a.subarray(U8A_WRAP_PREFIX.length, u8a.length - U8A_WRAP_POSTFIX.length)\n        : u8a;\n}\n/**\n * @name u8aWrapBytes\n * @description\n * Adds a <Bytes>...</Bytes> wrapper to the supplied value, if\n * - We don't already have a Bytes wrapper\n * - The message is not an Ethereum-style message\n */\nexport function u8aWrapBytes(bytes) {\n    const u8a = u8aToU8a(bytes);\n    return u8aIsWrapped(u8a, true)\n        ? u8a\n        : u8aConcatStrict([U8A_WRAP_PREFIX, u8a, U8A_WRAP_POSTFIX]);\n}\n","import { BigInt } from '@polkadot/x-bigint';\nimport { _0n, _1n } from './consts.js';\nimport { nToBigInt } from './toBigInt.js';\nconst DIV = BigInt(256);\nconst NEG_MASK = BigInt(0xff);\nfunction toU8a(value, isLe, isNegative) {\n    const arr = [];\n    const withSigned = isNegative && (value < _0n);\n    if (withSigned) {\n        value = (value + _1n) * -_1n;\n    }\n    while (value !== _0n) {\n        const mod = value % DIV;\n        const val = Number(withSigned\n            ? mod ^ NEG_MASK\n            : mod);\n        if (isLe) {\n            arr.push(val);\n        }\n        else {\n            arr.unshift(val);\n        }\n        value = (value - mod) / DIV;\n    }\n    return Uint8Array.from(arr);\n}\n/**\n * @name nToU8a\n * @summary Creates a Uint8Array object from a bigint.\n */\nexport function nToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = {}) {\n    const valueBi = nToBigInt(value);\n    if (valueBi === _0n) {\n        return bitLength === -1\n            ? new Uint8Array(1)\n            : new Uint8Array(Math.ceil((bitLength || 0) / 8));\n    }\n    const u8a = toU8a(valueBi, isLe, isNegative);\n    if (bitLength === -1) {\n        return u8a;\n    }\n    const byteLength = Math.ceil((bitLength || 0) / 8);\n    const output = new Uint8Array(byteLength);\n    if (isNegative) {\n        output.fill(0xff);\n    }\n    output.set(u8a, isLe ? 0 : byteLength - u8a.length);\n    return output;\n}\n","import { BN } from '../bn/bn.js';\nimport { hexStripPrefix } from './stripPrefix.js';\n/**\n * @name hexToBn\n * @summary Creates a BN.js object from a hex string.\n * @description\n * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @param _value The value to convert\n * @param _options Options to pass while converting\n * @param _options.isLe Convert using Little Endian\n * @param _options.isNegative Convert using two's complement\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToBn } from '@polkadot/util';\n *\n * hexToBn('0x123480001f'); // => BN(0x123480001f)\n * ```\n */\nexport function hexToBn(value, { isLe = false, isNegative = false } = {}) {\n    if (!value || value === '0x') {\n        return new BN(0);\n    }\n    const stripped = hexStripPrefix(value);\n    const bn = new BN(stripped, 16, isLe ? 'le' : 'be');\n    // fromTwos takes as parameter the number of bits, which is the hex length\n    // multiplied by 4 (2 bytes being 8 bits)\n    return isNegative\n        ? bn.fromTwos(stripped.length * 4)\n        : bn;\n}\n","import { REGEX_HEX_NOPREFIX, REGEX_HEX_PREFIXED } from '../is/hex.js';\n/**\n * @name hexStripPrefix\n * @summary Strips any leading `0x` prefix.\n * @description\n * Tests for the existence of a `0x` prefix, and returns the value without the prefix. Un-prefixed values are returned as-is.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexStripPrefix } from '@polkadot/util';\n *\n * console.log('stripped', hexStripPrefix('0x1234')); // => 1234\n * ```\n */\nexport function hexStripPrefix(value) {\n    if (!value || value === '0x') {\n        return '';\n    }\n    else if (REGEX_HEX_PREFIXED.test(value)) {\n        return value.substring(2);\n    }\n    else if (REGEX_HEX_NOPREFIX.test(value)) {\n        return value;\n    }\n    throw new Error(`Expected hex value to convert, found '${value}'`);\n}\n","import { BN } from './bn.js';\n/**\n * @name BN_ZERO\n * @summary BN constant for 0.\n */\nexport const BN_ZERO = /*#__PURE__*/ new BN(0);\n/**\n * @name BN_ONE\n * @summary BN constant for 1.\n */\nexport const BN_ONE = /*#__PURE__*/ new BN(1);\n/**\n * @name BN_TWO\n * @summary BN constant for 2.\n */\nexport const BN_TWO = /*#__PURE__*/ new BN(2);\n/**\n * @name BN_THREE\n * @summary BN constant for 3.\n */\nexport const BN_THREE = /*#__PURE__*/ new BN(3);\n/**\n * @name BN_FOUR\n * @summary BN constant for 4.\n */\nexport const BN_FOUR = /*#__PURE__*/ new BN(4);\n/**\n * @name BN_FIVE\n * @summary BN constant for 5.\n */\nexport const BN_FIVE = /*#__PURE__*/ new BN(5);\n/**\n * @name BN_SIX\n * @summary BN constant for 6.\n */\nexport const BN_SIX = /*#__PURE__*/ new BN(6);\n/**\n * @name BN_SEVEN\n * @summary BN constant for 7.\n */\nexport const BN_SEVEN = /*#__PURE__*/ new BN(7);\n/**\n * @name BN_EIGHT\n * @summary BN constant for 8.\n */\nexport const BN_EIGHT = /*#__PURE__*/ new BN(8);\n/**\n * @name BN_NINE\n * @summary BN constant for 9.\n */\nexport const BN_NINE = /*#__PURE__*/ new BN(9);\n/**\n * @name BN_TEN\n * @summary BN constant for 10.\n */\nexport const BN_TEN = /*#__PURE__*/ new BN(10);\n/**\n * @name BN_HUNDRED\n * @summary BN constant for 100.\n */\nexport const BN_HUNDRED = /*#__PURE__*/ new BN(100);\n/**\n * @name BN_THOUSAND\n * @summary BN constant for 1,000.\n */\nexport const BN_THOUSAND = /*#__PURE__*/ new BN(1000);\n/**\n * @name BN_MILLION\n * @summary BN constant for 1,000,000.\n */\nexport const BN_MILLION = /*#__PURE__*/ new BN(1000000);\n/**\n * @name BN_BILLION\n * @summary BN constant for 1,000,000,000.\n */\nexport const BN_BILLION = /*#__PURE__*/ new BN(1000000000);\n/**\n * @name BN_QUINTILL\n * @summary BN constant for 1,000,000,000,000,000,000.\n */\nexport const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);\n/**\n * @name BN_MAX_INTEGER\n * @summary BN constant for MAX_SAFE_INTEGER\n */\nexport const BN_MAX_INTEGER = /*#__PURE__*/ new BN(Number.MAX_SAFE_INTEGER);\n/**\n * @name BN_SQRT_MAX_INTEGER\n * @summary BN constant for Math.sqrt(MAX_SAFE_INTEGER)\n */\nexport const BN_SQRT_MAX_INTEGER = /*#__PURE__*/ new BN(94906265);\n","/**\n * @name isBigInt\n * @summary Tests for a `BigInt` object instance.\n * @description\n * Checks to see if the input object is an instance of `BigInt`\n * @example\n * <BR>\n *\n * ```javascript\n * import { isBigInt } from '@polkadot/util';\n *\n * console.log('isBigInt', isBigInt(123_456n)); // => true\n * ```\n */\nexport function isBigInt(value) {\n    return typeof value === 'bigint';\n}\n","import { hexToBn } from '../hex/toBn.js';\nimport { isBigInt } from '../is/bigInt.js';\nimport { isHex } from '../is/hex.js';\nimport { isToBigInt } from '../is/toBigInt.js';\nimport { isToBn } from '../is/toBn.js';\nimport { BN } from './bn.js';\n/**\n * @name bnToBn\n * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.\n * @description\n * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToBn } from '@polkadot/util';\n *\n * bnToBn(0x1234); // => BN(0x1234)\n * bnToBn(new BN(0x1234)); // => BN(0x1234)\n * ```\n */\nexport function bnToBn(value) {\n    return value\n        ? BN.isBN(value)\n            ? value\n            : isHex(value)\n                ? hexToBn(value.toString())\n                : isBigInt(value)\n                    ? new BN(value.toString())\n                    : isToBn(value)\n                        ? value.toBn()\n                        : isToBigInt(value)\n                            ? new BN(value.toBigInt().toString())\n                            : new BN(value)\n        : new BN(0);\n}\n","import { bnToBn } from './toBn.js';\nconst DEFAULT_OPTS = { bitLength: -1, isLe: true, isNegative: false };\n/**\n * @name bnToU8a\n * @summary Creates a Uint8Array object from a BN.\n * @description\n * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.\n * @example\n * <BR>\n *\n * ```javascript\n * import { bnToU8a } from '@polkadot/util';\n *\n * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]\n * ```\n */\nexport function bnToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {\n    const valueBn = bnToBn(value);\n    const byteLength = bitLength === -1\n        ? Math.ceil(valueBn.bitLength() / 8)\n        : Math.ceil((bitLength || 0) / 8);\n    if (!value) {\n        return bitLength === -1\n            ? new Uint8Array(1)\n            : new Uint8Array(byteLength);\n    }\n    const output = new Uint8Array(byteLength);\n    const bn = isNegative\n        ? valueBn.toTwos(byteLength * 8)\n        : valueBn;\n    output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);\n    return output;\n}\n","import { BN, BN_ONE, BN_TWO, bnToBn, bnToU8a } from '../bn/index.js';\nimport { u8aConcatStrict } from '../u8a/index.js';\nconst MAX_U8 = BN_TWO.pow(new BN(8 - 2)).isub(BN_ONE);\nconst MAX_U16 = BN_TWO.pow(new BN(16 - 2)).isub(BN_ONE);\nconst MAX_U32 = BN_TWO.pow(new BN(32 - 2)).isub(BN_ONE);\nconst BL_16 = { bitLength: 16 };\nconst BL_32 = { bitLength: 32 };\n/**\n * @name compactToU8a\n * @description Encodes a number into a compact representation\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactToU8a } from '@polkadot/util';\n *\n * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])\n * ```\n */\nexport function compactToU8a(value) {\n    const bn = bnToBn(value);\n    if (bn.lte(MAX_U8)) {\n        return new Uint8Array([bn.toNumber() << 2]);\n    }\n    else if (bn.lte(MAX_U16)) {\n        return bnToU8a(bn.shln(2).iadd(BN_ONE), BL_16);\n    }\n    else if (bn.lte(MAX_U32)) {\n        return bnToU8a(bn.shln(2).iadd(BN_TWO), BL_32);\n    }\n    const u8a = bnToU8a(bn);\n    let length = u8a.length;\n    // adjust to the minimum number of bytes\n    while (u8a[length - 1] === 0) {\n        length--;\n    }\n    if (length < 4) {\n        throw new Error('Invalid length, previous checks match anything less than 2^30');\n    }\n    return u8aConcatStrict([\n        // subtract 4 as minimum (also catered for in decoding)\n        new Uint8Array([((length - 4) << 2) + 0b11]),\n        u8a.subarray(0, length)\n    ]);\n}\n","import { u8aConcatStrict } from '../u8a/index.js';\nimport { compactToU8a } from './toU8a.js';\n/**\n * @name compactAddLength\n * @description Adds a length prefix to the input value\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactAddLength } from '@polkadot/util';\n *\n * console.log(compactAddLength(new Uint8Array([0xde, 0xad, 0xbe, 0xef]))); // Uint8Array([4 << 2, 0xde, 0xad, 0xbe, 0xef])\n * ```\n */\nexport function compactAddLength(input) {\n    return u8aConcatStrict([\n        compactToU8a(input.length),\n        input\n    ]);\n}\n","/**\n * @name isString\n * @summary Tests for a string.\n * @description\n * Checks to see if the input value is a JavaScript string.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isString } from '@polkadot/util';\n *\n * console.log('isString', isString('test')); // => true\n * ```\n */\nexport function isString(value) {\n    return typeof value === 'string' || value instanceof String;\n}\n","/**\n * @name isNumber\n * @summary Tests for a JavaScript number.\n * @description\n * Checks to see if the input value is a valid number.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isNumber } from '@polkadot/util';\n *\n * console.log('isNumber', isNumber(1234)); // => true\n * ```\n */\nexport function isNumber(value) {\n    return typeof value === 'number';\n}\n","/**\n * @name objectSpread\n * @summary Concats all sources into the destination\n */\nexport function objectSpread(dest, ...sources) {\n    for (let i = 0, count = sources.length; i < count; i++) {\n        const src = sources[i];\n        if (src) {\n            if (typeof src.entries === 'function') {\n                for (const [key, value] of src.entries()) {\n                    dest[key] = value;\n                }\n            }\n            else {\n                Object.assign(dest, src);\n            }\n        }\n    }\n    return dest;\n}\n","/**\n * @name arrayChunk\n * @summary Split T[] into T[][] based on the defind size\n * @description\n * Returns a set ao arrays based on the chunksize\n * @example\n * <BR>\n *\n * ```javascript\n * import { arrayChunk } from '@polkadot/util';\n *\n * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]\n * ```\n */\nexport function arrayChunk(array, chunkSize) {\n    const outputSize = Math.ceil(array.length / chunkSize);\n    // shortcut for the single-split case\n    if (outputSize === 1) {\n        return [array];\n    }\n    const output = Array(outputSize);\n    for (let i = 0; i < outputSize; i++) {\n        const offset = i * chunkSize;\n        output[i] = array.slice(offset, offset + chunkSize);\n    }\n    return output;\n}\n","/**\n * @name arrayFlatten\n * @summary Merge T[][] into T[]\n * @description\n * Returns a new array with all arrays merged into one\n * @example\n * <BR>\n *\n * ```javascript\n * import { arrayFlatten } from '@polkadot/util';\n *\n * arrayFlatten([[1, 2], [3, 4], [5]]); // [1, 2, 3, 4, 5]\n * ```\n */\nexport function arrayFlatten(arrays) {\n    const num = arrays.length;\n    // shortcuts for the empty & single-entry case\n    if (num === 0) {\n        return [];\n    }\n    else if (num === 1) {\n        return arrays[0];\n    }\n    // pre-allocate based on the combined size\n    let size = 0;\n    for (let i = 0; i < num; i++) {\n        size += arrays[i].length;\n    }\n    const output = new Array(size);\n    let i = -1;\n    for (let j = 0; j < num; j++) {\n        const a = arrays[j];\n        // instead of pushing, we just set the entries\n        for (let e = 0, count = a.length; e < count; e++) {\n            output[++i] = a[e];\n        }\n    }\n    return output;\n}\n","import { isFunction } from './is/function.js';\n/**\n * @name assert\n * @summary Checks for a valid test, if not Error is thrown.\n * @description\n * Checks that `test` is a truthy value. If value is falsy (`null`, `undefined`, `false`, ...), it throws an Error with the supplied `message`. When `test` passes, `true` is returned.\n * @example\n * <BR>\n *\n * ```javascript\n * const { assert } from '@polkadot/util';\n *\n * assert(true, 'True should be true'); // passes\n * assert(false, 'False should not be true'); // Error thrown\n * assert(false, () => 'message'); // Error with 'message'\n * ```\n */\nexport function assert(condition, message) {\n    if (!condition) {\n        throw new Error(isFunction(message)\n            ? message()\n            : message);\n    }\n}\n/**\n * @name assertReturn\n * @description Returns when the value is not undefined/null, otherwise throws assertion error\n */\nexport function assertReturn(value, message) {\n    assert(value !== undefined && value !== null, message);\n    return value;\n}\n/**\n * @name assertUnreachable\n * @description An assertion helper that ensures all codepaths are followed\n */\nexport function assertUnreachable(x) {\n    throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);\n}\n","/** @internal */\nexport function createCmp(cmp) {\n    return (...items) => {\n        const count = items.length;\n        if (count === 0) {\n            throw new Error('Must provide one or more arguments');\n        }\n        let result = items[0];\n        for (let i = 1; i < count; i++) {\n            if (cmp(items[i], result)) {\n                result = items[i];\n            }\n        }\n        return result;\n    };\n}\n","/**\n * @name u8aToFloat\n * @description Converts a Uint8Array value into the float (either 32 or 64-bit)\n * representation.\n */\nexport function u8aToFloat(value, { bitLength = 32, isLe = true } = {}) {\n    if (bitLength !== 32 && bitLength !== 64) {\n        throw new Error('Invalid bitLength provided, expected 32 or 64');\n    }\n    else if (value.length < (bitLength / 8)) {\n        throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);\n    }\n    const dv = new DataView(value.buffer, value.byteOffset);\n    return bitLength === 32\n        ? dv.getFloat32(0, isLe)\n        : dv.getFloat64(0, isLe);\n}\n","/**\n * @name u8aToNumber\n * @summary Creates a number from a Uint8Array object.\n */\nexport function u8aToNumber(value, { isLe = true, isNegative = false } = {}) {\n    // slice + reverse is expensive, however SCALE is LE by default so this is the path\n    // we are most interested in (the BE is added for the sake of being comprehensive)\n    if (!isLe) {\n        value = value.slice().reverse();\n    }\n    const count = value.length;\n    // When the value is a i{8, 16, 24, 32, 40, 40} values and the top-most bit\n    // indicates a signed value, we use a two's complement conversion. If one of these\n    // flags are not set, we just do a normal unsigned conversion (the same shortcut\n    // applies in both the u8aTo{BigInt, Bn} conversions as well)\n    if (isNegative && count && (value[count - 1] & 0x80)) {\n        switch (count) {\n            case 0:\n                return 0;\n            case 1:\n                return (((value[0] ^ 255) * -1) - 1);\n            case 2:\n                return ((((value[0] + (value[1] << 8)) ^ 65535) * -1) - 1);\n            case 3:\n                return ((((value[0] + (value[1] << 8) + (value[2] << 16)) ^ 16777215) * -1) - 1);\n            case 4:\n                // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n                // 32-bit, in the case where the top-most bit is set this yields a negative value\n                return ((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) * -1) - 1);\n            case 5:\n                return (((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + ((value[4] ^ 0xff) * 4294967296)) * -1) - 1);\n            case 6:\n                return (((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + (((value[4] + (value[5] << 8)) ^ 65535) * 4294967296)) * -1) - 1);\n            default:\n                throw new Error('Value more than 48-bits cannot be reliably converted');\n        }\n    }\n    switch (count) {\n        case 0:\n            return 0;\n        case 1:\n            return value[0];\n        case 2:\n            return value[0] + (value[1] << 8);\n        case 3:\n            return value[0] + (value[1] << 8) + (value[2] << 16);\n        case 4:\n            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n            // 32-bit, in the case where the top-most bit is set this yields a negative value\n            return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216);\n        case 5:\n            return value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8)) * 16777216);\n        case 6:\n            return value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);\n        default:\n            throw new Error('Value more than 48-bits cannot be reliably converted');\n    }\n}\n","import { createCmp } from '../bi/helpers.js';\n/**\n * @name bnMax\n * @summary Finds and returns the highest value in an array of BNs.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnMax } from '@polkadot/util';\n *\n * bnMax([new BN(1), new BN(3), new BN(2)]).toString(); // => '3'\n * ```\n */\nexport const bnMax = /*#__PURE__*/ createCmp((a, b) => a.gt(b));\n/**\n * @name bnMin\n * @summary Finds and returns the smallest value in an array of BNs.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnMin } from '@polkadot/util';\n *\n * bnMin([new BN(1), new BN(3), new BN(2)]).toString(); // => '1'\n * ```\n */\nexport const bnMin = /*#__PURE__*/ createCmp((a, b) => a.lt(b));\n","import { BN } from './bn.js';\nimport { BN_MAX_INTEGER, BN_ONE, BN_SQRT_MAX_INTEGER } from './consts.js';\nimport { bnToBn } from './toBn.js';\n/**\n * @name bnSqrt\n * @summary Calculates the integer square root of a BN\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnSqrt } from '@polkadot/util';\n *\n * bnSqrt(new BN(16)).toString(); // => '4'\n * ```\n */\nexport function bnSqrt(value) {\n    const n = bnToBn(value);\n    if (n.isNeg()) {\n        throw new Error('square root of negative numbers is not supported');\n    }\n    // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/\n    // shortcut <= 2^53 - 1 to use the JS utils\n    if (n.lte(BN_MAX_INTEGER)) {\n        // ~~ More performant version of Math.floor\n        return new BN(~~Math.sqrt(n.toNumber()));\n    }\n    // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the\n    // output will be larger than this, we expect this to be a safe start\n    let x0 = BN_SQRT_MAX_INTEGER.clone();\n    while (true) {\n        const x1 = n.div(x0).iadd(x0).ishrn(1);\n        if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {\n            return x0;\n        }\n        x0 = x1;\n    }\n}\n","import { u8aToHex } from '../u8a/index.js';\nimport { bnToU8a } from './toU8a.js';\n/**\n * @name bnToHex\n * @summary Creates a hex value from a BN.js bignumber object.\n * @description\n * `null` inputs returns a `0x` result, BN values return the actual value as a `0x` prefixed hex value. Anything that is not a BN object throws an error. With `bitLength` set, it fixes the number to the specified length.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToHex } from '@polkadot/util';\n *\n * bnToHex(new BN(0x123456)); // => '0x123456'\n * ```\n */\nexport function bnToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {\n    return u8aToHex(bnToU8a(value, { bitLength, isLe, isNegative }));\n}\n","import { BN } from '../bn/index.js';\nimport { u8aToBn, u8aToU8a } from '../u8a/index.js';\n/**\n * @name compactFromU8a\n * @description Retrives the offset and encoded length from a compact-prefixed value\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactFromU8a } from '@polkadot/util';\n *\n * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));\n *\n * console.log('value offset=', offset, 'length=', length); // 4, 0xffff\n * ```\n */\nexport function compactFromU8a(input) {\n    const u8a = u8aToU8a(input);\n    // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster\n    // than doing an additional call to u8aToBn (as with variable length)\n    switch (u8a[0] & 0b11) {\n        case 0b00:\n            return [1, new BN(u8a[0] >>> 2)];\n        case 0b01:\n            return [2, new BN((u8a[0] + (u8a[1] << 8)) >>> 2)];\n        case 0b10:\n            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n            // 32-bit, in the case where the top-most bit is set this yields a negative value\n            return [4, new BN((u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + (u8a[3] * 16777216)) >>> 2)];\n        // 0b11\n        default: {\n            // add 5 to shifted (4 for base length, 1 for this byte)\n            const offset = (u8a[0] >>> 2) + 5;\n            // we unroll the loop\n            switch (offset) {\n                // there still could be 4 bytes data, similar to 0b10 above (with offsets)\n                case 5:\n                    // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n                    // 32-bit, in the case where the top-most bit is set this yields a negative value\n                    return [5, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] * 16777216))];\n                case 6:\n                    return [6, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8)) * 16777216))];\n                // 6 bytes data is the maximum, 48 bits (56 would overflow)\n                case 7:\n                    return [7, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216))];\n                // for anything else, use the non-unrolled version\n                default:\n                    return [offset, u8aToBn(u8a.subarray(1, offset))];\n            }\n        }\n    }\n}\n/**\n * @name compactFromU8aLim\n * @description A limited version of [[compactFromU8a]], accepting only Uint8Array inputs for values <= 48 bits\n */\nexport function compactFromU8aLim(u8a) {\n    // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster\n    // than doing an additional call to u8aToBn (as with variable length)\n    switch (u8a[0] & 0b11) {\n        case 0b00:\n            return [1, u8a[0] >>> 2];\n        case 0b01:\n            return [2, (u8a[0] + (u8a[1] << 8)) >>> 2];\n        case 0b10:\n            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n            // 32-bit, in the case where the top-most bit is set this yields a negative value\n            return [4, (u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + (u8a[3] * 16777216)) >>> 2];\n        // 0b11\n        default: {\n            // add 5 to shifted (4 for base length, 1 for this byte)\n            // we unroll the loop\n            switch ((u8a[0] >>> 2) + 5) {\n                // there still could be 4 bytes data, similar to 0b10 above (with offsets)\n                case 5:\n                    return [5, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] * 16777216)];\n                case 6:\n                    return [6, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8)) * 16777216)];\n                // 6 bytes data is the maximum, 48 bits (56 would overflow)\n                case 7:\n                    return [7, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216)];\n                // for anything else, we are above the actual MAX_SAFE_INTEGER - bail out\n                default:\n                    throw new Error('Compact input is > Number.MAX_SAFE_INTEGER');\n            }\n        }\n    }\n}\n","import { compactFromU8a } from './fromU8a.js';\n/**\n * @name compactStripLength\n * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactStripLength } from '@polkadot/util';\n *\n * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]\n * ```\n */\nexport function compactStripLength(input) {\n    const [offset, length] = compactFromU8a(input);\n    const total = offset + length.toNumber();\n    return [\n        total,\n        input.subarray(offset, total)\n    ];\n}\n","/**\n * @name floatToU8a\n * @description Converts a float into a U8a representation (While we don't use BE in SCALE\n * we still allow for either representation, although, as elsewhere, isLe is default)\n */\nexport function floatToU8a(value = 0.0, { bitLength = 32, isLe = true } = {}) {\n    if (bitLength !== 32 && bitLength !== 64) {\n        throw new Error('Invalid bitLength provided, expected 32 or 64');\n    }\n    const result = new Uint8Array(bitLength / 8);\n    const dv = new DataView(result.buffer, result.byteOffset);\n    if (bitLength === 32) {\n        dv.setFloat32(0, Number(value), isLe);\n    }\n    else {\n        dv.setFloat64(0, Number(value), isLe);\n    }\n    return result;\n}\n","/**\n * @name isBoolean\n * @summary Tests for a boolean value.\n * @description\n * Checks to see if the input value is a JavaScript boolean.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isBoolean } from '@polkadot/util';\n *\n * isBoolean(false); // => true\n * ```\n */\nexport function isBoolean(value) {\n    return typeof value === 'boolean';\n}\n","const NUMBER_REGEX = new RegExp('(\\\\d+?)(?=(\\\\d{3})+(?!\\\\d)|$)', 'g');\n/**\n * @name formatDecimal\n * @description Formats a number into string format with thousand separators\n */\nexport function formatDecimal(value, separator = ',') {\n    // We can do this by adjusting the regx, however for the sake of clarity\n    // we rather strip and re-add the negative sign in the output\n    const isNegative = value[0].startsWith('-');\n    const matched = isNegative\n        ? value.substring(1).match(NUMBER_REGEX)\n        : value.match(NUMBER_REGEX);\n    return matched\n        ? `${isNegative ? '-' : ''}${matched.join(separator)}`\n        : value;\n}\n","/**\n * Get the decimal and thousand separator of a locale\n * @param locale\n * @returns {decimal: string, thousand: string}\n */\nexport function getSeparator(locale) {\n    return {\n        decimal: (0.1).toLocaleString(locale).substring(1, 2),\n        thousand: (1000).toLocaleString(locale).substring(1, 2)\n    };\n}\n","/** @internal */\nexport const SI_MID = 8;\n/** @internal */\nexport const SI = [\n    { power: -24, text: 'yocto', value: 'y' },\n    { power: -21, text: 'zepto', value: 'z' },\n    { power: -18, text: 'atto', value: 'a' },\n    { power: -15, text: 'femto', value: 'f' },\n    { power: -12, text: 'pico', value: 'p' },\n    { power: -9, text: 'nano', value: 'n' },\n    { power: -6, text: 'micro', value: 'µ' },\n    { power: -3, text: 'milli', value: 'm' },\n    { power: 0, text: 'Unit', value: '-' }, // position 8\n    { power: 3, text: 'Kilo', value: 'k' },\n    { power: 6, text: 'Mill', value: 'M' }, // Mega, M\n    { power: 9, text: 'Bill', value: 'B' }, // Giga, G\n    { power: 12, text: 'Tril', value: 'T' }, // Tera, T\n    { power: 15, text: 'Peta', value: 'P' },\n    { power: 18, text: 'Exa', value: 'E' },\n    { power: 21, text: 'Zeta', value: 'Z' },\n    { power: 24, text: 'Yotta', value: 'Y' }\n];\n/** @internal */\nexport function findSi(type) {\n    // use a loop here, better RN support (which doesn't have [].find)\n    for (let i = 0, count = SI.length; i < count; i++) {\n        if (SI[i].value === type) {\n            return SI[i];\n        }\n    }\n    return SI[SI_MID];\n}\n/** @internal */\nexport function calcSi(text, decimals, forceUnit) {\n    if (forceUnit) {\n        return findSi(forceUnit);\n    }\n    const siDefIndex = (SI_MID - 1) + Math.ceil((text.length - decimals) / 3);\n    return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];\n}\n","import { bnToBn } from '../bn/toBn.js';\nimport { isBoolean } from '../is/boolean.js';\nimport { formatDecimal } from './formatDecimal.js';\nimport { getSeparator } from './getSeparator.js';\nimport { calcSi, findSi, SI, SI_MID } from './si.js';\nconst DEFAULT_DECIMALS = 0;\nconst DEFAULT_UNIT = SI[SI_MID].text;\nlet defaultDecimals = DEFAULT_DECIMALS;\nlet defaultUnit = DEFAULT_UNIT;\nfunction _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = 'en', withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {\n    // we only work with string inputs here - convert anything\n    // into the string-only value\n    let text = bnToBn(input).toString();\n    if (text.length === 0 || text === '0') {\n        return '0';\n    }\n    // strip the negative sign so we can work with clean groupings, re-add this in the\n    // end when we return the result (from here on we work with positive numbers)\n    let sign = '';\n    if (text[0].startsWith('-')) {\n        sign = '-';\n        text = text.substring(1);\n    }\n    // We start at midpoint (8) minus 1 - this means that values display as\n    // 123.4567 instead of 0.1234 k (so we always have the most relevant).\n    const si = calcSi(text, decimals, forceUnit);\n    const mid = text.length - (decimals + si.power);\n    const pre = mid <= 0 ? '0' : text.substring(0, mid);\n    // get the post from the midpoint onward and then first add max decimals\n    // before trimming to the correct (calculated) amount of decimals again\n    let post = text\n        .padStart(mid < 0 ? decimals : 1, '0')\n        .substring(mid < 0 ? 0 : mid)\n        .padEnd(withAll ? Math.max(decimals, 4) : 4, '0')\n        .substring(0, withAll ? Math.max(4, decimals + si.power) : 4);\n    // remove all trailing 0's (if required via flag)\n    if (!withZero) {\n        let end = post.length - 1;\n        // This looks inefficient, however it is better to do the checks and\n        // only make one final slice than it is to do it in multiples\n        do {\n            if (post[end] === '0') {\n                end--;\n            }\n        } while (post[end] === '0');\n        post = post.substring(0, end + 1);\n    }\n    // the display unit\n    const unit = isBoolean(withUnit)\n        ? SI[SI_MID].text\n        : withUnit;\n    // format the units for display based on the flags\n    const units = withSi || withSiFull\n        ? si.value === '-'\n            ? withUnit\n                ? ` ${unit}`\n                : ''\n            : ` ${withSiFull ? `${si.text}${withUnit ? ' ' : ''}` : si.value}${withUnit ? unit : ''}`\n        : '';\n    const { decimal, thousand } = getSeparator(locale);\n    return `${sign}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;\n}\nexport const formatBalance = _formatBalance;\nformatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);\nformatBalance.findSi = findSi;\nformatBalance.getDefaults = () => {\n    return {\n        decimals: defaultDecimals,\n        unit: defaultUnit\n    };\n};\nformatBalance.getOptions = (decimals = defaultDecimals) => {\n    return SI.filter(({ power }) => power < 0\n        ? (decimals + power) >= 0\n        : true);\n};\nformatBalance.setDefaults = ({ decimals, unit }) => {\n    defaultDecimals = (Array.isArray(decimals)\n        ? decimals[0]\n        : decimals) ?? defaultDecimals;\n    defaultUnit = (Array.isArray(unit)\n        ? unit[0]\n        : unit) ?? defaultUnit;\n    SI[SI_MID].text = defaultUnit;\n};\n","/** @internal */\nfunction zeroPad(value) {\n    return value.toString().padStart(2, '0');\n}\n/**\n * @name formatDate\n * @description Formats a date in CCYY-MM-DD HH:MM:SS format\n */\nexport function formatDate(date) {\n    const year = date.getFullYear().toString();\n    const month = zeroPad((date.getMonth() + 1));\n    const day = zeroPad(date.getDate());\n    const hour = zeroPad(date.getHours());\n    const minute = zeroPad(date.getMinutes());\n    const second = zeroPad(date.getSeconds());\n    return `${year}-${month}-${day} ${hour}:${minute}:${second}`;\n}\n","import { bnToBn } from '../bn/toBn.js';\nimport { formatDecimal } from './formatDecimal.js';\nimport { getSeparator } from './getSeparator.js';\n/**\n * @name formatNumber\n * @description Formats a number into string format with thousand separators\n */\nexport function formatNumber(value, { locale = 'en' } = {}) {\n    const { thousand } = getSeparator(locale);\n    return formatDecimal(bnToBn(value).toString(), thousand);\n}\n","import { u8aToU8a } from '../u8a/toU8a.js';\nimport { isHex } from './hex.js';\nimport { isString } from './string.js';\n/** @internal */\nfunction isAsciiStr(str) {\n    for (let i = 0, count = str.length; i < count; i++) {\n        const b = str.charCodeAt(i);\n        // check is inlined here, it is faster than making a call\n        if (b < 32 || b > 126) {\n            return false;\n        }\n    }\n    return true;\n}\n/** @internal */\nfunction isAsciiBytes(u8a) {\n    for (let i = 0, count = u8a.length; i < count; i++) {\n        const b = u8a[i] | 0;\n        // check is inlined here, it is faster than making a call\n        if (b < 32 || b > 126) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @name isAscii\n * @summary Tests if the input is printable ASCII\n * @description\n * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters\n */\nexport function isAscii(value) {\n    return isString(value)\n        ? isHex(value)\n            ? isAsciiBytes(u8aToU8a(value))\n            : isAsciiStr(value)\n        : value\n            ? isAsciiBytes(value)\n            : false;\n}\n","import { isOnFunction } from './helpers.js';\n/**\n * @name isClass\n * Tests if the supplied argument is a Class\n */\nexport const isClass = /*#__PURE__*/ isOnFunction('isPrototypeOf', 'hasOwnProperty');\n","import { isClass } from './class.js';\n/**\n * @name isChildClass\n * @summary Tests if the child extends the parent Class\n * @description\n * Checks to see if the child Class extends the parent Class\n * @example\n * <BR>\n *\n * ```javascript\n * import { isChildClass } from '@polkadot/util';\n *\n * console.log('isChildClass', isChildClass(BN, BN); // => true\n * console.log('isChildClass', isChildClass(BN, Uint8Array); // => false\n * ```\n */\nexport function isChildClass(Parent, Child) {\n    // https://stackoverflow.com/questions/30993434/check-if-a-constructor-inherits-another-in-es6/30993664\n    return isClass(Child) && isClass(Parent)\n        // eslint-disable-next-line no-prototype-builtins\n        ? Parent === Child || Parent.isPrototypeOf(Child)\n        : false;\n}\n","import { isOnObject } from './helpers.js';\nconst checkCodec = /*#__PURE__*/ isOnObject('toHex', 'toHuman', 'toU8a');\nconst checkRegistry = /*#__PURE__*/ isOnObject('get');\nexport function isCodec(value) {\n    return checkCodec(value) && checkRegistry(value.registry);\n}\n","import { isOnObject } from './helpers.js';\n/**\n * @name isCompact\n * @summary Tests for SCALE-Compact-like object instance.\n */\nexport const isCompact = /*#__PURE__*/ isOnObject('toBigInt', 'toBn', 'toNumber', 'unwrap');\n","import { isBigInt } from './is/bigInt.js';\n/** @internal */\nfunction replacer(_, v) {\n    return isBigInt(v)\n        ? v.toString()\n        : v;\n}\n/**\n * @name stringify\n * @summary Performs a JSON.stringify, with BigInt handling\n * @description A wrapper for JSON.stringify that handles BigInt values transparently, converting them to string. No differences from the native JSON.stringify function otherwise.\n */\nexport function stringify(value, space) {\n    return JSON.stringify(value, replacer, space);\n}\n","/**\n * @name isNull\n * @summary Tests for a `null` values.\n * @description\n * Checks to see if the input value is `null`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isNull } from '@polkadot/util';\n *\n * console.log('isNull', isNull(null)); // => true\n * ```\n */\nexport function isNull(value) {\n    return value === null;\n}\n","/**\n * @name isUndefined\n * @summary Tests for a `undefined` values.\n * @description\n * Checks to see if the input value is `undefined`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isUndefined } from '@polkadot/util';\n *\n * console.log('isUndefined', isUndefined(void(0))); // => true\n * ```\n */\nexport function isUndefined(value) {\n    return value === undefined;\n}\n","import { u8aToU8a } from '../u8a/toU8a.js';\nimport { isString } from './string.js';\n/**\n * @name isUtf8\n * @summary Tests if the input is valid Utf8\n * @description\n * Checks to see if the input string or Uint8Array is valid Utf8\n */\nexport function isUtf8(value) {\n    if (!value) {\n        return isString(value);\n    }\n    const u8a = u8aToU8a(value);\n    const len = u8a.length;\n    let i = 0;\n    while (i < len) {\n        if (u8a[i] <= 0x7F) /* 00..7F */ {\n            i += 1;\n        }\n        else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF) /* C2..DF 80..BF */ {\n            if (i + 1 < len) /* Expect a 2nd byte */ {\n                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {\n                    // *message = \"After a first byte between C2 and DF, expecting a 2nd byte between 80 and BF\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte between C2 and DF, expecting a 2nd byte.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 2;\n        }\n        else if (u8a[i] === 0xE0) /* E0 A0..BF 80..BF */ {\n            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {\n                if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) {\n                    // *message = \"After a first byte of E0, expecting a 2nd byte between A0 and BF.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte of E0, expecting a 3nd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte of E0, expecting two following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 3;\n        }\n        else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC) /* E1..EC 80..BF 80..BF */ {\n            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {\n                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {\n                    // *message = \"After a first byte between E1 and EC, expecting the 2nd byte between 80 and BF.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte between E1 and EC, expecting the 3rd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte between E1 and EC, expecting two following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 3;\n        }\n        else if (u8a[i] === 0xED) /* ED 80..9F 80..BF */ {\n            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {\n                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) {\n                    // *message = \"After a first byte of ED, expecting 2nd byte between 80 and 9F.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte of ED, expecting 3rd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte of ED, expecting two following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 3;\n        }\n        else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF) /* EE..EF 80..BF 80..BF */ {\n            if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {\n                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {\n                    // *message = \"After a first byte between EE and EF, expecting 2nd byte between 80 and BF.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte between EE and EF, expecting 3rd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte between EE and EF, two following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 3;\n        }\n        else if (u8a[i] === 0xF0) /* F0 90..BF 80..BF 80..BF */ {\n            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {\n                if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) {\n                    // *message = \"After a first byte of F0, expecting 2nd byte between 90 and BF.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte of F0, expecting 3rd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {\n                    // *message = \"After a first byte of F0, expecting 4th byte between 80 and BF.\";\n                    // *faulty_bytes = 4;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte of F0, expecting three following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 4;\n        }\n        else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3) /* F1..F3 80..BF 80..BF 80..BF */ {\n            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {\n                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {\n                    // *message = \"After a first byte of F1, F2, or F3, expecting a 2nd byte between 80 and BF.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte of F1, F2, or F3, expecting a 3rd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {\n                    // *message = \"After a first byte of F1, F2, or F3, expecting a 4th byte between 80 and BF.\";\n                    // *faulty_bytes = 4;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte of F1, F2, or F3, expecting three following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 4;\n        }\n        else if (u8a[i] === 0xF4) /* F4 80..8F 80..BF 80..BF */ {\n            if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {\n                if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) {\n                    // *message = \"After a first byte of F4, expecting 2nd byte between 80 and 8F.\";\n                    // *faulty_bytes = 2;\n                    return false;\n                }\n                if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {\n                    // *message = \"After a first byte of F4, expecting 3rd byte between 80 and BF.\";\n                    // *faulty_bytes = 3;\n                    return false;\n                }\n                if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {\n                    // *message = \"After a first byte of F4, expecting 4th byte between 80 and BF.\";\n                    // *faulty_bytes = 4;\n                    return false;\n                }\n            }\n            else {\n                // *message = \"After a first byte of F4, expecting three following bytes.\";\n                // *faulty_bytes = 1;\n                return false;\n            }\n            i += 4;\n        }\n        else {\n            // *message = \"Expecting bytes in the following ranges: 00..7F C2..F4.\";\n            // *faulty_bytes = 1;\n            return false;\n        }\n    }\n    return true;\n}\n","/**\n * @name lazyMethod\n * @description\n * Creates a lazy, on-demand getter for the specific value. Upon get the value will be evaluated.\n */\nexport function lazyMethod(result, item, creator, getName, index = 0) {\n    const name = getName\n        ? getName(item, index)\n        : item.toString();\n    let value;\n    Object.defineProperty(result, name, {\n        // This allows for re-configuration with the embedded defineProperty below\n        // and ensures that on tested browsers and Node, it _will_ be redefined\n        // and thus short-circuited for future access\n        configurable: true,\n        enumerable: true,\n        // Use a function here, we don't want to capture the outer this, i.e.\n        // don't use arrow functions in this context since we have a this inside\n        get: function () {\n            // This check should _always_ be false and unneeded, since we override\n            // with a value below ... however we ensure we are quire vigilant against\n            // all environment failures, so we are rather be safe than sorry\n            if (value === undefined) {\n                value = creator(item, index, this);\n                try {\n                    // re-define the property as a value, next time around this\n                    // getter will only return the computed value\n                    Object.defineProperty(this, name, { value });\n                }\n                catch {\n                    // ignore any errors, since this _should_ not happen due to\n                    // the \"configurable\" property above. But if it ever does\n                    // from here-on we will be the cached value the next time\n                    // around (with a very slight dip in performance)\n                }\n            }\n            return value;\n        }\n    });\n}\n/**\n * @name lazyMethods\n * @description\n * Creates lazy, on-demand getters for the specific values.\n */\nexport function lazyMethods(result, items, creator, getName) {\n    for (let i = 0, count = items.length; i < count; i++) {\n        lazyMethod(result, items[i], creator, getName, i);\n    }\n    return result;\n}\n","/**\n * A sharable identity function. Returns the input as-is with no transformation applied.\n */\nexport function identity(value) {\n    return value;\n}\n/**\n * A sharable noop function. As the name suggests, does nothing\n */\nexport function noop() {\n    // noop\n}\n","import { xglobal } from '@polkadot/x-global';\nimport { formatDate } from './format/formatDate.js';\nimport { isBn } from './is/bn.js';\nimport { isBuffer } from './is/buffer.js';\nimport { isFunction } from './is/function.js';\nimport { isObject } from './is/object.js';\nimport { isU8a } from './is/u8a.js';\nimport { u8aToHex } from './u8a/toHex.js';\nimport { u8aToU8a } from './u8a/toU8a.js';\nimport { noop } from './noop.js';\nconst logTo = {\n    debug: 'log',\n    error: 'error',\n    log: 'log',\n    warn: 'warn'\n};\nfunction formatOther(value) {\n    if (value && isObject(value) && value.constructor === Object) {\n        const result = {};\n        for (const [k, v] of Object.entries(value)) {\n            result[k] = loggerFormat(v);\n        }\n        return result;\n    }\n    return value;\n}\nexport function loggerFormat(value) {\n    if (Array.isArray(value)) {\n        return value.map(loggerFormat);\n    }\n    else if (isBn(value)) {\n        return value.toString();\n    }\n    else if (isU8a(value) || isBuffer(value)) {\n        return u8aToHex(u8aToU8a(value));\n    }\n    return formatOther(value);\n}\nfunction formatWithLength(maxLength) {\n    return (v) => {\n        if (maxLength <= 0) {\n            return v;\n        }\n        const r = `${v}`;\n        return r.length < maxLength\n            ? v\n            : `${r.substring(0, maxLength)} ...`;\n    };\n}\nfunction apply(log, type, values, maxSize = -1) {\n    if (values.length === 1 && isFunction(values[0])) {\n        const fnResult = values[0]();\n        return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);\n    }\n    console[logTo[log]](formatDate(new Date()), type, ...values\n        .map(loggerFormat)\n        .map(formatWithLength(maxSize)));\n}\nfunction isDebugOn(e, type) {\n    return !!e && (e === '*' ||\n        type === e ||\n        (e.endsWith('*') &&\n            type.startsWith(e.slice(0, -1))));\n}\nfunction isDebugOff(e, type) {\n    return !!e && (e.startsWith('-') &&\n        (type === e.slice(1) ||\n            (e.endsWith('*') &&\n                type.startsWith(e.slice(1, -1)))));\n}\nfunction getDebugFlag(env, type) {\n    let flag = false;\n    for (const e of env) {\n        if (isDebugOn(e, type)) {\n            flag = true;\n        }\n        else if (isDebugOff(e, type)) {\n            flag = false;\n        }\n    }\n    return flag;\n}\nfunction parseEnv(type) {\n    const maxSize = parseInt(xglobal.process?.env?.['DEBUG_MAX'] || '-1', 10);\n    return [\n        getDebugFlag((xglobal.process?.env?.['DEBUG'] || '').toLowerCase().split(','), type),\n        isNaN(maxSize)\n            ? -1\n            : maxSize\n    ];\n}\n/**\n * @name Logger\n * @summary Creates a consistent log interface for messages\n * @description\n * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.\n * @example\n * <BR>\n *\n * ```javascript\n * import { logger } from '@polkadot/util';\n *\n * const l = logger('test');\n * ```\n */\nexport function logger(origin) {\n    const type = `${origin.toUpperCase()}:`.padStart(16);\n    const [isDebug, maxSize] = parseEnv(origin.toLowerCase());\n    return {\n        debug: isDebug\n            ? (...values) => apply('debug', type, values, maxSize)\n            : noop,\n        error: (...values) => apply('error', type, values),\n        log: (...values) => apply('log', type, values),\n        noop,\n        warn: (...values) => apply('warn', type, values)\n    };\n}\n","import { stringify } from './stringify.js';\nfunction defaultGetId() {\n    return 'none';\n}\n/**\n * @name memoize\n * @description Memomize the function with a specific instanceId\n */\nexport function memoize(fn, { getInstanceId = defaultGetId } = {}) {\n    const cache = {};\n    const memoized = (...args) => {\n        const stringParams = stringify(args);\n        const instanceId = getInstanceId();\n        if (!cache[instanceId]) {\n            cache[instanceId] = {};\n        }\n        if (cache[instanceId][stringParams] === undefined) {\n            cache[instanceId][stringParams] = fn(...args);\n        }\n        return cache[instanceId][stringParams];\n    };\n    memoized.unmemoize = (...args) => {\n        const stringParams = stringify(args);\n        const instanceId = getInstanceId();\n        if (cache[instanceId]?.[stringParams] !== undefined) {\n            delete cache[instanceId][stringParams];\n        }\n    };\n    return memoized;\n}\n","/**\n * @name nextTick\n * @description Defer the operation to the queue for evaluation on the next tick\n */\nexport function nextTick(onExec, onError) {\n    // While Promise.resolve().then(...) would defer to the nextTick, this\n    // actually does not play as nicely in browsers like the setTimeout(...)\n    // approach. So the safer, though less optimal approach is the one taken here\n    setTimeout(() => {\n        Promise\n            .resolve()\n            .then(() => {\n            onExec();\n        })\n            .catch((error) => {\n            if (onError) {\n                onError(error);\n            }\n            else {\n                console.error(error);\n            }\n        });\n    }, 0);\n}\n","/**\n * @name objectClear\n * @summary Removes all the keys from the input object\n */\nexport function objectClear(value) {\n    const keys = Object.keys(value);\n    for (let i = 0, count = keys.length; i < count; i++) {\n        delete value[keys[i]];\n    }\n    return value;\n}\n","/**\n * @name objectProperty\n * @summary Assign a get property on the input object\n */\nexport function objectProperty(that, key, getter, getName, index = 0) {\n    const name = getName\n        ? getName(key, index)\n        : key;\n    // There are 3 approaches here -\n    //  - Object.prototype.hasOwnProperty.call(that, key) - this only checks the current class, i.e\n    //    will retuirn false if the property is set in the parent class\n    //  - isUndefined(...) - this may yield a false positive when the property is there, but not set.\n    //    Additionally, on pre-defined getters it may make a call\n    //  - key in that - Does not need to be combined with either of the above and checks the full chain\n    if (!(name in that)) {\n        Object.defineProperty(that, name, {\n            enumerable: true,\n            // Unlike in lazy, we always call into the upper function, i.e. this method\n            // does not cache old values (it is expected to be used for dynamic values)\n            get: function () {\n                return getter(key, index, this);\n            }\n        });\n    }\n}\n/**\n * @name objectProperties\n * @summary Assign get properties on the input object\n */\nexport function objectProperties(that, keys, getter, getName) {\n    for (let i = 0, count = keys.length; i < count; i++) {\n        objectProperty(that, keys[i], getter, getName, i);\n    }\n}\n","export const CC_TO_UP = new Array(256);\nexport const CC_TO_LO = new Array(256);\nfor (let i = 0, count = CC_TO_UP.length; i < count; i++) {\n    CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();\n    CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();\n}\n/** @internal */\nfunction formatAllCaps(w) {\n    return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];\n}\n/**\n * @internal\n *\n * Inspired by https://stackoverflow.com/a/2970667\n *\n * This is not as optimal as the original SO answer (we split into per-word),\n * however it does pass the tests (which the SO version doesn't) and is still\n * a major improvement over the original camelcase npm package -\n *\n *   camelcase: 20.88 μs/op\n *        this:  1.00 μs/op\n *\n * Caveat of this: only Ascii, but acceptable for the intended usecase\n */\nfunction converter(format) {\n    return (value) => {\n        const parts = value\n            // replace all separators (including consequtive) with spaces\n            .replace(/[-_., ]+/g, ' ')\n            // we don't want leading or trailing spaces\n            .trim()\n            // split into words\n            .split(' ');\n        let result = '';\n        for (let i = 0, count = parts.length; i < count; i++) {\n            const w = parts[i];\n            // apply the formatting\n            result += format(/^[\\dA-Z]+$/.test(w)\n                // all full uppercase + letters are changed to lowercase\n                ? w.toLowerCase()\n                // all consecutive capitals + letters are changed to lowercase\n                // e.g. UUID64 -> uuid64, while preserving splits, eg. NFTOrder -> nftOrder\n                : w.replace(/^[\\dA-Z]{2,}[^a-z]/, formatAllCaps), i);\n        }\n        return result;\n    };\n}\n/**\n * @name stringCamelCase\n * @summary Convert a dash/dot/underscore/space separated Ascii string/String to camelCase\n */\nexport const stringCamelCase = /*#__PURE__*/ converter((w, i) => \n(i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));\n/**\n * @name stringPascalCase\n * @summary Convert a dash/dot/underscore/space separated Ascii string/String to PascalCase\n */\nexport const stringPascalCase = /*#__PURE__*/ converter((w) => \nCC_TO_UP[w.charCodeAt(0)] + w.slice(1));\n","import { CC_TO_LO, CC_TO_UP } from './camelCase.js';\n/** @internal */\nfunction converter(map) {\n    return (value) => value\n        ? map[value.charCodeAt(0)] + value.slice(1)\n        : '';\n}\n/**\n * @name stringLowerFirst\n * @summary Lowercase the first letter of a string\n * @description\n * Lowercase the first letter of a string\n * @example\n * <BR>\n *\n * ```javascript\n * import { stringLowerFirst } from '@polkadot/util';\n *\n * stringLowerFirst('ABC'); // => 'aBC'\n * ```\n */\nexport const stringLowerFirst = /*#__PURE__*/ converter(CC_TO_LO);\n/**\n * @name stringUpperFirst\n * @summary Uppercase the first letter of a string\n * @description\n * Lowercase the first letter of a string\n * @example\n * <BR>\n *\n * ```javascript\n * import { stringUpperFirst } from '@polkadot/util';\n *\n * stringUpperFirst('abc'); // => 'Abc'\n * ```\n */\nexport const stringUpperFirst = /*#__PURE__*/ converter(CC_TO_UP);\n","import { u8aToHex } from '../u8a/toHex.js';\nimport { stringToU8a } from './toU8a.js';\n/**\n * @name stringToHex\n * @summary Creates a hex string from a utf-8 string\n * @description\n * String input values return the actual encoded hex value.\n * @example\n * <BR>\n *\n * ```javascript\n * import { stringToHex } from '@polkadot/util';\n *\n * stringToU8a('hello'); // 0x68656c6c6f\n * ```\n */\nexport function stringToHex(value) {\n    return u8aToHex(stringToU8a(value));\n}\n"],"names":["o","name","path","URL","import","pathname","substring","lastIndexOf","type","version","s","a","t","u","globalThis","R","global","self","window","Function","N","n","v","constructor","L","this","__encoding","decode","e","r","length","String","fromCharCode","nt","encode","Uint8Array","charCodeAt","d","et","rt","it","ct","indexOf","padStart","ft","X","console","warn","Math","max","map","padEnd","join","ot","Pt","startsWith","Error","c","__polkadotjs","st","push","every","_","g","D","M","process","env","filter","O","at","Number","NaN","f","I","A","$","j","gt","ut","isLe","isNegative","slice","reverse","DataView","buffer","byteOffset","getBigInt64","getUint16","getBigUint64","E","p","P","toUpperCase","W","ceil","dt","i","isBN","F","wt","m","test","G","V","Wt","Ft","H","J","yt","ht","toString","toBigInt","toBn","Gt","asIntN","_t","Buffer","isBuffer","At","readDoubleLE","pt","Bt","Ut","h","Array","isArray","Vt","B","set","Ht","l","getUint32","S","Jt","subarray","Kt","fromTwos","bt","qt","x","w","y","Et","K","Qt","Zt","k","lt","zt","bitLength","unshift","from","xt","fill","It","Tt","Yt","U","b","vt","tn","C","nn","mul","en","MAX_SAFE_INTEGER","rn","Nt","q","mt","T","toTwos","toArray","St","pow","isub","Mt","Dt","Ot","Lt","Rt","lte","toNumber","shln","iadd","sn","on","cn","fn","entries","Object","assign","jt","z","getFloat32","getFloat64","isNeg","sqrt","Q","clone","div","ishrn","eq","sub","Y","Xt","kt","setFloat32","setFloat64","RegExp","match","decimal","toLocaleString","thousand","power","text","value","decimals","forceUnit","locale","withAll","withSi","withSiFull","withUnit","withZero","Z","tt","calcSi","findSi","getDefaults","unit","getOptions","setDefaults","isPrototypeOf","registry","JSON","stringify","te","defineProperty","configurable","enumerable","get","ee","re","debug","error","log","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","Date","endsWith","Ct","ne","parseInt","DEBUG_MAX","DEBUG","toLowerCase","split","isNaN","noop","$t","se","getInstanceId","memoized","unmemoize","oe","setTimeout","Promise","resolve","then","catch","ie","keys","ce","replace","trim","fe","ae","ue","le"],"sourceRoot":""}