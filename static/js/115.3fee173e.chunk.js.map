{"version":3,"file":"static/js/115.3fee173e.chunk.js","mappings":"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","sources":["../node_modules/micro-key-producer/node_modules/@noble/hashes/src/_assert.ts","../node_modules/micro-key-producer/node_modules/@noble/hashes/src/crypto.ts","../node_modules/micro-key-producer/node_modules/@noble/hashes/src/utils.ts","../node_modules/micro-key-producer/node_modules/@noble/hashes/src/_md.ts","../node_modules/micro-key-producer/node_modules/@noble/hashes/src/_u64.ts","../node_modules/micro-key-producer/node_modules/@noble/hashes/src/sha512.ts","../node_modules/micro-key-producer/node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/micro-key-producer/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/micro-key-producer/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/micro-key-producer/node_modules/@noble/curves/src/abstract/edwards.ts","../node_modules/micro-key-producer/node_modules/@noble/curves/src/ed25519.ts","../node_modules/micro-key-producer/node_modules/@noble/hashes/src/hmac.ts","../node_modules/micro-key-producer/node_modules/@noble/hashes/src/ripemd160.ts","../node_modules/micro-key-producer/node_modules/@noble/hashes/src/sha256.ts","../node_modules/micro-key-producer/src/slip10.ts"],"sourcesContent":["function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Choice: a ? b : c\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean) {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { AffinePoint, BasicCurve, Group, GroupConstructor, validateBasic, wNAF } from './curve.js';\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex } from './utils.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  const inBig = (n: bigint) => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n: bigint, max: bigint) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = (n: bigint) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n: bigint, max: bigint) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n  }\n  function assertGE0(n: bigint) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function isPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      const { a, d } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const { ex: X, ey: Y, ez: Z, et: T } = this;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      isPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    protected is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      isPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      const { ex: x, ey: y, ez: z } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return { x: _0n, y: _1n };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215)\n          assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { AffinePoint, Group } from './abstract/curve.js';\nimport { ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport { createHasher, expand_message_xmd, htfBasicOpts } from './abstract/hash-to-curve.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  // prettier-ignore\n  const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = /* @__PURE__ */ (() => Field(ED25519_P, undefined, true))();\n\nconst ed25519Defaults = /* @__PURE__ */ (() =>\n  ({\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: _8n,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n  }) as const)();\n\nexport const ed25519 = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx = /* @__PURE__ */ (() =>\n  twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n  }))();\nexport const ed25519ph = /* @__PURE__ */ (() =>\n  twistedEdwards(\n    Object.assign({}, ed25519Defaults, {\n      domain: ed25519_domain,\n      prehash: sha512,\n    })\n  ))();\n\nexport const x25519 = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n  const ELL2_J = BigInt(486662);\n\n  let tv1 = Fp.sqr(u);          //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);     //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);         //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J);//  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);        //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);            //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);            //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1);    //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);            //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2);    //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);             //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1);    //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = /* @__PURE__ */ BigInt(\n  '0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n);\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint implements Group<RistPoint> {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n\n  double(): RistPoint {\n    return new RistPoint(this.ep.double());\n  }\n\n  negate(): RistPoint {\n    return new RistPoint(this.ep.negate());\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","import { HashMD } from './_md.js';\nimport { rotl, wrapConstructor } from './utils.js';\n\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map((_, i) => i));\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++) for (let j of [idxL, idxR]) j.push(j[i].map((k) => Rho[k]));\n\nconst shifts = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  else if (group === 1) return (x & y) | (~x & z);\n  else if (group === 2) return (x | ~y) ^ z;\n  else if (group === 3) return (x & z) | (y & ~z);\n  else return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst R_BUF = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number) {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) R_BUF[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean() {\n    R_BUF.fill(0);\n  }\n  destroy() {\n    this.destroyed = true;\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\n","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","/*! micro-key-producer - MIT License (c) 2024 Paul Miller (paulmillr.com) */\nimport { ed25519 } from '@noble/curves/ed25519';\nimport { bytes as assertBytes } from '@noble/hashes/_assert';\nimport { hmac } from '@noble/hashes/hmac';\nimport { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { bytesToHex, concatBytes, createView, hexToBytes, utf8ToBytes } from '@noble/hashes/utils';\n\nexport const MASTER_SECRET = utf8ToBytes('ed25519 seed');\nexport const HARDENED_OFFSET: number = 0x80000000;\nconst ZERO = new Uint8Array([0]);\n\ntype Hex = Uint8Array | string;\nfunction ensureBytes(b: Hex, ...lengths: number[]): Uint8Array {\n  if (typeof b === 'string') b = hexToBytes(b);\n  assertBytes(b, ...lengths);\n  return b;\n}\n\nconst hash160 = (data: Uint8Array) => ripemd160(sha256(data));\nconst fromU32 = (data: Uint8Array) => createView(data).getUint32(0, false);\nconst toU32 = (n: number) => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n  }\n  const buf = new Uint8Array(4);\n  createView(buf).setUint32(0, n, false);\n  return buf;\n};\n\ninterface HDKeyOpt {\n  depth?: number;\n  index?: number;\n  parentFingerprint?: number;\n  chainCode: Uint8Array;\n  privateKey: Uint8Array;\n}\n\nexport class HDKey {\n  get publicKeyRaw(): Uint8Array {\n    return ed25519.getPublicKey(this.privateKey);\n  }\n  get publicKey(): Uint8Array {\n    return concatBytes(ZERO, this.publicKeyRaw);\n  }\n  get pubHash(): Uint8Array {\n    return hash160(this.publicKey);\n  }\n  get fingerprint(): number {\n    return fromU32(this.pubHash);\n  }\n  get fingerprintHex(): string {\n    return bytesToHex(toU32(this.fingerprint));\n  }\n  get parentFingerprintHex(): string {\n    return bytesToHex(toU32(this.parentFingerprint));\n  }\n\n  static fromMasterSeed(seed: Hex): HDKey {\n    seed = ensureBytes(seed);\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(\n        `HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`\n      );\n    }\n    const I = hmac(sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      privateKey: I.slice(0, 32),\n      chainCode: I.slice(32),\n    });\n  }\n\n  readonly depth: number = 0;\n  readonly index: number = 0;\n  readonly chainCode: Uint8Array;\n  readonly parentFingerprint: number = 0;\n  readonly privateKey: Uint8Array;\n\n  constructor(opt: HDKeyOpt) {\n    if (!opt || typeof opt !== 'object')\n      throw new Error('HDKey.constructor must not be called directly');\n    assertBytes(opt.privateKey, 32);\n    assertBytes(opt.chainCode, 32);\n    this.depth = opt.depth || 0;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index)\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n    }\n    this.chainCode = opt.chainCode;\n    this.privateKey = opt.privateKey;\n  }\n\n  derive(path: string, forceHardened = false): HDKey {\n    if (!/^[mM]'?/.test(path)) throw new Error('Path must start with \"m\" or \"M\"');\n    if (/^[mM]'?$/.test(path)) return this;\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n    // tslint:disable-next-line\n    let child: HDKey = this;\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n      if (!m || m.length !== 3) throw new Error(`Invalid child index: ${c}`);\n      let idx = +m[1];\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) throw new Error('Invalid index');\n      // hardened key\n      if (forceHardened || m[2] === \"'\") idx += HARDENED_OFFSET;\n      child = child.deriveChild(idx);\n    }\n    return child;\n  }\n\n  deriveChild(index: number): HDKey {\n    if (index < HARDENED_OFFSET)\n      throw new Error(`Non-hardened child derivation not possible for Ed25519 (index=${index})`);\n    // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n    const data = concatBytes(ZERO, this.privateKey, toU32(index));\n    const I = hmac(sha512, this.chainCode, data);\n    return new HDKey({\n      chainCode: I.slice(32),\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index,\n      privateKey: I.slice(0, 32),\n    });\n  }\n\n  sign(message: Hex): Uint8Array {\n    return ed25519.sign(message, this.privateKey);\n  }\n\n  verify(message: Hex, signature: Hex): boolean {\n    signature = ensureBytes(signature, 64);\n    return ed25519.verify(signature, message, this.publicKeyRaw);\n  }\n}\nexport default HDKey;\n"],"names":["number","n","Number","isSafeInteger","Error","bytes","b","lengths","a","Uint8Array","constructor","name","length","includes","hash","h","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","crypto","globalThis","undefined","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","rotl","Uint32Array","hexes","Array","from","_","i","toString","padStart","bytesToHex","abytes","hex","asciis","asciiToBase16","char","utf8ToBytes","str","TextEncoder","encode","toBytes","data","concatBytes","arrays","sum","res","pad","set","Hash","clone","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","randomBytes","bytesLength","getRandomValues","Maj","c","HashMD","padOffset","isLE","super","pos","view","len","take","Math","subarray","process","dataView","roundClean","digestInto","fill","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","l","setUint32","oview","outLen","state","get","slice","destroy","to","U32_MASK64","fromBig","le","split","lst","Ah","Al","toBig","shrSH","_l","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","offset","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","_1n","_2n","isBytes","item","hexToNumber","hexToBytes","hl","al","array","ai","hi","n1","charCodeAt","n2","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","e","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries","_0n","_3n","_4n","_5n","_8n","mod","result","pow","num","power","modulo","pow2","x","invert","y","u","v","q","r","m","FpSqrt","P","p1div4","root","eql","sqr","c1","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","bitLen","redef","BITS","BYTES","sqrtP","f","freeze","MASK","is0","isOdd","lhs","rhs","p","d","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","nums","lastMultiplied","reduce","acc","inverted","reduceRight","FpInvertBatch","cmov","fromBytes","bytesToNumberBE","validateBasic","curve","Gx","Gy","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","opts","ut","adjustScalarBytes","domain","uvRatio","mapToCurve","validateOpts","CURVE_ORDER","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","toAffine","fromAffine","normalizeZ","points","toInv","_setWindowSize","windowSize","_WINDOW_SIZE","delete","assertValidity","X","Y","T","X2","Y2","Z2","Z4","aX2","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","wNAF","wnaf","wNAFCached","multiply","scalar","multiplyUnsafe","I","unsafeLadder","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","fromHex","normed","lastByte","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","toHex","BASE","bits","constTimeNegate","condition","W","windows","elm","precomputeWindow","base","window","push","precomputes","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","comp","modN","modN_LE","key","hashed","head","prefix","pointBytes","hashDomainToScalar","context","msgs","verifyOpts","getPublicKey","sign","options","R","verify","sig","publicKey","SB","error","k","ExtendedPoint","utils","randomPrivateKey","precompute","ED25519_P","ED25519_SQRT_M1","ed25519_pow_2_252_3","_10n","_20n","_40n","_80n","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","HMAC","_key","assertHash","iHash","oHash","buf","assertExists","assertBytes","getPrototypeOf","hmac","message","Rho","Id","idxL","idxR","j","shifts","shiftsL","idx","shiftsR","Kl","Kr","group","R_BUF","RIPEMD160","h0","h1","h2","h3","h4","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rl","rr","sl","sr","tl","tr","ripemd160","SHA256_K","SHA256_IV","SHA256_W","SHA256","W15","W2","s0","s1","Chi","sha256","MASTER_SECRET","HARDENED_OFFSET","toU32","HDKey","publicKeyRaw","privateKey","pubHash","fingerprint","fingerprintHex","parentFingerprintHex","parentFingerprint","fromMasterSeed","seed","chainCode","opt","depth","index","derive","path","forceHardened","test","parts","replace","child","exec","deriveChild","signature"],"sourceRoot":""}