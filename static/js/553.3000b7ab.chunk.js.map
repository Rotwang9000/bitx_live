{"version":3,"file":"static/js/553.3000b7ab.chunk.js","mappings":"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","sources":["../node_modules/ethers/src.ts/hash/typed-data.ts","../node_modules/ethers/src.ts/utils/geturl-browser.ts","../node_modules/ethers/src.ts/utils/fetch.ts","../node_modules/ethers/src.ts/utils/base64-browser.ts","../node_modules/ethers/src.ts/constants/addresses.ts","../node_modules/ethers/src.ts/hash/namehash.ts","../node_modules/ethers/node_modules/@noble/hashes/src/_sha2.ts","../node_modules/ethers/node_modules/@noble/hashes/src/sha256.ts","../node_modules/ethers/node_modules/@noble/hashes/src/sha512.ts","../node_modules/ethers/src.ts/crypto/crypto-browser.ts","../node_modules/ethers/src.ts/crypto/sha2.ts","../node_modules/ethers/src.ts/constants/hashes.ts","../node_modules/ethers/src.ts/crypto/signature.ts","../node_modules/ethers/node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/ethers/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/ethers/node_modules/@noble/hashes/src/hmac.ts","../node_modules/ethers/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/ethers/node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/ethers/node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/ethers/node_modules/@noble/curves/src/secp256k1.ts","../node_modules/ethers/src.ts/crypto/signing-key.ts","../node_modules/ethers/src.ts/utils/rlp-decode.ts","../node_modules/ethers/src.ts/utils/rlp-encode.ts","../node_modules/ethers/src.ts/transaction/address.ts","../node_modules/ethers/src.ts/transaction/transaction.ts","../node_modules/ethers/src.ts/utils/base58.ts","../node_modules/ethers/src.ts/providers/ens-resolver.ts","../node_modules/ethers/src.ts/providers/format.ts","../node_modules/ethers/src.ts/address/contract-address.ts","../node_modules/ethers/src.ts/providers/plugins-network.ts","../node_modules/ethers/src.ts/providers/network.ts","../node_modules/ethers/src.ts/providers/subscriber-polling.ts","../node_modules/ethers/src.ts/providers/abstract-provider.ts","../node_modules/ethers/src.ts/providers/abstract-signer.ts","../node_modules/ethers/src.ts/providers/subscriber-filterid.ts","../node_modules/ethers/src.ts/providers/provider-jsonrpc.ts","../node_modules/ethers/src.ts/providers/provider-browser.ts"],"sourcesContent":["//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport {\n    concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toQuantity, toTwos, zeroPadValue,\n    assertArgument\n} from \"../utils/index.js\";\n\nimport { id } from \"./id.js\";\n\nimport type { SignatureLike } from \"../crypto/index.js\";\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\n\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\n\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\n// @TODO: in v7, verifyingContract should be an AddressLike and use resolveAddress\n\n/**\n *  The domain for an [[link-eip-712]] payload.\n */\nexport interface TypedDataDomain {\n    /**\n     *  The human-readable name of the signing domain.\n     */\n    name?: null | string;\n\n    /**\n     *  The major version of the signing domain.\n     */\n    version?: null | string;\n\n    /**\n     *  The chain ID of the signing domain.\n     */\n    chainId?: null | BigNumberish;\n\n    /**\n     *  The the address of the contract that will verify the signature.\n     */\n    verifyingContract?: null | string;\n\n    /**\n     *  A salt used for purposes decided by the specific domain.\n     */\n    salt?: null | BytesLike;\n};\n\n/**\n *  A specific field of a structured [[link-eip-712]] type.\n */\nexport interface TypedDataField {\n    /**\n     *  The field name.\n     */\n    name: string;\n\n    /**\n     *  The type of the field.\n     */\n    type: string;\n};\n\nfunction hexPadRight(value: BytesLike): string {\n    const bytes = getBytes(value);\n    const padOffset = bytes.length % 32\n    if (padOffset) {\n        return concat([ bytes, padding.slice(padOffset) ]);\n    }\n    return hexlify(bytes);\n}\n\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\n\nconst domainFieldTypes: Record<string, string> = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\n\nconst domainFieldNames: Array<string> = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\n\nfunction checkString(key: string): (value: any) => string {\n    return function (value: any){\n        assertArgument(typeof(value) === \"string\", `invalid domain value for ${ JSON.stringify(key) }`, `domain.${ key }`, value);\n        return value;\n    }\n}\n\nconst domainChecks: Record<string, (value: any) => any> = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(_value: any) {\n        const value = getBigInt(_value, \"domain.chainId\");\n        assertArgument(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n        if (Number.isSafeInteger(value)) { return Number(value); }\n        return toQuantity(value);\n    },\n    verifyingContract: function(value: any) {\n        try {\n            return getAddress(value).toLowerCase();\n        } catch (error) { }\n        assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function(value: any) {\n        const bytes = getBytes(value, \"domain.salt\");\n        assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n        return hexlify(bytes);\n    }\n}\n\nfunction getBaseEncoder(type: string): null | ((value: any) => string) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d+)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n\n            const width = parseInt(match[2]);\n            assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), \"invalid numeric width\", \"type\", type);\n\n            const boundsUpper = mask(BN_MAX_UINT256, signed ? (width - 1): width);\n            const boundsLower = signed ? ((boundsUpper + BN_1) * BN__1): BN_0;\n\n            return function(_value: BigNumberish) {\n                const value = getBigInt(_value, \"value\");\n\n                assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${ type }`, \"value\", value);\n\n                return toBeHex(signed ? toTwos(value, 256): value, 32);\n            };\n        }\n    }\n\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n\n            return function(value: BytesLike) {\n                const bytes = getBytes(value);\n                assertArgument(bytes.length === width, `invalid length for ${ type }`, \"value\", value);\n                return hexPadRight(value);\n            };\n        }\n    }\n\n    switch (type) {\n        case \"address\": return function(value: string) {\n            return zeroPadValue(getAddress(value), 32);\n        };\n        case \"bool\": return function(value: boolean) {\n            return ((!value) ? hexFalse: hexTrue);\n        };\n        case \"bytes\": return function(value: BytesLike) {\n            return keccak256(value);\n        };\n        case \"string\": return function(value: string) {\n            return id(value);\n        };\n    }\n\n    return null;\n}\n\nfunction encodeType(name: string, fields: Array<TypedDataField>): string {\n    return `${ name }(${ fields.map(({ name, type }) => (type + \" \" + name)).join(\",\") })`;\n}\n\ntype ArrayResult = {\n    base: string;         // The base type\n    index?: string;       // the full Index (if any)\n    array?: {             // The Array... (if index)\n        base: string;     // ...base type (same as above)\n        prefix: string;   // ...sans the final Index\n        count: number;    // ...the final Index (-1 for dynamic)\n    }\n};\n\n// foo[][3] => { base: \"foo\", index: \"[][3]\", array: {\n//     base: \"foo\", prefix: \"foo[]\", count: 3 } }\nfunction splitArray(type: string): ArrayResult {\n    const match = type.match(/^([^\\x5b]*)((\\x5b\\d*\\x5d)*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n        return {\n            base: match[1],\n            index: (match[2] + match[4]),\n            array: {\n                base: match[1],\n                prefix: (match[1] + match[2]),\n                count: (match[5] ? parseInt(match[5]): -1),\n            }\n        };\n    }\n\n    return { base: type };\n}\n\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */\nexport class TypedDataEncoder {\n    /**\n     *  The primary type for the structured [[types]].\n     *\n     *  This is derived automatically from the [[types]], since no\n     *  recursion is possible, once the DAG for the types is consturcted\n     *  internally, the primary type must be the only remaining type with\n     *  no parent nodes.\n     */\n    readonly primaryType!: string;\n\n    readonly #types: string;\n\n    /**\n     *  The types.\n     */\n    get types(): Record<string, Array<TypedDataField>> {\n        return JSON.parse(this.#types);\n    }\n\n    readonly #fullTypes: Map<string, string>\n\n    readonly #encoderCache: Map<string, (value: any) => string>;\n\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     *\n     *  This performs all necessary checking that types are valid and\n     *  do not violate the [[link-eip-712]] structural constraints as\n     *  well as computes the [[primaryType]].\n     */\n    constructor(_types: Record<string, Array<TypedDataField>>) {\n        this.#fullTypes = new Map();\n        this.#encoderCache = new Map();\n\n        // Link struct types to their direct child structs\n        const links: Map<string, Set<string>> = new Map();\n\n        // Link structs to structs which contain them as a child\n        const parents: Map<string, Array<string>> = new Map();\n\n        // Link all subtypes within a given struct\n        const subtypes: Map<string, Set<string>> = new Map();\n\n        const types: Record<string, Array<TypedDataField>> = { };\n        Object.keys(_types).forEach((type) => {\n            types[type] = _types[type].map(({ name, type }) => {\n\n                // Normalize the base type (unless name conflict)\n                let { base, index } = splitArray(type);\n                if (base === \"int\" && !_types[\"int\"]) { base = \"int256\"; }\n                if (base === \"uint\" && !_types[\"uint\"]) { base = \"uint256\"; }\n\n                return { name, type: (base + (index || \"\")) };\n            });\n\n            links.set(type, new Set());\n            parents.set(type, [ ]);\n            subtypes.set(type, new Set());\n        });\n        this.#types = JSON.stringify(types);\n\n        for (const name in types) {\n            const uniqueNames: Set<string> = new Set();\n\n            for (const field of types[name]) {\n\n                // Check each field has a unique name\n                assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${ JSON.stringify(field.name) } in ${ JSON.stringify(name) }`, \"types\", _types);\n                uniqueNames.add(field.name);\n\n                // Get the base type (drop any array specifiers)\n                const baseType = splitArray(field.type).base;\n                assertArgument(baseType !== name, `circular type reference to ${ JSON.stringify(baseType) }`, \"types\", _types);\n\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) { continue; }\n\n                assertArgument(parents.has(baseType), `unknown type ${ JSON.stringify(baseType) }`, \"types\", _types);\n\n                // Add linkage\n                (parents.get(baseType) as Array<string>).push(name);\n                (links.get(name) as Set<string>).add(baseType);\n            }\n        }\n\n        // Deduce the primary type\n        const primaryTypes = Array.from(parents.keys()).filter((n) => ((parents.get(n) as Array<string>).length === 0));\n        assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", _types);\n        assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${ primaryTypes.map((t) => (JSON.stringify(t))).join(\", \") }`, \"types\", _types);\n\n        defineProperties<TypedDataEncoder>(this, { primaryType: primaryTypes[0] });\n\n        // Check for circular type references\n        function checkCircular(type: string, found: Set<string>) {\n            assertArgument(!found.has(type), `circular type reference to ${ JSON.stringify(type) }`, \"types\", _types);\n\n            found.add(type);\n\n            for (const child of (links.get(type) as Set<string>)) {\n                if (!parents.has(child)) { continue; }\n\n                // Recursively check children\n                checkCircular(child, found);\n\n                // Mark all ancestors as having this decendant\n                for (const subtype of found) {\n                    (subtypes.get(subtype) as Set<string>).add(child);\n                }\n            }\n\n            found.delete(type);\n        }\n        checkCircular(this.primaryType, new Set());\n\n        // Compute each fully describe type\n        for (const [ name, set ] of subtypes) {\n            const st = Array.from(set);\n            st.sort();\n            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\"));\n        }\n    }\n\n    /**\n     *  Returnthe encoder for the specific %%type%%.\n     */\n    getEncoder(type: string): (value: any) => string {\n        let encoder = this.#encoderCache.get(type);\n        if (!encoder) {\n            encoder = this.#getEncoder(type);\n            this.#encoderCache.set(type, encoder);\n        }\n        return encoder;\n    }\n\n    #getEncoder(type: string): (value: any) => string {\n\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return encoder; }\n        }\n\n        // Array\n        const array = splitArray(type).array;\n        if (array) {\n            const subtype = array.prefix;\n            const subEncoder = this.getEncoder(subtype);\n            return (value: Array<any>) => {\n                assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${ array.count }`, \"value\", value);\n\n                let result = value.map(subEncoder);\n                if (this.#fullTypes.has(subtype)) {\n                    result = result.map(keccak256);\n                }\n\n                return keccak256(concat(result));\n            };\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this.#fullTypes.get(type) as string);\n            return (value: Record<string, any>) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this.#fullTypes.has(type)) { return keccak256(result); }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return concat(values);\n            }\n        }\n\n        assertArgument(false, `unknown type: ${ type }`, \"type\", type);\n    }\n\n    /**\n     *  Return the full type for %%name%%.\n     */\n    encodeType(name: string): string {\n        const result = this.#fullTypes.get(name);\n        assertArgument(result, `unknown type: ${ JSON.stringify(name) }`, \"name\", name);\n        return result;\n    }\n\n    /**\n     *  Return the encoded %%value%% for the %%type%%.\n     */\n    encodeData(type: string, value: any): string {\n        return this.getEncoder(type)(value);\n    }\n\n    /**\n     *  Returns the hash of %%value%% for the type of %%name%%.\n     */\n    hashStruct(name: string, value: Record<string, any>): string {\n        return keccak256(this.encodeData(name, value));\n    }\n\n    /**\n     *  Return the fulled encoded %%value%% for the [[types]].\n     */\n    encode(value: Record<string, any>): string {\n        return this.encodeData(this.primaryType, value);\n    }\n\n    /**\n     *  Return the hash of the fully encoded %%value%% for the [[types]].\n     */\n    hash(value: Record<string, any>): string {\n        return this.hashStruct(this.primaryType, value);\n    }\n\n    /**\n     *  @_ignore:\n     */\n    _visit(type: string, value: any, callback: (type: string, data: any) => any): any {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return callback(type, value); }\n        }\n\n        // Array\n        const array = splitArray(type).array;\n        if (array) {\n            assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${ array.count }`, \"value\", value);\n            return value.map((v: any) => this._visit(array.prefix, v, callback));\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, <Record<string, any>>{});\n        }\n\n        assertArgument(false, `unknown type: ${ type }`, \"type\", type);\n    }\n\n    /**\n     *  Call %%calback%% for each value in %%value%%, passing the type and\n     *  component within %%value%%.\n     *\n     *  This is useful for replacing addresses or other transformation that\n     *  may be desired on each component, based on its type.\n     */\n    visit(value: Record<string, any>, callback: (type: string, data: any) => any): any {\n        return this._visit(this.primaryType, value, callback);\n    }\n\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     */\n    static from(types: Record<string, Array<TypedDataField>>): TypedDataEncoder {\n        return new TypedDataEncoder(types);\n    }\n\n    /**\n     *  Return the primary type for %%types%%.\n     */\n    static getPrimaryType(types: Record<string, Array<TypedDataField>>): string {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n\n    /**\n     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n     */\n    static hashStruct(name: string, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n\n    /**\n     *  Return the domain hash for %%domain%%.\n     */\n    static hashDomain(domain: TypedDataDomain): string {\n        const domainFields: Array<TypedDataField> = [ ];\n        for (const name in domain) {\n            if ((<Record<string, any>>domain)[name] == null) { continue; }\n            const type = domainFieldTypes[name];\n            assertArgument(type, `invalid typed-data domain key: ${ JSON.stringify(name) }`, \"domain\", domain);\n            domainFields.push({ name, type });\n        }\n\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n\n    /**\n     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static encode(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return concat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n\n    /**\n     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static hash(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n\n    // Replaces all address types with ENS names with their looked up address\n    /**\n     * Resolves to the value from resolving all addresses in %%value%% for\n     * %%types%% and the %%domain%%.\n     */\n    static async resolveNames(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, resolveName: (name: string) => Promise<string>): Promise<{ domain: TypedDataDomain, value: any }> {\n        // Make a copy to isolate it from the object passed in\n        domain = Object.assign({ }, domain);\n\n        // Allow passing null to ignore value\n        for (const key in domain) {\n            if ((<Record<string, any>>domain)[key] == null) {\n                delete (<Record<string, any>>domain)[key];\n            }\n        }\n\n        // Look up all ENS names\n        const ensCache: Record<string, string> = { };\n\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get a list of all the addresses\n        encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && ensCache[value]) { return ensCache[value]; }\n            return value;\n        });\n\n        return { domain, value };\n    }\n\n    /**\n     *  Returns the JSON-encoded payload expected by nodes which implement\n     *  the JSON-RPC [[link-eip-712]] method.\n     */\n    static getPayload(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): any {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n\n        // Derive the EIP712Domain Struct reference type\n        const domainValues: Record<string, any> = { };\n        const domainTypes: Array<{ name: string, type:string }> = [ ];\n\n        domainFieldNames.forEach((name) => {\n            const value = (<any>domain)[name];\n            if (value == null) { return; }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get the normalized types\n        types = encoder.types;\n\n        const typesWithDomain = Object.assign({ }, types);\n        assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n\n        typesWithDomain.EIP712Domain = domainTypes;\n\n        // Validate the data structures and types\n        encoder.encode(value);\n\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type: string, value: any) => {\n\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(getBytes(value));\n                }\n\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return getBigInt(value).toString();\n                }\n\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        assertArgument(typeof(value) === \"string\", \"invalid string\", \"value\", value);\n                        return value;\n                }\n\n                assertArgument(false, \"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nexport function verifyTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, signature: SignatureLike): string {\n    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}\n","import { assert, makeError } from \"./errors.js\";\n\nimport type {\n    FetchGetUrlFunc, FetchRequest, FetchCancelSignal, GetUrlResponse\n} from \"./fetch.js\";\n\nexport function createGetUrl(options?: Record<string, any>): FetchGetUrlFunc {\n\n    async function getUrl(req: FetchRequest, _signal?: FetchCancelSignal): Promise<GetUrlResponse> {\n        assert(_signal == null || !_signal.cancelled, \"request cancelled before sending\", \"CANCELLED\");\n\n        const protocol = req.url.split(\":\")[0].toLowerCase();\n\n        assert(protocol === \"http\" || protocol === \"https\", `unsupported protocol ${ protocol }`, \"UNSUPPORTED_OPERATION\", {\n            info: { protocol },\n            operation: \"request\"\n        });\n\n        assert(protocol === \"https\" || !req.credentials || req.allowInsecureAuthentication, \"insecure authorized connections unsupported\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"request\"\n        });\n\n        let error: null | Error = null;\n\n        const controller = new AbortController();\n\n        const timer = setTimeout(() => {\n            error = makeError(\"request timeout\", \"TIMEOUT\");\n            controller.abort();\n        }, req.timeout);\n\n        if (_signal) {\n            _signal.addListener(() => {\n                error = makeError(\"request cancelled\", \"CANCELLED\");\n                controller.abort();\n            });\n        }\n\n        const init = {\n            method: req.method,\n            headers: new Headers(Array.from(req)),\n            body: req.body || undefined,\n            signal: controller.signal\n        };\n\n        let resp: Awaited<ReturnType<typeof fetch>>;\n        try {\n            resp = await fetch(req.url, init);\n        } catch (_error) {\n            clearTimeout(timer);\n            if (error) { throw error; }\n            throw _error;\n        }\n\n        clearTimeout(timer);\n\n        const headers: Record<string, string> = { };\n        resp.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n\n        const respBody = await resp.arrayBuffer();\n        const body = (respBody == null) ? null: new Uint8Array(respBody);\n\n        return {\n            statusCode: resp.status,\n            statusMessage: resp.statusText,\n            headers, body\n        };\n    }\n\n    return getUrl;\n}\n\n// @TODO: remove in v7; provided for backwards compat\nconst defaultGetUrl: FetchGetUrlFunc = createGetUrl({ });\n\nexport async function getUrl(req: FetchRequest, _signal?: FetchCancelSignal): Promise<GetUrlResponse> {\n    return defaultGetUrl(req, _signal);\n}\n\n","/**\n *  Fetching content from the web is environment-specific, so Ethers\n *  provides an abstraction that each environment can implement to provide\n *  this service.\n *\n *  On [Node.js](link-node), the ``http`` and ``https`` libs are used to\n *  create a request object, register event listeners and process data\n *  and populate the [[FetchResponse]].\n *\n *  In a browser, the [DOM fetch](link-js-fetch) is used, and the resulting\n *  ``Promise`` is waited on to retrieve the payload.\n *\n *  The [[FetchRequest]] is responsible for handling many common situations,\n *  such as redirects, server throttling, authentication, etc.\n *\n *  It also handles common gateways, such as IPFS and data URIs.\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */\nimport { decodeBase64, encodeBase64 } from \"./base64.js\";\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { defineProperties } from \"./properties.js\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8.js\";\n\nimport { createGetUrl } from \"./geturl.js\";\n\n/**\n *  An environment's implementation of ``getUrl`` must return this type.\n */\nexport type GetUrlResponse = {\n    statusCode: number,\n    statusMessage: string,\n    headers: Record<string, string>,\n    body: null | Uint8Array\n};\n\n/**\n *  This can be used to control how throttling is handled in\n *  [[FetchRequest-setThrottleParams]].\n */\nexport type FetchThrottleParams = {\n    maxAttempts?: number;\n    slotInterval?: number;\n};\n\n/**\n *  Called before any network request, allowing updated headers (e.g. Bearer tokens), etc.\n */\nexport type FetchPreflightFunc = (req: FetchRequest) => Promise<FetchRequest>;\n\n/**\n *  Called on the response, allowing client-based throttling logic or post-processing.\n */\nexport type FetchProcessFunc = (req: FetchRequest, resp: FetchResponse) => Promise<FetchResponse>;\n\n/**\n *  Called prior to each retry; return true to retry, false to abort.\n */\nexport type FetchRetryFunc = (req: FetchRequest, resp: FetchResponse, attempt: number) => Promise<boolean>;\n\n/**\n *  Called on Gateway URLs.\n */\nexport type FetchGatewayFunc = (url: string, signal?: FetchCancelSignal) => Promise<FetchRequest | FetchResponse>;\n\n/**\n *  Used to perform a fetch; use this to override the underlying network\n *  fetch layer. In NodeJS, the default uses the \"http\" and \"https\" libraries\n *  and in the browser ``fetch`` is used. If you wish to use Axios, this is\n *  how you would register it.\n */\nexport type FetchGetUrlFunc = (req: FetchRequest, signal?: FetchCancelSignal) => Promise<GetUrlResponse>;\n\n\nconst MAX_ATTEMPTS = 12;\nconst SLOT_INTERVAL = 250;\n\n// The global FetchGetUrlFunc implementation.\nlet defaultGetUrlFunc: FetchGetUrlFunc = createGetUrl();\n\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nconst reIpfs = new RegExp(\"^ipfs:/\\/(ipfs/)?(.*)$\", \"i\");\n\n// If locked, new Gateways cannot be added\nlet locked = false;\n\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nasync function dataGatewayFunc(url: string, signal?: FetchCancelSignal): Promise<FetchResponse> {\n    try {\n        const match = url.match(reData);\n        if (!match) { throw new Error(\"invalid data\"); }\n        return new FetchResponse(200, \"OK\", {\n            \"content-type\": (match[1] || \"text/plain\"),\n        }, (match[2] ? decodeBase64(match[3]): unpercent(match[3])));\n    } catch (error) {\n        return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", { }, null, new FetchRequest(url));\n    }\n}\n\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */\nfunction getIpfsGatewayFunc(baseUrl: string): FetchGatewayFunc {\n    async function gatewayIpfs(url: string, signal?: FetchCancelSignal): Promise<FetchRequest | FetchResponse> {\n        try {\n            const match = url.match(reIpfs);\n            if (!match) { throw new Error(\"invalid link\"); }\n            return new FetchRequest(`${ baseUrl }${ match[2] }`);\n        } catch (error) {\n            return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", { }, null, new FetchRequest(url));\n        }\n    }\n\n    return gatewayIpfs;\n}\n\nconst Gateways: Record<string, FetchGatewayFunc> = {\n    \"data\": dataGatewayFunc,\n    \"ipfs\": getIpfsGatewayFunc(\"https:/\\/gateway.ipfs.io/ipfs/\")\n};\n\nconst fetchSignals: WeakMap<FetchRequest, () => void> = new WeakMap();\n\n/**\n *  @_ignore\n */\nexport class FetchCancelSignal {\n    #listeners: Array<() => void>;\n    #cancelled: boolean;\n\n    constructor(request: FetchRequest) {\n        this.#listeners = [ ];\n        this.#cancelled = false;\n\n        fetchSignals.set(request, () => {\n            if (this.#cancelled) { return; }\n            this.#cancelled = true;\n\n            for (const listener of this.#listeners) {\n                setTimeout(() => { listener(); }, 0);\n            }\n            this.#listeners = [ ];\n        });\n    }\n\n    addListener(listener: () => void): void {\n        assert(!this.#cancelled, \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchCancelSignal.addCancelListener\"\n        });\n        this.#listeners.push(listener);\n    }\n\n    get cancelled(): boolean { return this.#cancelled; }\n\n    checkSignal(): void {\n        assert(!this.cancelled, \"cancelled\", \"CANCELLED\", { });\n    }\n}\n\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal?: FetchCancelSignal): FetchCancelSignal {\n    if (signal == null) { throw new Error(\"missing signal; should not happen\"); }\n    signal.checkSignal();\n    return signal;\n}\n\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */\nexport class FetchRequest implements Iterable<[ key: string, value: string ]> {\n    #allowInsecure: boolean;\n    #gzip: boolean;\n    #headers: Record<string, string>;\n    #method: string;\n    #timeout: number;\n    #url: string;\n\n    #body?: Uint8Array;\n    #bodyType?: string;\n    #creds?: string;\n\n    // Hooks\n    #preflight?: null | FetchPreflightFunc;\n    #process?: null | FetchProcessFunc;\n    #retry?: null | FetchRetryFunc;\n\n    #signal?: FetchCancelSignal;\n\n    #throttle: Required<FetchThrottleParams>;\n\n    #getUrlFunc: null | FetchGetUrlFunc;\n\n    /**\n     *  The fetch URL to request.\n     */\n    get url(): string { return this.#url; }\n    set url(url: string) {\n        this.#url = String(url);\n    }\n\n    /**\n     *  The fetch body, if any, to send as the request body. //(default: null)//\n     *\n     *  When setting a body, the intrinsic ``Content-Type`` is automatically\n     *  set and will be used if **not overridden** by setting a custom\n     *  header.\n     *\n     *  If %%body%% is null, the body is cleared (along with the\n     *  intrinsic ``Content-Type``).\n     *\n     *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to\n     *  ``text/plain``.\n     *\n     *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to\n     *  ``application/octet-stream``.\n     *\n     *  If %%body%% is any other object, the intrinsic ``Content-Type`` is\n     *  set to ``application/json``.\n     */\n    get body(): null | Uint8Array {\n        if (this.#body == null) { return null; }\n        return new Uint8Array(this.#body);\n    }\n    set body(body: null | string | Readonly<object> | Readonly<Uint8Array>) {\n        if (body == null) {\n            this.#body = undefined;\n            this.#bodyType = undefined;\n        } else if (typeof(body) === \"string\") {\n            this.#body = toUtf8Bytes(body);\n            this.#bodyType = \"text/plain\";\n        } else if (body instanceof Uint8Array) {\n            this.#body = body;\n            this.#bodyType = \"application/octet-stream\";\n        } else if (typeof(body) === \"object\") {\n            this.#body = toUtf8Bytes(JSON.stringify(body));\n            this.#bodyType = \"application/json\";\n        } else {\n            throw new Error(\"invalid body\");\n        }\n    }\n\n    /**\n     *  Returns true if the request has a body.\n     */\n    hasBody(): this is (FetchRequest & { body: Uint8Array }) {\n        return (this.#body != null);\n    }\n\n    /**\n     *  The HTTP method to use when requesting the URI. If no method\n     *  has been explicitly set, then ``GET`` is used if the body is\n     *  null and ``POST`` otherwise.\n     */\n    get method(): string {\n        if (this.#method) { return this.#method; }\n        if (this.hasBody()) { return \"POST\"; }\n        return \"GET\";\n    }\n    set method(method: null | string) {\n        if (method == null) { method = \"\"; }\n        this.#method = String(method).toUpperCase();\n    }\n\n    /**\n     *  The headers that will be used when requesting the URI. All\n     *  keys are lower-case.\n     *\n     *  This object is a copy, so any changes will **NOT** be reflected\n     *  in the ``FetchRequest``.\n     *\n     *  To set a header entry, use the ``setHeader`` method.\n     */\n    get headers(): Record<string, string> {\n        const headers = Object.assign({ }, this.#headers);\n\n        if (this.#creds) {\n            headers[\"authorization\"] = `Basic ${ encodeBase64(toUtf8Bytes(this.#creds)) }`;\n        };\n\n        if (this.allowGzip) {\n            headers[\"accept-encoding\"] = \"gzip\";\n        }\n\n        if (headers[\"content-type\"] == null && this.#bodyType) {\n            headers[\"content-type\"] = this.#bodyType;\n        }\n        if (this.body) { headers[\"content-length\"] = String(this.body.length); }\n\n        return headers;\n    }\n\n    /**\n     *  Get the header for %%key%%, ignoring case.\n     */\n    getHeader(key: string): string {\n        return this.headers[key.toLowerCase()];\n    }\n\n    /**\n     *  Set the header for %%key%% to %%value%%. All values are coerced\n     *  to a string.\n     */\n    setHeader(key: string, value: string | number): void {\n        this.#headers[String(key).toLowerCase()] = String(value);\n    }\n\n    /**\n     *  Clear all headers, resetting all intrinsic headers.\n     */\n    clearHeaders(): void {\n        this.#headers = { };\n    }\n\n    [Symbol.iterator](): Iterator<[ key: string, value: string ]> {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: () => {\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [ key, headers[key] ], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    /**\n     *  The value that will be sent for the ``Authorization`` header.\n     *\n     *  To set the credentials, use the ``setCredentials`` method.\n     */\n    get credentials(): null | string {\n        return this.#creds || null;\n    }\n\n    /**\n     *  Sets an ``Authorization`` for %%username%% with %%password%%.\n     */\n    setCredentials(username: string, password: string): void {\n        assertArgument(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n        this.#creds = `${ username }:${ password }`;\n    }\n\n    /**\n     *  Enable and request gzip-encoded responses. The response will\n     *  automatically be decompressed. //(default: true)//\n     */\n    get allowGzip(): boolean {\n        return this.#gzip;\n    }\n    set allowGzip(value: boolean) {\n        this.#gzip = !!value;\n    }\n\n    /**\n     *  Allow ``Authentication`` credentials to be sent over insecure\n     *  channels. //(default: false)//\n     */\n    get allowInsecureAuthentication(): boolean {\n        return !!this.#allowInsecure;\n    }\n    set allowInsecureAuthentication(value: boolean) {\n        this.#allowInsecure = !!value;\n    }\n\n    /**\n     *  The timeout (in milliseconds) to wait for a complete response.\n     *  //(default: 5 minutes)//\n     */\n    get timeout(): number { return this.#timeout; }\n    set timeout(timeout: number) {\n        assertArgument(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n        this.#timeout = timeout;\n    }\n\n    /**\n     *  This function is called prior to each request, for example\n     *  during a redirection or retry in case of server throttling.\n     *\n     *  This offers an opportunity to populate headers or update\n     *  content before sending a request.\n     */\n    get preflightFunc(): null | FetchPreflightFunc {\n        return this.#preflight || null;\n    }\n    set preflightFunc(preflight: null | FetchPreflightFunc) {\n        this.#preflight = preflight;\n    }\n\n    /**\n     *  This function is called after each response, offering an\n     *  opportunity to provide client-level throttling or updating\n     *  response data.\n     *\n     *  Any error thrown in this causes the ``send()`` to throw.\n     *\n     *  To schedule a retry attempt (assuming the maximum retry limit\n     *  has not been reached), use [[response.throwThrottleError]].\n     */\n    get processFunc(): null | FetchProcessFunc {\n        return this.#process || null;\n    }\n    set processFunc(process: null | FetchProcessFunc) {\n        this.#process = process;\n    }\n\n    /**\n     *  This function is called on each retry attempt.\n     */\n    get retryFunc(): null | FetchRetryFunc {\n        return this.#retry || null;\n    }\n    set retryFunc(retry: null | FetchRetryFunc) {\n        this.#retry = retry;\n    }\n\n    /**\n     *  This function is called to fetch content from HTTP and\n     *  HTTPS URLs and is platform specific (e.g. nodejs vs\n     *  browsers).\n     *\n     *  This is by default the currently registered global getUrl\n     *  function, which can be changed using [[registerGetUrl]].\n     *  If this has been set, setting is to ``null`` will cause\n     *  this FetchRequest (and any future clones) to revert back to\n     *  using the currently registered global getUrl function.\n     *\n     *  Setting this is generally not necessary, but may be useful\n     *  for developers that wish to intercept requests or to\n     *  configurege a proxy or other agent.\n     */\n    get getUrlFunc(): FetchGetUrlFunc {\n        return this.#getUrlFunc || defaultGetUrlFunc;\n    }\n    set getUrlFunc(value: null | FetchGetUrlFunc) {\n        this.#getUrlFunc = value;\n    }\n\n    /**\n     *  Create a new FetchRequest instance with default values.\n     *\n     *  Once created, each property may be set before issuing a\n     *  ``.send()`` to make the request.\n     */\n    constructor(url: string) {\n        this.#url = String(url);\n\n        this.#allowInsecure = false;\n        this.#gzip = true;\n        this.#headers = { };\n        this.#method = \"\";\n        this.#timeout = 300000;\n\n        this.#throttle = {\n            slotInterval: SLOT_INTERVAL,\n            maxAttempts: MAX_ATTEMPTS\n        };\n\n        this.#getUrlFunc = null;\n    }\n\n    toString(): string {\n        return `<FetchRequest method=${ JSON.stringify(this.method) } url=${ JSON.stringify(this.url) } headers=${ JSON.stringify(this.headers) } body=${ this.#body ? hexlify(this.#body): \"null\" }>`;\n    }\n\n    /**\n     *  Update the throttle parameters used to determine maximum\n     *  attempts and exponential-backoff properties.\n     */\n    setThrottleParams(params: FetchThrottleParams): void {\n        if (params.slotInterval != null) {\n            this.#throttle.slotInterval = params.slotInterval;\n        }\n        if (params.maxAttempts != null) {\n            this.#throttle.maxAttempts = params.maxAttempts;\n        }\n    }\n\n    async #send(attempt: number, expires: number, delay: number, _request: FetchRequest, _response: FetchResponse): Promise<FetchResponse> {\n        if (attempt >= this.#throttle.maxAttempts) {\n            return _response.makeServerError(\"exceeded maximum retry limit\");\n        }\n\n        assert(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n            operation: \"request.send\", reason: \"timeout\", request: _request\n        });\n\n        if (delay > 0) { await wait(delay); }\n\n        let req = this.clone();\n        const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n\n        // Process any Gateways\n        if (scheme in Gateways) {\n            const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));\n            if (result instanceof FetchResponse) {\n                let response = result;\n\n                if (this.processFunc) {\n                    checkSignal(_request.#signal);\n                    try {\n                        response = await this.processFunc(req, response);\n                    } catch (error: any) {\n\n                        // Something went wrong during processing; throw a 5xx server error\n                        if (error.throttle == null || typeof(error.stall) !== \"number\") {\n                            response.makeServerError(\"error in post-processing function\", error).assertOk();\n                        }\n\n                        // Ignore throttling\n                    }\n                }\n\n                return response;\n            }\n            req = result;\n        }\n\n        // We have a preflight function; update the request\n        if (this.preflightFunc) { req = await this.preflightFunc(req); }\n\n        const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));\n        let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n\n        if (response.statusCode === 301 || response.statusCode === 302) {\n\n            // Redirect\n            try {\n                const location = response.headers.location || \"\";\n                return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);\n            } catch (error) { }\n\n            // Things won't get any better on another attempt; abort\n            return response;\n\n        } else if (response.statusCode === 429) {\n\n            // Throttle\n            if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {\n                const retryAfter = response.headers[\"retry-after\"];\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n                if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                    delay = parseInt(retryAfter);\n                }\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n\n        if (this.processFunc) {\n            checkSignal(_request.#signal);\n            try {\n                response = await this.processFunc(req, response);\n            } catch (error: any) {\n\n                // Something went wrong during processing; throw a 5xx server error\n                if (error.throttle == null || typeof(error.stall) !== \"number\") {\n                    response.makeServerError(\"error in post-processing function\", error).assertOk();\n                }\n\n                // Throttle\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));;\n                if (error.stall >= 0) { delay = error.stall; }\n\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n\n        return response;\n    }\n\n    /**\n     *  Resolves to the response by sending the request.\n     */\n    send(): Promise<FetchResponse> {\n        assert(this.#signal == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.send\" });\n        this.#signal = new FetchCancelSignal(this);\n        return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", { }, null, this));\n    }\n\n    /**\n     *  Cancels the inflight response, causing a ``CANCELLED``\n     *  error to be rejected from the [[send]].\n     */\n    cancel(): void {\n        assert(this.#signal != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.cancel\" });\n        const signal = fetchSignals.get(this);\n        if (!signal) { throw new Error(\"missing signal; should not happen\"); }\n        signal();\n    }\n\n    /**\n     *  Returns a new [[FetchRequest]] that represents the redirection\n     *  to %%location%%.\n     */\n    redirect(location: string): FetchRequest {\n        // Redirection; for now we only support absolute locations\n        const current = this.url.split(\":\")[0].toLowerCase();\n        const target = location.split(\":\")[0].toLowerCase();\n\n        // Don't allow redirecting:\n        // - non-GET requests\n        // - downgrading the security (e.g. https => http)\n        // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n        assert(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), `unsupported redirect`, \"UNSUPPORTED_OPERATION\", {\n            operation: `redirect(${ this.method } ${ JSON.stringify(this.url) } => ${ JSON.stringify(location) })`\n        });\n\n        // Create a copy of this request, with a new URL\n        const req = new FetchRequest(location);\n        req.method = \"GET\";\n        req.allowGzip = this.allowGzip;\n        req.timeout = this.timeout;\n        req.#headers = Object.assign({ }, this.#headers);\n        if (this.#body) { req.#body = new Uint8Array(this.#body); }\n        req.#bodyType = this.#bodyType;\n\n        // Do not forward credentials unless on the same domain; only absolute\n        //req.allowInsecure = false;\n        // paths are currently supported; may want a way to specify to forward?\n        //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n\n        return req;\n    }\n\n    /**\n     *  Create a new copy of this request.\n     */\n    clone(): FetchRequest {\n        const clone = new FetchRequest(this.url);\n\n        // Preserve \"default method\" (i.e. null)\n        clone.#method = this.#method;\n\n        // Preserve \"default body\" with type, copying the Uint8Array is present\n        if (this.#body) { clone.#body = this.#body; }\n        clone.#bodyType = this.#bodyType;\n\n        // Preserve \"default headers\"\n        clone.#headers = Object.assign({ }, this.#headers);\n\n        // Credentials is readonly, so we copy internally\n        clone.#creds = this.#creds;\n\n        if (this.allowGzip) { clone.allowGzip = true; }\n\n        clone.timeout = this.timeout;\n        if (this.allowInsecureAuthentication) { clone.allowInsecureAuthentication = true; }\n\n        clone.#preflight = this.#preflight;\n        clone.#process = this.#process;\n        clone.#retry = this.#retry;\n\n        clone.#throttle = Object.assign({ }, this.#throttle);\n\n        clone.#getUrlFunc = this.#getUrlFunc;\n\n        return clone;\n    }\n\n    /**\n     *  Locks all static configuration for gateways and FetchGetUrlFunc\n     *  registration.\n     */\n    static lockConfig(): void {\n        locked = true;\n    }\n\n    /**\n     *  Get the current Gateway function for %%scheme%%.\n     */\n    static getGateway(scheme: string): null | FetchGatewayFunc {\n        return Gateways[scheme.toLowerCase()] || null;\n    }\n\n    /**\n     *  Use the %%func%% when fetching URIs using %%scheme%%.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n    static registerGateway(scheme: string, func: FetchGatewayFunc): void {\n        scheme = scheme.toLowerCase();\n        if (scheme === \"http\" || scheme === \"https\") {\n            throw new Error(`cannot intercept ${ scheme }; use registerGetUrl`);\n        }\n        if (locked) { throw new Error(\"gateways locked\"); }\n        Gateways[scheme] = func;\n    }\n\n    /**\n     *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n    static registerGetUrl(getUrl: FetchGetUrlFunc): void {\n        if (locked) { throw new Error(\"gateways locked\"); }\n        defaultGetUrlFunc = getUrl;\n    }\n\n    /**\n     *  Creates a getUrl function that fetches content from HTTP and\n     *  HTTPS URLs.\n     *\n     *  The available %%options%% are dependent on the platform\n     *  implementation of the default getUrl function.\n     *\n     *  This is not generally something that is needed, but is useful\n     *  when trying to customize simple behaviour when fetching HTTP\n     *  content.\n     */\n    static createGetUrlFunc(options?: Record<string, any>): FetchGetUrlFunc {\n        return createGetUrl(options);\n    }\n\n    /**\n     *  Creates a function that can \"fetch\" data URIs.\n     *\n     *  Note that this is automatically done internally to support\n     *  data URIs, so it is not necessary to register it.\n     *\n     *  This is not generally something that is needed, but may\n     *  be useful in a wrapper to perfom custom data URI functionality.\n     */\n    static createDataGateway(): FetchGatewayFunc {\n        return dataGatewayFunc;\n    }\n\n    /**\n     *  Creates a function that will fetch IPFS (unvalidated) from\n     *  a custom gateway baseUrl.\n     *\n     *  The default IPFS gateway used internally is\n     *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n     */\n    static createIpfsGatewayFunc(baseUrl: string): FetchGatewayFunc {\n        return getIpfsGatewayFunc(baseUrl);\n    }\n}\n\n\ninterface ThrottleError extends Error {\n    stall: number;\n    throttle: true;\n};\n\n/**\n *  The response for a FetchRequest.\n */\nexport class FetchResponse implements Iterable<[ key: string, value: string ]> {\n    #statusCode: number;\n    #statusMessage: string;\n    #headers: Record<string, string>;\n    #body: null | Readonly<Uint8Array>;\n    #request: null | FetchRequest;\n\n    #error: { error?: Error, message: string };\n\n    toString(): string {\n        return `<FetchResponse status=${ this.statusCode } body=${ this.#body ? hexlify(this.#body): \"null\" }>`;\n    }\n\n    /**\n     *  The response status code.\n     */\n    get statusCode(): number { return this.#statusCode; }\n\n    /**\n     *  The response status message.\n     */\n    get statusMessage(): string { return this.#statusMessage; }\n\n    /**\n     *  The response headers. All keys are lower-case.\n     */\n    get headers(): Record<string, string> { return Object.assign({ }, this.#headers); }\n\n    /**\n     *  The response body, or ``null`` if there was no body.\n     */\n    get body(): null | Readonly<Uint8Array> {\n        return (this.#body == null) ? null: new Uint8Array(this.#body);\n    }\n\n    /**\n     *  The response body as a UTF-8 encoded string, or the empty\n     *  string (i.e. ``\"\"``) if there was no body.\n     *\n     *  An error is thrown if the body is invalid UTF-8 data.\n     */\n    get bodyText(): string {\n        try {\n            return (this.#body == null) ? \"\": toUtf8String(this.#body);\n        } catch (error) {\n            assert(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyText\", info: { response: this }\n            });\n        }\n    }\n\n    /**\n     *  The response body, decoded as JSON.\n     *\n     *  An error is thrown if the body is invalid JSON-encoded data\n     *  or if there was no body.\n     */\n    get bodyJson(): any {\n        try {\n            return JSON.parse(this.bodyText);\n        } catch (error) {\n            assert(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyJson\", info: { response: this }\n            });\n        }\n    }\n\n    [Symbol.iterator](): Iterator<[ key: string, value: string ]> {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: () => {\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [ key, headers[key] ], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    constructor(statusCode: number, statusMessage: string, headers: Readonly<Record<string, string>>, body: null | Uint8Array, request?: FetchRequest) {\n        this.#statusCode = statusCode;\n        this.#statusMessage = statusMessage;\n        this.#headers = Object.keys(headers).reduce((accum, k) => {\n            accum[k.toLowerCase()] = String(headers[k]);\n            return accum;\n        }, <Record<string, string>>{ });\n        this.#body = ((body == null) ? null: new Uint8Array(body));\n        this.#request = (request || null);\n\n        this.#error = { message: \"\" };\n    }\n\n    /**\n     *  Return a Response with matching headers and body, but with\n     *  an error status code (i.e. 599) and %%message%% with an\n     *  optional %%error%%.\n     */\n    makeServerError(message?: string, error?: Error): FetchResponse {\n        let statusMessage: string;\n        if (!message) {\n            message = `${ this.statusCode } ${ this.statusMessage }`;\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${ message })`;\n        } else {\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${ this.statusCode } ${ this.statusMessage }; ${ message })`;\n        }\n        const response = new FetchResponse(599, statusMessage, this.headers,\n            this.body, this.#request || undefined);\n        response.#error = { message, error };\n        return response;\n    }\n\n    /**\n     *  If called within a [request.processFunc](FetchRequest-processFunc)\n     *  call, causes the request to retry as if throttled for %%stall%%\n     *  milliseconds.\n     */\n    throwThrottleError(message?: string, stall?: number): never {\n        if (stall == null) {\n            stall = -1;\n        } else {\n            assertArgument(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n        }\n\n        const error = new Error(message || \"throttling requests\");\n\n        defineProperties(<ThrottleError>error, { stall, throttle: true });\n\n        throw error;\n    }\n\n    /**\n     *  Get the header value for %%key%%, ignoring case.\n     */\n    getHeader(key: string): string {\n        return this.headers[key.toLowerCase()];\n    }\n\n    /**\n     *  Returns true if the response has a body.\n     */\n    hasBody(): this is (FetchResponse & { body: Uint8Array }) {\n        return (this.#body != null);\n    }\n\n    /**\n     *  The request made for this response.\n     */\n    get request(): null | FetchRequest { return this.#request; }\n\n    /**\n     *  Returns true if this response was a success statusCode.\n     */\n    ok(): boolean {\n        return (this.#error.message === \"\" && this.statusCode >= 200 && this.statusCode < 300);\n    }\n\n    /**\n     *  Throws a ``SERVER_ERROR`` if this response is not ok.\n     */\n    assertOk(): void {\n        if (this.ok()) { return; }\n        let { message, error } = this.#error;\n        if (message === \"\") {\n            message = `server response ${ this.statusCode } ${ this.statusMessage }`;\n        }\n\n        let requestUrl: null | string = null;\n        if (this.request) { requestUrl = this.request.url; }\n\n        let responseBody: null | string = null;\n        try {\n            if (this.#body) { responseBody = toUtf8String(this.#body); }\n        } catch (e) { }\n\n        assert(false, message, \"SERVER_ERROR\", {\n            request: (this.request || \"unknown request\"), response: this, error,\n            info: {\n                requestUrl, responseBody,\n                responseStatus: `${ this.statusCode } ${ this.statusMessage }` }\n        });\n    }\n}\n\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\nfunction wait(delay: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, delay));\n}\n","\n// utils/base64-browser\n\nimport { getBytes } from \"./data.js\";\n\nimport type { BytesLike } from \"./data.js\";\n\n\nexport function decodeBase64(textData: string): Uint8Array {\n    textData = atob(textData);\n    const data = new Uint8Array(textData.length);\n    for (let i = 0; i < textData.length; i++) {\n        data[i] = textData.charCodeAt(i);\n    }\n    return getBytes(data);\n}\n\nexport function encodeBase64(_data: BytesLike): string {\n    const data = getBytes(_data);\n    let textData = \"\";\n    for (let i = 0; i < data.length; i++) {\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n}\n","\n/**\n *  A constant for the zero address.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000\"``)\n */\nexport const ZeroAddress: string = \"0x0000000000000000000000000000000000000000\";\n\n","\nimport { keccak256 } from \"../crypto/index.js\";\nimport {\n    concat, hexlify, assertArgument, toUtf8Bytes\n} from \"../utils/index.js\";\n\n\nimport { ens_normalize } from \"@adraffy/ens-normalize\";\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nfunction checkComponent(comp: Uint8Array): Uint8Array {\n    assertArgument(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp)\n    return comp;\n}\n\nfunction ensNameSplit(name: string): Array<Uint8Array> {\n    const bytes = toUtf8Bytes(ensNormalize(name));\n    const comps: Array<Uint8Array> = [ ];\n\n    if (name.length === 0) { return comps; }\n\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n\n    // There was a stray separator at the end of the name\n    assertArgument(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n\n/**\n *  Returns the ENS %%name%% normalized.\n */\nexport function ensNormalize(name: string): string {\n    try {\n        if (name.length === 0) { throw new Error(\"empty label\"); }\n        return ens_normalize(name);\n    } catch (error: any) {\n        assertArgument(false, `invalid ENS name (${ error.message })`, \"name\", name);\n    }\n}\n\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */\nexport function isValidName(name: string): name is string {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    } catch (error) { }\n    return false;\n}\n\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */\nexport function namehash(name: string): string {\n    assertArgument(typeof(name) === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n\n    assertArgument(name.length, `invalid ENS name (empty label)`, \"name\", name);\n\n    let result: string | Uint8Array = Zeros;\n\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([ result, keccak256(<Uint8Array>(comps.pop()))] ));\n    }\n\n    return hexlify(result);\n}\n\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */\nexport function dnsEncode(name: string, _maxLength?: number): string {\n    const length = (_maxLength != null) ? _maxLength: 63;\n\n    assertArgument(length <= 255, \"DNS encoded label cannot exceed 255\", \"length\", length);\n\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        assertArgument(comp.length <= length, `label ${ JSON.stringify(name) } exceeds ${ length } bytes`, \"name\", name);\n\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n    }))) + \"00\";\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n","/* Browser Crypto Shims */\n\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { pbkdf2 } from \"@noble/hashes/pbkdf2\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\n\nimport { assert, assertArgument } from \"../utils/index.js\";\n\n\ndeclare global {\n    interface Window { }\n\n    const window: Window;\n    const self: Window;\n}\n\n\nfunction getGlobal(): any {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n\nconst anyGlobal = getGlobal();\nconst crypto: any = anyGlobal.crypto || anyGlobal.msCrypto;\n\n\nexport interface CryptoHasher {\n    update(data: Uint8Array): CryptoHasher;\n    digest(): Uint8Array;\n}\n\nexport function createHash(algo: string): CryptoHasher {\n    switch (algo) {\n        case \"sha256\": return sha256.create();\n        case \"sha512\": return sha512.create();\n    }\n    assertArgument(false, \"invalid hashing algorithm name\", \"algorithm\", algo);\n}\n\nexport function createHmac(_algo: string, key: Uint8Array): CryptoHasher {\n    const algo = ({ sha256, sha512 }[_algo]);\n    assertArgument(algo != null, \"invalid hmac algorithm\", \"algorithm\", _algo);\n    return hmac.create(algo, key);\n}\n\nexport function pbkdf2Sync(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, _algo: \"sha256\" | \"sha512\"): Uint8Array {\n    const algo = ({ sha256, sha512 }[_algo]);\n    assertArgument(algo != null, \"invalid pbkdf2 algorithm\", \"algorithm\", _algo);\n    return pbkdf2(algo, password, salt, { c: iterations, dkLen: keylen });\n}\n\nexport function randomBytes(length: number): Uint8Array {\n    assert(crypto != null, \"platform does not support secure random numbers\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"randomBytes\" });\n\n    assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, \"invalid length\", \"length\", length);\n\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return result;\n}\n","import { createHash } from \"./crypto.js\";\n\nimport { getBytes, hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nconst _sha256 = function(data: Uint8Array): Uint8Array {\n    return createHash(\"sha256\").update(data).digest();\n}\n\nconst _sha512 = function(data: Uint8Array): Uint8Array {\n    return createHash(\"sha512\").update(data).digest();\n}\n\nlet __sha256: (data: Uint8Array) => BytesLike = _sha256;\nlet __sha512: (data: Uint8Array) => BytesLike = _sha512;\n\nlet locked256 = false, locked512 = false;\n\n\n/**\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha256(\"0x\")\n *    //_result:\n *\n *    sha256(\"0x1337\")\n *    //_result:\n *\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function sha256(_data: BytesLike): string {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha256(data));\n}\nsha256._ = _sha256;\nsha256.lock = function(): void { locked256 = true; }\nsha256.register = function(func: (data: Uint8Array) => BytesLike): void {\n    if (locked256) { throw new Error(\"sha256 is locked\"); }\n    __sha256 = func;\n}\nObject.freeze(sha256);\n\n\n/**\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha512(\"0x\")\n *    //_result:\n *\n *    sha512(\"0x1337\")\n *    //_result:\n *\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n */\nexport function sha512(_data: BytesLike): string {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha512(data));\n}\nsha512._ = _sha512;\nsha512.lock = function(): void { locked512 = true; }\nsha512.register = function(func: (data: Uint8Array) => BytesLike): void {\n    if (locked512) { throw new Error(\"sha512 is locked\"); }\n    __sha512 = func;\n}\nObject.freeze(sha256);\n","/**\n *  A constant for the zero hash.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000000000000000000000000000\"``)\n */\nexport const ZeroHash: string = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n","\nimport { ZeroHash } from \"../constants/index.js\";\nimport {\n    concat, dataLength, getBigInt, getBytes, getNumber, hexlify,\n    toBeArray, isHexString, zeroPadValue,\n    assertArgument, assertPrivate\n} from \"../utils/index.js\";\n\nimport type {\n    BigNumberish, BytesLike, Numeric\n} from \"../utils/index.js\";\n\n\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\n\n\nconst _guard = { };\n\n// @TODO: Allow Uint8Array\n\n/**\n *  A SignatureLike\n *\n *  @_docloc: api/crypto:Signing\n */\nexport type SignatureLike = Signature | string | {\n    r: string;\n    s: string;\n    v: BigNumberish;\n    yParity?: 0 | 1;\n    yParityAndS?: string;\n} | {\n    r: string;\n    yParityAndS: string;\n    yParity?: 0 | 1;\n    s?: string;\n    v?: number;\n} | {\n    r: string;\n    s: string;\n    yParity: 0 | 1;\n    v?: BigNumberish;\n    yParityAndS?: string;\n};\n\nfunction toUint256(value: BigNumberish): string {\n    return zeroPadValue(toBeArray(value), 32);\n}\n\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */\nexport class Signature {\n    #r: string;\n    #s: string;\n    #v: 27 | 28;\n    #networkV: null | bigint;\n\n    /**\n     *  The ``r`` value for a signautre.\n     *\n     *  This represents the ``x`` coordinate of a \"reference\" or\n     *  challenge point, from which the ``y`` can be computed.\n     */\n    get r(): string { return this.#r; }\n    set r(value: BytesLike) {\n        assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n        this.#r = hexlify(value);\n    }\n\n    /**\n     *  The ``s`` value for a signature.\n     */\n    get s(): string { return this.#s; }\n    set s(_value: BytesLike) {\n        assertArgument(dataLength(_value) === 32, \"invalid s\", \"value\", _value);\n        const value = hexlify(_value);\n        assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n        this.#s = value;\n    }\n\n    /**\n     *  The ``v`` value for a signature.\n     *\n     *  Since a given ``x`` value for ``r`` has two possible values for\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n     *  values to use.\n     *\n     *  It is normalized to the values ``27`` or ``28`` for legacy\n     *  purposes.\n     */\n    get v(): 27 | 28 { return this.#v; }\n    set v(value: BigNumberish) {\n        const v = getNumber(value, \"value\");\n        assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n        this.#v = v;\n    }\n\n    /**\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get networkV(): null | bigint { return this.#networkV; }\n\n    /**\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get legacyChainId(): null | bigint {\n        const v = this.networkV;\n        if (v == null) { return null; }\n        return Signature.getChainId(v);\n    }\n\n    /**\n     *  The ``yParity`` for the signature.\n     *\n     *  See ``v`` for more details on how this value is used.\n     */\n    get yParity(): 0 | 1 {\n        return (this.v === 27) ? 0: 1;\n    }\n\n    /**\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\n     *  and ``s`` compacted into a single ``bytes32``.\n     */\n    get yParityAndS(): string {\n        // The EIP-2098 compact representation\n        const yParityAndS = getBytes(this.s);\n        if (this.yParity) { yParityAndS[0] |= 0x80; }\n        return hexlify(yParityAndS);\n    }\n\n    /**\n     *  The [[link-eip-2098]] compact representation.\n     */\n    get compactSerialized(): string {\n        return concat([ this.r, this.yParityAndS ]);\n    }\n\n    /**\n     *  The serialized representation.\n     */\n    get serialized(): string {\n        return concat([ this.r, this.s, (this.yParity ? \"0x1c\": \"0x1b\") ]);\n    }\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, r: string, s: string, v: 27 | 28) {\n        assertPrivate(guard, _guard, \"Signature\");\n        this.#r = r;\n        this.#s = s;\n        this.#v = v;\n        this.#networkV = null;\n    }\n\n    [Symbol.for('nodejs.util.inspect.custom')](): string {\n        return `Signature { r: \"${ this.r }\", s: \"${ this.s }\", yParity: ${ this.yParity }, networkV: ${ this.networkV } }`;\n    }\n\n    /**\n     *  Returns a new identical [[Signature]].\n     */\n    clone(): Signature {\n        const clone = new Signature(_guard, this.r, this.s, this.v);\n        if (this.networkV) { clone.#networkV = this.networkV; }\n        return clone;\n    }\n\n    /**\n     *  Returns a representation that is compatible with ``JSON.stringify``.\n     */\n    toJSON(): any {\n        const networkV = this.networkV;\n        return {\n            _type: \"signature\",\n            networkV: ((networkV != null) ? networkV.toString(): null),\n            r: this.r, s: this.s, v: this.v,\n        };\n    }\n\n    /**\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n     *\n     *  @example:\n     *    Signature.getChainId(45)\n     *    //_result:\n     *\n     *    Signature.getChainId(46)\n     *    //_result:\n     */\n    static getChainId(v: BigNumberish): bigint {\n        const bv = getBigInt(v, \"v\");\n\n        // The v is not an EIP-155 v, so it is the unspecified chain ID\n        if ((bv == BN_27) || (bv == BN_28)) { return BN_0; }\n\n        // Bad value for an EIP-155 v\n        assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n\n        return (bv - BN_35) / BN_2;\n    }\n\n    /**\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n     *\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n     *  property to include the chain ID.\n     *\n     *  @example:\n     *    Signature.getChainIdV(5, 27)\n     *    //_result:\n     *\n     *    Signature.getChainIdV(5, 28)\n     *    //_result:\n     *\n     */\n    static getChainIdV(chainId: BigNumberish, v: 27 | 28): bigint {\n        return (getBigInt(chainId) * BN_2) + BigInt(35 + v - 27);\n    }\n\n    /**\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n     *\n     *  @example:\n     *    // The values 0 and 1 imply v is actually yParity\n     *    Signature.getNormalizedV(0)\n     *    //_result:\n     *\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n     *    Signature.getNormalizedV(27)\n     *    //_result:\n     *\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\n     *    Signature.getNormalizedV(46)\n     *    //_result:\n     *\n     *    // Invalid values throw\n     *    Signature.getNormalizedV(5)\n     *    //_error:\n     */\n    static getNormalizedV(v: BigNumberish): 27 | 28 {\n        const bv = getBigInt(v);\n\n        if (bv === BN_0 || bv === BN_27) { return 27; }\n        if (bv === BN_1 || bv === BN_28) { return 28; }\n\n        assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\n\n        // Otherwise, EIP-155 v means odd is 27 and even is 28\n        return (bv & BN_1) ? 27: 28;\n    }\n\n    /**\n     *  Creates a new [[Signature]].\n     *\n     *  If no %%sig%% is provided, a new [[Signature]] is created\n     *  with default values.\n     *\n     *  If %%sig%% is a string, it is parsed.\n     */\n    static from(sig?: SignatureLike): Signature {\n        function assertError(check: unknown, message: string): asserts check {\n            assertArgument(check, message, \"signature\", sig);\n        };\n\n        if (sig == null) {\n            return new Signature(_guard, ZeroHash, ZeroHash, 27);\n        }\n\n        if (typeof(sig) === \"string\") {\n            const bytes = getBytes(sig, \"signature\");\n            if (bytes.length === 64) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                const v = (s[0] & 0x80) ? 28: 27;\n                s[0] &= 0x7f;\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n\n            if (bytes.length === 65) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n                const v = Signature.getNormalizedV(bytes[64]);\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n\n            assertError(false, \"invalid raw signature length\");\n        }\n\n        if (sig instanceof Signature) { return sig.clone(); }\n\n        // Get r\n        const _r = sig.r;\n        assertError(_r != null, \"missing r\");\n        const r = toUint256(_r);\n\n        // Get s; by any means necessary (we check consistency below)\n        const s = (function(s?: string, yParityAndS?: string) {\n            if (s != null) { return toUint256(s); }\n\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                const bytes = getBytes(yParityAndS);\n                bytes[0] &= 0x7f;\n                return hexlify(bytes);\n            }\n\n            assertError(false, \"missing s\");\n        })(sig.s, sig.yParityAndS);\n        assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\");\n\n        // Get v; by any means necessary (we check consistency below)\n        const { networkV, v } = (function(_v?: BigNumberish, yParityAndS?: string, yParity?: Numeric): { networkV?: bigint, v: 27 | 28 } {\n            if (_v != null) {\n                const v = getBigInt(_v);\n                return {\n                    networkV: ((v >= BN_35) ? v: undefined),\n                    v: Signature.getNormalizedV(v)\n                };\n            }\n\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                return { v: ((getBytes(yParityAndS)[0] & 0x80) ? 28: 27) };\n            }\n\n            if (yParity != null) {\n                switch (getNumber(yParity, \"sig.yParity\")) {\n                    case 0: return { v: 27 };\n                    case 1: return { v: 28 };\n                }\n                assertError(false, \"invalid yParity\");\n            }\n\n            assertError(false, \"missing v\");\n        })(sig.v, sig.yParityAndS, sig.yParity);\n\n        const result = new Signature(_guard, r, s, v);\n        if (networkV) { result.#networkV =  networkV; }\n\n        // If multiple of v, yParity, yParityAndS we given, check they match\n        assertError(sig.yParity == null || getNumber(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\n        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\n\n        return result;\n    }\n}\n\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || val instanceof Uint8Array,\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\n\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\n\nimport {\n    concat, dataLength, getBytes, getBytesCopy, hexlify, toBeHex,\n    assertArgument\n} from \"../utils/index.js\";\n\nimport { Signature } from \"./signature.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport type { SignatureLike } from \"./index.js\";\n\n\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nexport class SigningKey {\n    #privateKey: string;\n\n    /**\n     *  Creates a new **SigningKey** for %%privateKey%%.\n     */\n    constructor(privateKey: BytesLike) {\n        assertArgument(dataLength(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n        this.#privateKey = hexlify(privateKey);\n    }\n\n    /**\n     *  The private key.\n     */\n    get privateKey(): string { return this.#privateKey; }\n\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */\n    get publicKey(): string { return SigningKey.computePublicKey(this.#privateKey); }\n\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */\n    get compressedPublicKey(): string { return SigningKey.computePublicKey(this.#privateKey, true); }\n\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */\n    sign(digest: BytesLike): Signature {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n\n        const sig = secp256k1.sign(getBytesCopy(digest), getBytesCopy(this.#privateKey), {\n            lowS: true\n        });\n\n        return Signature.from({\n            r: toBeHex(sig.r, 32),\n            s: toBeHex(sig.s, 32),\n            v: (sig.recovery ? 0x1c: 0x1b)\n        });\n    }\n\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */\n    computeSharedSecret(other: BytesLike): string {\n        const pubKey = SigningKey.computePublicKey(other);\n        return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey), false));\n    }\n\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */\n    static computePublicKey(key: BytesLike, compressed?: boolean): string {\n        let bytes = getBytes(key, \"key\");\n\n        // private key\n        if (bytes.length === 32) {\n            const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n            return hexlify(pubKey);\n        }\n\n        // raw public key; use uncompressed key with 0x04 prefix\n        if (bytes.length === 64) {\n            const pub = new Uint8Array(65);\n            pub[0] = 0x04;\n            pub.set(bytes, 1);\n            bytes = pub;\n        }\n\n        const point = secp256k1.ProjectivePoint.fromHex(bytes);\n        return hexlify(point.toRawBytes(compressed));\n    }\n\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */\n    static recoverPublicKey(digest: BytesLike, signature: SignatureLike): string {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n\n        const sig = Signature.from(signature);\n\n        let secpSig = secp256k1.Signature.fromCompact(getBytesCopy(concat([ sig.r, sig.s ])));\n        secpSig = secpSig.addRecoveryBit(sig.yParity);\n\n        const pubKey = secpSig.recoverPublicKey(getBytesCopy(digest));\n        assertArgument(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n\n        return \"0x\" + pubKey.toHex(false);\n    }\n\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */\n    static addPoints(p0: BytesLike, p1: BytesLike, compressed?: boolean): string {\n        const pub0 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));\n        const pub1 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed)\n    }\n}\n\n","//See: https://github.com/ethereum/wiki/wiki/RLP\n\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { getBytes } from \"./data.js\";\n\nimport type { BytesLike, RlpStructuredData } from \"./index.js\";\n\n\nfunction hexlifyByte(value: number): string {\n    let result = value.toString(16);\n    while (result.length < 2) { result = \"0\" + result; }\n    return \"0x\" + result;\n}\n\nfunction unarrayifyInteger(data: Uint8Array, offset: number, length: number): number {\n    let result = 0;\n    for (let i = 0; i < length; i++) {\n        result = (result * 256) + data[offset + i];\n    }\n    return result;\n}\n\ntype Decoded = {\n    result: any;\n    consumed: number;\n};\n\nfunction _decodeChildren(data: Uint8Array, offset: number, childOffset: number, length: number): Decoded {\n    const result: Array<any> = [];\n\n    while (childOffset < offset + 1 + length) {\n        const decoded = _decode(data, childOffset);\n\n        result.push(decoded.result);\n\n        childOffset += decoded.consumed;\n        assert(childOffset <= offset + 1 + length, \"child data too short\", \"BUFFER_OVERRUN\", {\n            buffer: data, length, offset\n        });\n    }\n\n    return {consumed: (1 + length), result: result};\n}\n\n// returns { consumed: number, result: Object }\nfunction _decode(data: Uint8Array, offset: number): { consumed: number, result: any } {\n    assert(data.length !== 0, \"data too short\", \"BUFFER_OVERRUN\", {\n        buffer: data, length: 0, offset: 1\n    });\n\n    const checkOffset = (offset: number) => {\n        assert(offset <= data.length, \"data short segment too short\", \"BUFFER_OVERRUN\", {\n            buffer: data, length: data.length, offset\n        });\n    };\n\n    // Array with extra length prefix\n    if (data[offset] >= 0xf8) {\n        const lengthLength = data[offset] - 0xf7;\n        checkOffset(offset + 1 + lengthLength);\n\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        checkOffset(offset + 1 + lengthLength + length);\n\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n\n    } else if (data[offset] >= 0xc0) {\n        const length = data[offset] - 0xc0;\n        checkOffset(offset + 1 + length);\n\n        return _decodeChildren(data, offset, offset + 1, length);\n\n    } else if (data[offset] >= 0xb8) {\n        const lengthLength = data[offset] - 0xb7;\n        checkOffset(offset + 1 + lengthLength);\n\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        checkOffset(offset + 1 + lengthLength + length);\n\n        const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n        return { consumed: (1 + lengthLength + length), result: result }\n\n    } else if (data[offset] >= 0x80) {\n        const length = data[offset] - 0x80;\n        checkOffset(offset + 1 + length);\n\n        const result = hexlify(data.slice(offset + 1, offset + 1 + length));\n        return { consumed: (1 + length), result: result }\n    }\n\n    return { consumed: 1, result: hexlifyByte(data[offset]) };\n}\n\n/**\n *  Decodes %%data%% into the structured data it represents.\n */\nexport function decodeRlp(_data: BytesLike): RlpStructuredData {\n    const data = getBytes(_data, \"data\");\n    const decoded = _decode(data, 0);\n    assertArgument(decoded.consumed === data.length, \"unexpected junk after rlp payload\", \"data\", _data);\n    return decoded.result;\n}\n\n","//See: https://github.com/ethereum/wiki/wiki/RLP\n\nimport { getBytes } from \"./data.js\";\n\nimport type { RlpStructuredDataish } from \"./rlp.js\";\n\n\nfunction arrayifyInteger(value: number): Array<number> {\n    const result: Array<number> = [];\n    while (value) {\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\n\nfunction _encode(object: Array<any> | string | Uint8Array): Array<number> {\n    if (Array.isArray(object)) {\n        let payload: Array<number> = [];\n        object.forEach(function(child) {\n            payload = payload.concat(_encode(child));\n        });\n\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length)\n            return payload;\n        }\n\n        const length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n\n        return length.concat(payload);\n\n    }\n\n    const data: Array<number> = Array.prototype.slice.call(getBytes(object, \"object\"));\n\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n\n    } else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n\n    const length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n\n    return length.concat(data);\n}\n\nconst nibbles = \"0123456789abcdef\";\n\n/**\n *  Encodes %%object%% as an RLP-encoded [[DataHexString]].\n */\nexport function encodeRlp(object: RlpStructuredDataish): string {\n    let result = \"0x\";\n    for (const v of _encode(object)) {\n        result += nibbles[v >> 4];\n        result += nibbles[v & 0xf];\n    }\n    return result;\n}\n","import { getAddress } from \"../address/index.js\";\nimport { keccak256, SigningKey } from \"../crypto/index.js\";\n\nimport type { SignatureLike } from \"../crypto/index.js\";\nimport type { BytesLike } from \"../utils/index.js\";\n\n/**\n *  Returns the address for the %%key%%.\n *\n *  The key may be any standard form of public key or a private key.\n */\nexport function computeAddress(key: string | SigningKey): string {\n    let pubkey: string;\n    if (typeof(key) === \"string\") {\n        pubkey = SigningKey.computePublicKey(key, false);\n    } else {\n        pubkey = key.publicKey;\n    }\n    return getAddress(keccak256(\"0x\" + pubkey.substring(4)).substring(26));\n}\n\n/**\n *  Returns the recovered address for the private key that was\n *  used to sign %%digest%% that resulted in %%signature%%.\n */\nexport function recoverAddress(digest: BytesLike, signature: SignatureLike): string {\n    return computeAddress(SigningKey.recoverPublicKey(digest, signature));\n}\n","\nimport { getAddress } from \"../address/index.js\";\nimport { ZeroAddress } from \"../constants/addresses.js\";\nimport {\n    keccak256, sha256, Signature, SigningKey\n} from \"../crypto/index.js\";\nimport {\n    concat, decodeRlp, encodeRlp, getBytes, getBigInt, getNumber, hexlify,\n    assert, assertArgument, isBytesLike, isHexString, toBeArray, zeroPadValue\n} from \"../utils/index.js\";\n\nimport { accessListify } from \"./accesslist.js\";\nimport { recoverAddress } from \"./address.js\";\n\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\nimport type { SignatureLike } from \"../crypto/index.js\";\n\nimport type { AccessList, AccessListish } from \"./index.js\";\n\n\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27)\nconst BN_28 = BigInt(28)\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nconst BLOB_SIZE = 4096 * 32;\n\n// The BLS Modulo; each field within a BLOb must be less than this\n//const BLOB_BLS_MODULO = BigInt(\"0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\");\n\n/**\n *  A **TransactionLike** is an object which is appropriate as a loose\n *  input for many operations which will populate missing properties of\n *  a transaction.\n */\nexport interface TransactionLike<A = string> {\n    /**\n     *  The type.\n     */\n    type?: null | number;\n\n    /**\n     *  The recipient address or ``null`` for an ``init`` transaction.\n     */\n    to?: null | A;\n\n    /**\n     *  The sender.\n     */\n    from?: null | A;\n\n    /**\n     *  The nonce.\n     */\n    nonce?: null | number;\n\n    /**\n     *  The maximum amount of gas that can be used.\n     */\n    gasLimit?: null | BigNumberish;\n\n    /**\n     *  The gas price for legacy and berlin transactions.\n     */\n    gasPrice?: null | BigNumberish;\n\n    /**\n     *  The maximum priority fee per gas for london transactions.\n     */\n    maxPriorityFeePerGas?: null | BigNumberish;\n\n    /**\n     *  The maximum total fee per gas for london transactions.\n     */\n    maxFeePerGas?: null | BigNumberish;\n\n    /**\n     *  The data.\n     */\n    data?: null | string;\n\n    /**\n     *  The value (in wei) to send.\n     */\n    value?: null | BigNumberish;\n\n    /**\n     *  The chain ID the transaction is valid on.\n     */\n    chainId?: null | BigNumberish;\n\n    /**\n     *  The transaction hash.\n     */\n    hash?: null | string;\n\n    /**\n     *  The signature provided by the sender.\n     */\n    signature?: null | SignatureLike;\n\n    /**\n     *  The access list for berlin and london transactions.\n     */\n    accessList?: null | AccessListish;\n\n    /**\n     *  The maximum fee per blob gas (see [[link-eip-4844]]).\n     */\n    maxFeePerBlobGas?: null | BigNumberish;\n\n    /**\n     *  The versioned hashes (see [[link-eip-4844]]).\n     */\n    blobVersionedHashes?: null | Array<string>;\n\n    /**\n     *  The blobs (if any) attached to this transaction (see [[link-eip-4844]]).\n     */\n    blobs?: null | Array<BlobLike>\n\n    /**\n     *  An external library for computing the KZG commitments and\n     *  proofs necessary for EIP-4844 transactions (see [[link-eip-4844]]).\n     *\n     *  This is generally ``null``, unless you are creating BLOb\n     *  transactions.\n     */\n    kzg?: null | KzgLibrary;\n}\n\n/**\n *  A full-valid BLOb object for [[link-eip-4844]] transactions.\n *\n *  The commitment and proof should have been computed using a\n *  KZG library.\n */\nexport interface Blob {\n    data: string;\n    proof: string;\n    commitment: string;\n}\n\n/**\n *  A BLOb object that can be passed for [[link-eip-4844]]\n *  transactions.\n *\n *  It may have had its commitment and proof already provided\n *  or rely on an attached [[KzgLibrary]] to compute them.\n */\nexport type BlobLike = BytesLike | {\n    data: BytesLike;\n    proof: BytesLike;\n    commitment: BytesLike;\n};\n\n/**\n *  A KZG Library with the necessary functions to compute\n *  BLOb commitments and proofs.\n */\nexport interface KzgLibrary {\n    blobToKzgCommitment: (blob: Uint8Array) => Uint8Array;\n    computeBlobKzgProof: (blob: Uint8Array, commitment: Uint8Array) => Uint8Array;\n}\n\nfunction getVersionedHash(version: number, hash: BytesLike): string {\n    let versioned = version.toString(16);\n    while (versioned.length < 2) { versioned = \"0\" + versioned; }\n    versioned += sha256(hash).substring(4);\n    return \"0x\" + versioned;\n}\n\nfunction handleAddress(value: string): null | string {\n    if (value === \"0x\") { return null; }\n    return getAddress(value);\n}\n\nfunction handleAccessList(value: any, param: string): AccessList {\n    try {\n        return accessListify(value);\n    } catch (error: any) {\n        assertArgument(false, error.message, param, value);\n    }\n}\n\nfunction handleNumber(_value: string, param: string): number {\n    if (_value === \"0x\") { return 0; }\n    return getNumber(_value, param);\n}\n\nfunction handleUint(_value: string, param: string): bigint {\n    if (_value === \"0x\") { return BN_0; }\n    const value = getBigInt(_value, param);\n    assertArgument(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n    return value;\n}\n\nfunction formatNumber(_value: BigNumberish, name: string): Uint8Array {\n    const value = getBigInt(_value, \"value\");\n    const result = toBeArray(value);\n    assertArgument(result.length <= 32, `value too large`, `tx.${ name }`, value);\n    return result;\n}\n\nfunction formatAccessList(value: AccessListish): Array<[ string, Array<string> ]> {\n    return accessListify(value).map((set) => [ set.address, set.storageKeys ]);\n}\n\nfunction formatHashes(value: Array<string>, param: string): Array<string> {\n    assertArgument(Array.isArray(value), `invalid ${ param }`, \"value\", value);\n    for (let i = 0; i < value.length; i++) {\n        assertArgument(isHexString(value[i], 32), \"invalid ${ param } hash\", `value[${ i }]`, value[i]);\n    }\n    return value;\n}\n\nfunction _parseLegacy(data: Uint8Array): TransactionLike {\n    const fields: any = decodeRlp(data);\n\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6),\n        \"invalid field count for legacy transaction\", \"data\", data);\n\n    const tx: TransactionLike = {\n        type:     0,\n        nonce:    handleNumber(fields[0], \"nonce\"),\n        gasPrice: handleUint(fields[1], \"gasPrice\"),\n        gasLimit: handleUint(fields[2], \"gasLimit\"),\n        to:       handleAddress(fields[3]),\n        value:    handleUint(fields[4], \"value\"),\n        data:     hexlify(fields[5]),\n        chainId:  BN_0\n    };\n\n    // Legacy unsigned transaction\n    if (fields.length === 6) { return tx; }\n\n    const v = handleUint(fields[6], \"v\");\n    const r = handleUint(fields[7], \"r\");\n    const s = handleUint(fields[8], \"s\");\n\n    if (r === BN_0 && s === BN_0) {\n        // EIP-155 unsigned transaction\n        tx.chainId = v;\n\n    } else {\n\n        // Compute the EIP-155 chain ID (or 0 for legacy)\n        let chainId = (v - BN_35) / BN_2;\n        if (chainId < BN_0) { chainId = BN_0; }\n        tx.chainId = chainId\n\n        // Signed Legacy Transaction\n        assertArgument(chainId !== BN_0 || (v === BN_27 || v === BN_28), \"non-canonical legacy v\", \"v\", fields[6]);\n\n        tx.signature = Signature.from({\n            r: zeroPadValue(fields[7], 32),\n            s: zeroPadValue(fields[8], 32),\n            v\n        });\n\n        //tx.hash = keccak256(data);\n    }\n\n    return tx;\n}\n\nfunction _serializeLegacy(tx: Transaction, sig: null | Signature): string {\n    const fields: Array<any> = [\n        formatNumber(tx.nonce, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit, \"gasLimit\"),\n        (tx.to || \"0x\"),\n        formatNumber(tx.value, \"value\"),\n        tx.data,\n    ];\n\n    let chainId = BN_0;\n    if (tx.chainId != BN_0) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = getBigInt(tx.chainId, \"tx.chainId\");\n\n        // We have a chainId in the tx and an EIP-155 v in the signature,\n        // make sure they agree with each other\n        assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId,\n             \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n\n    } else if (tx.signature) {\n        // No explicit chainId, but EIP-155 have a derived implicit chainId\n        const legacy = tx.signature.legacyChainId;\n        if (legacy != null) { chainId = legacy; }\n    }\n\n    // Requesting an unsigned transaction\n    if (!sig) {\n        // We have an EIP-155 transaction (chainId was specified and non-zero)\n        if (chainId !== BN_0) {\n            fields.push(toBeArray(chainId));\n            fields.push(\"0x\");\n            fields.push(\"0x\");\n        }\n\n        return encodeRlp(fields);\n    }\n\n    // @TODO: We should probably check that tx.signature, chainId, and sig\n    //        match but that logic could break existing code, so schedule\n    //        this for the next major bump.\n\n    // Compute the EIP-155 v\n    let v = BigInt(27 + sig.yParity);\n    if (chainId !== BN_0) {\n        v = Signature.getChainIdV(chainId, sig.v);\n    } else if (BigInt(sig.v) !== v) {\n        assertArgument(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n\n    // Add the signature\n    fields.push(toBeArray(v));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n\n    return encodeRlp(fields);\n}\n\nfunction _parseEipSignature(tx: TransactionLike, fields: Array<string>): void {\n    let yParity: number;\n    try {\n        yParity = handleNumber(fields[0], \"yParity\");\n        if (yParity !== 0 && yParity !== 1) { throw new Error(\"bad yParity\"); }\n    } catch (error) {\n        assertArgument(false, \"invalid yParity\", \"yParity\", fields[0]);\n    }\n\n    const r = zeroPadValue(fields[1], 32);\n    const s = zeroPadValue(fields[2], 32);\n\n    const signature = Signature.from({ r, s, yParity });\n    tx.signature = signature;\n}\n\nfunction _parseEip1559(data: Uint8Array): TransactionLike {\n    const fields: any = decodeRlp(getBytes(data).slice(1));\n\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12),\n        \"invalid field count for transaction type: 2\", \"data\", hexlify(data));\n\n    const tx: TransactionLike = {\n        type:                  2,\n        chainId:               handleUint(fields[0], \"chainId\"),\n        nonce:                 handleNumber(fields[1], \"nonce\"),\n        maxPriorityFeePerGas:  handleUint(fields[2], \"maxPriorityFeePerGas\"),\n        maxFeePerGas:          handleUint(fields[3], \"maxFeePerGas\"),\n        gasPrice:              null,\n        gasLimit:              handleUint(fields[4], \"gasLimit\"),\n        to:                    handleAddress(fields[5]),\n        value:                 handleUint(fields[6], \"value\"),\n        data:                  hexlify(fields[7]),\n        accessList:            handleAccessList(fields[8], \"accessList\"),\n    };\n\n    // Unsigned EIP-1559 Transaction\n    if (fields.length === 9) { return tx; }\n\n    //tx.hash = keccak256(data);\n\n    _parseEipSignature(tx, fields.slice(9));\n\n    return tx;\n}\n\nfunction _serializeEip1559(tx: Transaction, sig: null | Signature): string {\n    const fields: Array<any> = [\n        formatNumber(tx.chainId, \"chainId\"),\n        formatNumber(tx.nonce, \"nonce\"),\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(tx.gasLimit, \"gasLimit\"),\n        (tx.to || \"0x\"),\n        formatNumber(tx.value, \"value\"),\n        tx.data,\n        formatAccessList(tx.accessList || [ ])\n    ];\n\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n    }\n\n    return concat([ \"0x02\", encodeRlp(fields)]);\n}\n\nfunction _parseEip2930(data: Uint8Array): TransactionLike {\n    const fields: any = decodeRlp(getBytes(data).slice(1));\n\n    assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11),\n        \"invalid field count for transaction type: 1\", \"data\", hexlify(data));\n\n    const tx: TransactionLike = {\n        type:       1,\n        chainId:    handleUint(fields[0], \"chainId\"),\n        nonce:      handleNumber(fields[1], \"nonce\"),\n        gasPrice:   handleUint(fields[2], \"gasPrice\"),\n        gasLimit:   handleUint(fields[3], \"gasLimit\"),\n        to:         handleAddress(fields[4]),\n        value:      handleUint(fields[5], \"value\"),\n        data:       hexlify(fields[6]),\n        accessList: handleAccessList(fields[7], \"accessList\")\n    };\n\n    // Unsigned EIP-2930 Transaction\n    if (fields.length === 8) { return tx; }\n\n    //tx.hash = keccak256(data);\n\n    _parseEipSignature(tx, fields.slice(8));\n\n    return tx;\n}\n\nfunction _serializeEip2930(tx: Transaction, sig: null | Signature): string {\n    const fields: any = [\n        formatNumber(tx.chainId, \"chainId\"),\n        formatNumber(tx.nonce, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit, \"gasLimit\"),\n        (tx.to || \"0x\"),\n        formatNumber(tx.value, \"value\"),\n        tx.data,\n        formatAccessList(tx.accessList || [ ])\n    ];\n\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n    }\n\n    return concat([ \"0x01\", encodeRlp(fields)]);\n}\n\nfunction _parseEip4844(data: Uint8Array): TransactionLike {\n    let fields: any = decodeRlp(getBytes(data).slice(1));\n\n    let typeName = \"3\";\n\n    let blobs: null | Array<Blob> = null;\n\n    // Parse the network format\n    if (fields.length === 4 && Array.isArray(fields[0])) {\n        typeName = \"3 (network format)\";\n        const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];\n        assertArgument(Array.isArray(fBlobs), \"invalid network format: blobs not an array\", \"fields[1]\", fBlobs);\n        assertArgument(Array.isArray(fCommits), \"invalid network format: commitments not an array\", \"fields[2]\", fCommits);\n        assertArgument(Array.isArray(fProofs), \"invalid network format: proofs not an array\", \"fields[3]\", fProofs);\n        assertArgument(fBlobs.length === fCommits.length, \"invalid network format: blobs/commitments length mismatch\", \"fields\", fields);\n        assertArgument(fBlobs.length === fProofs.length, \"invalid network format: blobs/proofs length mismatch\", \"fields\", fields);\n\n        blobs = [ ];\n        for (let i = 0; i < fields[1].length; i++) {\n            blobs.push({\n                data: fBlobs[i],\n                commitment: fCommits[i],\n                proof: fProofs[i],\n            });\n        }\n\n        fields = fields[0];\n    }\n\n    assertArgument(Array.isArray(fields) && (fields.length === 11 || fields.length === 14),\n        `invalid field count for transaction type: ${ typeName }`, \"data\", hexlify(data));\n\n    const tx: TransactionLike = {\n        type:                  3,\n        chainId:               handleUint(fields[0], \"chainId\"),\n        nonce:                 handleNumber(fields[1], \"nonce\"),\n        maxPriorityFeePerGas:  handleUint(fields[2], \"maxPriorityFeePerGas\"),\n        maxFeePerGas:          handleUint(fields[3], \"maxFeePerGas\"),\n        gasPrice:              null,\n        gasLimit:              handleUint(fields[4], \"gasLimit\"),\n        to:                    handleAddress(fields[5]),\n        value:                 handleUint(fields[6], \"value\"),\n        data:                  hexlify(fields[7]),\n        accessList:            handleAccessList(fields[8], \"accessList\"),\n        maxFeePerBlobGas:      handleUint(fields[9], \"maxFeePerBlobGas\"),\n        blobVersionedHashes:   fields[10]\n    };\n\n    if (blobs) { tx.blobs = blobs; }\n\n    assertArgument(tx.to != null, `invalid address for transaction type: ${ typeName }`, \"data\", data);\n\n    assertArgument(Array.isArray(tx.blobVersionedHashes), \"invalid blobVersionedHashes: must be an array\", \"data\", data);\n    for (let i = 0; i < tx.blobVersionedHashes.length; i++) {\n        assertArgument(isHexString(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${ i }: must be length 32`, \"data\", data);\n    }\n\n    // Unsigned EIP-4844 Transaction\n    if (fields.length === 11) { return tx; }\n\n    // @TODO: Do we need to do this? This is only called internally\n    // and used to verify hashes; it might save time to not do this\n    //tx.hash = keccak256(concat([ \"0x03\", encodeRlp(fields) ]));\n\n    _parseEipSignature(tx, fields.slice(11));\n\n    return tx;\n}\n\nfunction _serializeEip4844(tx: Transaction, sig: null | Signature, blobs: null | Array<Blob>): string {\n    const fields: Array<any> = [\n        formatNumber(tx.chainId, \"chainId\"),\n        formatNumber(tx.nonce, \"nonce\"),\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(tx.gasLimit, \"gasLimit\"),\n        (tx.to || ZeroAddress),\n        formatNumber(tx.value, \"value\"),\n        tx.data,\n        formatAccessList(tx.accessList || [ ]),\n        formatNumber(tx.maxFeePerBlobGas || 0, \"maxFeePerBlobGas\"),\n        formatHashes(tx.blobVersionedHashes || [ ], \"blobVersionedHashes\")\n    ];\n\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n\n        // We have blobs; return the network wrapped format\n        if (blobs) {\n            return concat([\n                \"0x03\",\n                encodeRlp([\n                    fields,\n                    blobs.map((b) => b.data),\n                    blobs.map((b) => b.commitment),\n                    blobs.map((b) => b.proof),\n                ])\n            ]);\n        }\n\n    }\n\n    return concat([ \"0x03\", encodeRlp(fields)]);\n}\n\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */\nexport class Transaction implements TransactionLike<string> {\n    #type: null | number;\n    #to: null | string;\n    #data: string;\n    #nonce: number;\n    #gasLimit: bigint;\n    #gasPrice: null | bigint;\n    #maxPriorityFeePerGas: null | bigint;\n    #maxFeePerGas: null | bigint;\n    #value: bigint;\n    #chainId: bigint;\n    #sig: null | Signature;\n    #accessList: null | AccessList;\n    #maxFeePerBlobGas: null | bigint;\n    #blobVersionedHashes: null | Array<string>;\n    #kzg: null | KzgLibrary;\n    #blobs: null | Array<Blob>;\n\n    /**\n     *  The transaction type.\n     *\n     *  If null, the type will be automatically inferred based on\n     *  explicit properties.\n     */\n    get type(): null | number { return this.#type; }\n    set type(value: null | number | string) {\n        switch (value) {\n            case null:\n                this.#type = null;\n                break;\n            case 0: case \"legacy\":\n                this.#type = 0;\n                break;\n            case 1: case \"berlin\": case \"eip-2930\":\n                this.#type = 1;\n                break;\n            case 2: case \"london\": case \"eip-1559\":\n                this.#type = 2;\n                break;\n            case 3: case \"cancun\": case \"eip-4844\":\n                this.#type = 3;\n                break;\n            default:\n                assertArgument(false, \"unsupported transaction type\", \"type\", value);\n        }\n    }\n\n    /**\n     *  The name of the transaction type.\n     */\n    get typeName(): null | string {\n        switch (this.type) {\n            case 0: return \"legacy\";\n            case 1: return \"eip-2930\";\n            case 2: return \"eip-1559\";\n            case 3: return \"eip-4844\";\n        }\n\n        return null;\n    }\n\n    /**\n     *  The ``to`` address for the transaction or ``null`` if the\n     *  transaction is an ``init`` transaction.\n     */\n    get to(): null | string {\n        const value = this.#to;\n        if (value == null && this.type === 3) { return ZeroAddress; }\n        return value;\n    }\n    set to(value: null | string) {\n        this.#to = (value == null) ? null: getAddress(value);\n    }\n\n    /**\n     *  The transaction nonce.\n     */\n    get nonce(): number { return this.#nonce; }\n    set nonce(value: BigNumberish) { this.#nonce = getNumber(value, \"value\"); }\n\n    /**\n     *  The gas limit.\n     */\n    get gasLimit(): bigint { return this.#gasLimit; }\n    set gasLimit(value: BigNumberish) { this.#gasLimit = getBigInt(value); }\n\n    /**\n     *  The gas price.\n     *\n     *  On legacy networks this defines the fee that will be paid. On\n     *  EIP-1559 networks, this should be ``null``.\n     */\n    get gasPrice(): null | bigint {\n        const value = this.#gasPrice;\n        if (value == null && (this.type === 0 || this.type === 1)) { return BN_0; }\n        return value;\n    }\n    set gasPrice(value: null | BigNumberish) {\n        this.#gasPrice = (value == null) ? null: getBigInt(value, \"gasPrice\");\n    }\n\n    /**\n     *  The maximum priority fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */\n    get maxPriorityFeePerGas(): null | bigint {\n        const value = this.#maxPriorityFeePerGas;\n        if (value == null) {\n            if (this.type === 2 || this.type === 3) { return BN_0; }\n            return null;\n        }\n        return value;\n    }\n    set maxPriorityFeePerGas(value: null | BigNumberish) {\n        this.#maxPriorityFeePerGas = (value == null) ? null: getBigInt(value, \"maxPriorityFeePerGas\");\n    }\n\n    /**\n     *  The maximum total fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */\n    get maxFeePerGas(): null | bigint {\n        const value = this.#maxFeePerGas;\n        if (value == null) {\n            if (this.type === 2 || this.type === 3) { return BN_0; }\n            return null;\n        }\n        return value;\n    }\n    set maxFeePerGas(value: null | BigNumberish) {\n        this.#maxFeePerGas = (value == null) ? null: getBigInt(value, \"maxFeePerGas\");\n    }\n\n    /**\n     *  The transaction data. For ``init`` transactions this is the\n     *  deployment code.\n     */\n    get data(): string { return this.#data; }\n    set data(value: BytesLike) { this.#data = hexlify(value); }\n\n    /**\n     *  The amount of ether (in wei) to send in this transactions.\n     */\n    get value(): bigint { return this.#value; }\n    set value(value: BigNumberish) {\n        this.#value = getBigInt(value, \"value\");\n    }\n\n    /**\n     *  The chain ID this transaction is valid on.\n     */\n    get chainId(): bigint { return this.#chainId; }\n    set chainId(value: BigNumberish) { this.#chainId = getBigInt(value); }\n\n    /**\n     *  If signed, the signature for this transaction.\n     */\n    get signature(): null | Signature { return this.#sig || null; }\n    set signature(value: null | SignatureLike) {\n        this.#sig = (value == null) ? null: Signature.from(value);\n    }\n\n    /**\n     *  The access list.\n     *\n     *  An access list permits discounted (but pre-paid) access to\n     *  bytecode and state variable access within contract execution.\n     */\n    get accessList(): null | AccessList {\n        const value = this.#accessList || null;\n        if (value == null) {\n            if (this.type === 1 || this.type === 2 || this.type === 3) {\n                // @TODO: in v7, this should assign the value or become\n                // a live object itself, otherwise mutation is inconsistent\n                return [ ];\n            }\n            return null;\n        }\n        return value;\n    }\n    set accessList(value: null | AccessListish) {\n        this.#accessList = (value == null) ? null: accessListify(value);\n    }\n\n    /**\n     *  The max fee per blob gas for Cancun transactions.\n     */\n    get maxFeePerBlobGas(): null | bigint {\n        const value = this.#maxFeePerBlobGas;\n        if (value == null && this.type === 3) { return BN_0; }\n        return value;\n    }\n    set maxFeePerBlobGas(value: null | BigNumberish) {\n        this.#maxFeePerBlobGas = (value == null) ? null: getBigInt(value, \"maxFeePerBlobGas\");\n    }\n\n    /**\n     *  The BLOb versioned hashes for Cancun transactions.\n     */\n    get blobVersionedHashes(): null | Array<string> {\n        // @TODO: Mutation is inconsistent; if unset, the returned value\n        // cannot mutate the object, if set it can\n        let value = this.#blobVersionedHashes;\n        if (value == null && this.type === 3) { return [ ]; }\n        return value;\n    }\n    set blobVersionedHashes(value: null | Array<string>) {\n        if (value != null) {\n            assertArgument(Array.isArray(value), \"blobVersionedHashes must be an Array\", \"value\", value);\n            value = value.slice();\n            for (let i = 0; i < value.length; i++) {\n                assertArgument(isHexString(value[i], 32), \"invalid blobVersionedHash\", `value[${ i }]`, value[i]);\n            }\n        }\n        this.#blobVersionedHashes = value;\n    }\n\n    /**\n     *  The BLObs for the Transaction, if any.\n     *\n     *  If ``blobs`` is non-``null``, then the [[seriailized]]\n     *  will return the network formatted sidecar, otherwise it\n     *  will return the standard [[link-eip-2718]] payload. The\n     *  [[unsignedSerialized]] is unaffected regardless.\n     *\n     *  When setting ``blobs``, either fully valid [[Blob]] objects\n     *  may be specified (i.e. correctly padded, with correct\n     *  committments and proofs) or a raw [[BytesLike]] may\n     *  be provided.\n     *\n     *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**\n     *  be already set. The blob will be correctly padded and the\n     *  [[KzgLibrary]] will be used to compute the committment and\n     *  proof for the blob.\n     *\n     *  A BLOb is a sequence of field elements, each of which must\n     *  be within the BLS field modulo, so some additional processing\n     *  may be required to encode arbitrary data to ensure each 32 byte\n     *  field is within the valid range.\n     *\n     *  Setting this automatically populates [[blobVersionedHashes]],\n     *  overwriting any existing values. Setting this to ``null``\n     *  does **not** remove the [[blobVersionedHashes]], leaving them\n     *  present.\n     */\n    get blobs(): null | Array<Blob> {\n        if (this.#blobs == null) { return null; }\n        return this.#blobs.map((b) => Object.assign({ }, b));\n    }\n    set blobs(_blobs: null | Array<BlobLike>) {\n        if (_blobs == null) {\n            this.#blobs = null;\n            return;\n        }\n\n        const blobs: Array<Blob> = [ ];\n        const versionedHashes: Array<string> = [ ];\n        for (let i = 0; i < _blobs.length; i++) {\n            const blob = _blobs[i];\n\n            if (isBytesLike(blob)) {\n                assert(this.#kzg, \"adding a raw blob requires a KZG library\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"set blobs()\"\n                });\n\n                let data = getBytes(blob);\n                assertArgument(data.length <= BLOB_SIZE, \"blob is too large\", `blobs[${ i }]`, blob);\n\n                // Pad blob if necessary\n                if (data.length !== BLOB_SIZE) {\n                    const padded = new Uint8Array(BLOB_SIZE);\n                    padded.set(data);\n                    data = padded;\n                }\n\n                const commit = this.#kzg.blobToKzgCommitment(data);\n                const proof = hexlify(this.#kzg.computeBlobKzgProof(data, commit));\n\n                blobs.push({\n                    data: hexlify(data),\n                    commitment: hexlify(commit),\n                    proof\n                });\n                versionedHashes.push(getVersionedHash(1, commit));\n\n            } else {\n                const commit = hexlify(blob.commitment);\n                blobs.push({\n                    data: hexlify(blob.data),\n                    commitment: commit,\n                    proof: hexlify(blob.proof)\n                });\n                versionedHashes.push(getVersionedHash(1, commit));\n            }\n        }\n\n        this.#blobs = blobs;\n        this.#blobVersionedHashes = versionedHashes;\n    }\n\n    get kzg(): null | KzgLibrary { return this.#kzg; }\n    set kzg(kzg: null | KzgLibrary) {\n        this.#kzg = kzg;\n    }\n\n    /**\n     *  Creates a new Transaction with default values.\n     */\n    constructor() {\n        this.#type = null;\n        this.#to = null;\n        this.#nonce = 0;\n        this.#gasLimit = BN_0;\n        this.#gasPrice = null;\n        this.#maxPriorityFeePerGas = null;\n        this.#maxFeePerGas = null;\n        this.#data = \"0x\";\n        this.#value = BN_0;\n        this.#chainId = BN_0;\n        this.#sig = null;\n        this.#accessList = null;\n        this.#maxFeePerBlobGas = null;\n        this.#blobVersionedHashes = null;\n        this.#blobs = null;\n        this.#kzg = null;\n    }\n\n    /**\n     *  The transaction hash, if signed. Otherwise, ``null``.\n     */\n    get hash(): null | string {\n        if (this.signature == null) { return null; }\n        return keccak256(this.#getSerialized(true, false));\n    }\n\n    /**\n     *  The pre-image hash of this transaction.\n     *\n     *  This is the digest that a [[Signer]] must sign to authorize\n     *  this transaction.\n     */\n    get unsignedHash(): string {\n        return keccak256(this.unsignedSerialized);\n    }\n\n    /**\n     *  The sending address, if signed. Otherwise, ``null``.\n     */\n    get from(): null | string {\n        if (this.signature == null) { return null; }\n        return recoverAddress(this.unsignedHash, this.signature);\n    }\n\n    /**\n     *  The public key of the sender, if signed. Otherwise, ``null``.\n     */\n    get fromPublicKey(): null | string {\n        if (this.signature == null) { return null; }\n        return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n    }\n\n    /**\n     *  Returns true if signed.\n     *\n     *  This provides a Type Guard that properties requiring a signed\n     *  transaction are non-null.\n     */\n    isSigned(): this is (Transaction & { type: number, typeName: string, from: string, signature: Signature }) {\n        return this.signature != null;\n    }\n\n    #getSerialized(signed: boolean, sidecar: boolean): string {\n        assert(!signed || this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\"});\n\n        const sig = signed ? this.signature: null;\n        switch (this.inferType()) {\n            case 0:\n                return _serializeLegacy(this, sig);\n            case 1:\n                return _serializeEip2930(this, sig);\n            case 2:\n                return _serializeEip1559(this, sig);\n            case 3:\n                return _serializeEip4844(this, sig, sidecar ? this.blobs: null);\n        }\n\n        assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\n    }\n\n    /**\n     *  The serialized transaction.\n     *\n     *  This throws if the transaction is unsigned. For the pre-image,\n     *  use [[unsignedSerialized]].\n     */\n    get serialized(): string {\n        return this.#getSerialized(true, true);\n    }\n\n    /**\n     *  The transaction pre-image.\n     *\n     *  The hash of this is the digest which needs to be signed to\n     *  authorize this transaction.\n     */\n    get unsignedSerialized(): string {\n        return this.#getSerialized(false, false);\n    }\n\n    /**\n     *  Return the most \"likely\" type; currently the highest\n     *  supported transaction type.\n     */\n    inferType(): number {\n        const types = this.inferTypes();\n\n        // Prefer London (EIP-1559) over Cancun (BLOb)\n        if (types.indexOf(2) >= 0) { return 2; }\n\n        // Return the highest inferred type\n        return <number>(types.pop());\n    }\n\n    /**\n     *  Validates the explicit properties and returns a list of compatible\n     *  transaction types.\n     */\n    inferTypes(): Array<number> {\n\n        // Checks that there are no conflicting properties set\n        const hasGasPrice = this.gasPrice != null;\n        const hasFee = (this.maxFeePerGas != null || this.maxPriorityFeePerGas != null);\n        const hasAccessList = (this.accessList != null);\n        const hasBlob = (this.#maxFeePerBlobGas != null || this.#blobVersionedHashes);\n\n        //if (hasGasPrice && hasFee) {\n        //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n        //}\n\n        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n            assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", { value: this });\n        }\n\n        //if (this.type === 2 && hasGasPrice) {\n        //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n        //}\n\n        assert(!hasFee || (this.type !== 0 && this.type !== 1), \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", { value: this });\n        assert(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", { value: this })\n\n        const types: Array<number> = [ ];\n\n        // Explicit type\n        if (this.type != null) {\n            types.push(this.type);\n\n        } else {\n            if (hasFee) {\n                types.push(2);\n            } else if (hasGasPrice) {\n                types.push(1);\n                if (!hasAccessList) { types.push(0); }\n            } else if (hasAccessList) {\n                types.push(1);\n                types.push(2);\n            } else if (hasBlob && this.to) {\n                types.push(3);\n            } else {\n                types.push(0);\n                types.push(1);\n                types.push(2);\n                types.push(3);\n            }\n        }\n\n        types.sort();\n\n        return types;\n    }\n\n    /**\n     *  Returns true if this transaction is a legacy transaction (i.e.\n     *  ``type === 0``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isLegacy(): this is (Transaction & { type: 0, gasPrice: bigint }) {\n        return (this.type === 0);\n    }\n\n    /**\n     *  Returns true if this transaction is berlin hardform transaction (i.e.\n     *  ``type === 1``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isBerlin(): this is (Transaction & { type: 1, gasPrice: bigint, accessList: AccessList }) {\n        return (this.type === 1);\n    }\n\n    /**\n     *  Returns true if this transaction is london hardform transaction (i.e.\n     *  ``type === 2``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isLondon(): this is (Transaction & { type: 2, accessList: AccessList, maxFeePerGas: bigint, maxPriorityFeePerGas: bigint }) {\n        return (this.type === 2);\n    }\n\n    /**\n     *  Returns true if this transaction is an [[link-eip-4844]] BLOB\n     *  transaction.\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isCancun(): this is (Transaction & { type: 3, to: string, accessList: AccessList, maxFeePerGas: bigint, maxPriorityFeePerGas: bigint, maxFeePerBlobGas: bigint, blobVersionedHashes: Array<string> }) {\n        return (this.type === 3);\n    }\n\n    /**\n     *  Create a copy of this transaciton.\n     */\n    clone(): Transaction {\n        return Transaction.from(this);\n    }\n\n    /**\n     *  Return a JSON-friendly object.\n     */\n    toJSON(): any {\n        const s = (v: null | bigint) => {\n            if (v == null) { return null; }\n            return v.toString();\n        };\n\n        return {\n            type: this.type,\n            to: this.to,\n//            from: this.from,\n            data: this.data,\n            nonce: this.nonce,\n            gasLimit: s(this.gasLimit),\n            gasPrice: s(this.gasPrice),\n            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n            maxFeePerGas: s(this.maxFeePerGas),\n            value: s(this.value),\n            chainId: s(this.chainId),\n            sig: this.signature ? this.signature.toJSON(): null,\n            accessList: this.accessList\n        };\n    }\n\n    /**\n     *  Create a **Transaction** from a serialized transaction or a\n     *  Transaction-like object.\n     */\n    static from(tx?: string | TransactionLike<string>): Transaction {\n        if (tx == null) { return new Transaction(); }\n\n        if (typeof(tx) === \"string\") {\n            const payload = getBytes(tx);\n\n            if (payload[0] >= 0x7f) { // @TODO: > vs >= ??\n                return Transaction.from(_parseLegacy(payload));\n            }\n\n            switch(payload[0]) {\n                case 1: return Transaction.from(_parseEip2930(payload));\n                case 2: return Transaction.from(_parseEip1559(payload));\n                case 3: return Transaction.from(_parseEip4844(payload));\n            }\n            assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \"from\" });\n        }\n\n        const result = new Transaction();\n        if (tx.type != null) { result.type = tx.type; }\n        if (tx.to != null) { result.to = tx.to; }\n        if (tx.nonce != null) { result.nonce = tx.nonce; }\n        if (tx.gasLimit != null) { result.gasLimit = tx.gasLimit; }\n        if (tx.gasPrice != null) { result.gasPrice = tx.gasPrice; }\n        if (tx.maxPriorityFeePerGas != null) { result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas; }\n        if (tx.maxFeePerGas != null) { result.maxFeePerGas = tx.maxFeePerGas; }\n        if (tx.maxFeePerBlobGas != null) { result.maxFeePerBlobGas = tx.maxFeePerBlobGas; }\n        if (tx.data != null) { result.data = tx.data; }\n        if (tx.value != null) { result.value = tx.value; }\n        if (tx.chainId != null) { result.chainId = tx.chainId; }\n        if (tx.signature != null) { result.signature = Signature.from(tx.signature); }\n        if (tx.accessList != null) { result.accessList = tx.accessList; }\n\n        // This will get overwritten by blobs, if present\n        if (tx.blobVersionedHashes != null) { result.blobVersionedHashes = tx.blobVersionedHashes; }\n\n        // Make sure we assign the kzg before assigning blobs, which\n        // require the library in the event raw blob data is provided.\n        if (tx.kzg != null) { result.kzg = tx.kzg; }\n        if (tx.blobs != null) { result.blobs = tx.blobs; }\n\n        if (tx.hash != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define '.hash'\", \"tx\", tx);\n            assertArgument(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n        }\n\n        if (tx.from != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define '.from'\", \"tx\", tx);\n            assertArgument(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n        }\n\n        return result;\n    }\n}\n","/**\n *  The [Base58 Encoding](link-base58) scheme allows a **numeric** value\n *  to be encoded as a compact string using a radix of 58 using only\n *  alpha-numeric characters. Confusingly similar characters are omitted\n *  (i.e. ``\"l0O\"``).\n *\n *  Note that Base58 encodes a **numeric** value, not arbitrary bytes,\n *  since any zero-bytes on the left would get removed. To mitigate this\n *  issue most schemes that use Base58 choose specific high-order values\n *  to ensure non-zero prefixes.\n *\n *  @_subsection: api/utils:Base58 Encoding [about-base58]\n */\n\nimport { getBytes } from \"./data.js\";\nimport { assertArgument } from \"./errors.js\";\nimport { toBigInt } from \"./maths.js\";\n\nimport type { BytesLike } from \"./index.js\";\n\n\nconst Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nlet Lookup: null | Record<string, bigint> = null;\n\nfunction getAlpha(letter: string): bigint {\n    if (Lookup == null) {\n        Lookup = { };\n        for (let i = 0; i < Alphabet.length; i++) {\n            Lookup[Alphabet[i]] = BigInt(i);\n        }\n    }\n    const result = Lookup[letter];\n    assertArgument(result != null, `invalid base58 value`, \"letter\", letter);\n    return result;\n}\n\n\nconst BN_0 = BigInt(0);\nconst BN_58 = BigInt(58);\n\n/**\n *  Encode %%value%% as a Base58-encoded string.\n */\nexport function encodeBase58(_value: BytesLike): string {\n    const bytes = getBytes(_value);\n\n    let value = toBigInt(bytes);\n    let result = \"\";\n    while (value) {\n        result = Alphabet[Number(value % BN_58)] + result;\n        value /= BN_58;\n    }\n\n    // Account for leading padding zeros\n    for (let i = 0; i < bytes.length; i++) {\n        if (bytes[i]) { break; }\n        result = Alphabet[0] + result;\n    }\n\n    return result;\n}\n\n/**\n *  Decode the Base58-encoded %%value%%.\n */\nexport function decodeBase58(value: string): bigint {\n    let result = BN_0;\n    for (let i = 0; i < value.length; i++) {\n        result *= BN_58;\n        result += getAlpha(value[i]);\n    }\n    return result;\n}\n","/**\n *  ENS is a service which allows easy-to-remember names to map to\n *  network addresses.\n *\n *  @_section: api/providers/ens-resolver:ENS Resolver  [about-ens-rsolver]\n */\n\nimport { getAddress } from \"../address/index.js\";\nimport { ZeroAddress } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { dnsEncode, namehash } from \"../hash/index.js\";\nimport {\n    hexlify, isHexString, toBeHex,\n    defineProperties, encodeBase58,\n    assert, assertArgument, isError,\n    FetchRequest\n} from \"../utils/index.js\";\n\nimport type { FunctionFragment } from \"../abi/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport type { AbstractProvider, AbstractProviderPlugin } from \"./abstract-provider.js\";\nimport type { EnsPlugin } from \"./plugins-network.js\";\nimport type { Provider } from \"./provider.js\";\n\n// @TODO: This should use the fetch-data:ipfs gateway\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        assertArgument(false, \"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\n/**\n *  The type of data found during a steip during avatar resolution.\n */\nexport type AvatarLinkageType = \"name\" | \"avatar\" | \"!avatar\" | \"url\" | \"data\" | \"ipfs\" |\n    \"erc721\" | \"erc1155\" | \"!erc721-caip\" | \"!erc1155-caip\" |\n    \"!owner\" | \"owner\" | \"!balance\" | \"balance\" |\n    \"metadata-url-base\" | \"metadata-url-expanded\" | \"metadata-url\" | \"!metadata-url\" |\n    \"!metadata\" | \"metadata\" |\n    \"!imageUrl\" | \"imageUrl-ipfs\" | \"imageUrl\" | \"!imageUrl-ipfs\";\n\n/**\n *  An individual record for each step during avatar resolution.\n */\nexport interface AvatarLinkage {\n    /**\n     *  The type of linkage.\n     */\n    type: AvatarLinkageType;\n\n    /**\n     *  The linkage value.\n     */\n    value: string;\n};\n\n/**\n *  When resolving an avatar for an ENS name, there are many\n *  steps involved, fetching metadata, validating results, et cetera.\n *\n *  Some applications may wish to analyse this data, or use this data\n *  to diagnose promblems, so an **AvatarResult** provides details of\n *  each completed step during avatar resolution.\n */\nexport interface AvatarResult {\n    /**\n     *  How the [[url]] was arrived at, resolving the many steps required\n     *  for an avatar URL.\n     */\n    linkage: Array<AvatarLinkage>;\n\n    /**\n     *  The avatar URL or null if the avatar was not set, or there was\n     *  an issue during validation (such as the address not owning the\n     *  avatar or a metadata error).\n     */\n    url: null | string;\n};\n\n/**\n *  A provider plugin super-class for processing multicoin address types.\n */\nexport abstract class MulticoinProviderPlugin implements AbstractProviderPlugin {\n    /**\n     *  The name.\n     */\n    readonly name!: string;\n\n    /**\n     *  Creates a new **MulticoinProviderPluing** for %%name%%.\n     */\n    constructor(name: string) {\n        defineProperties<MulticoinProviderPlugin>(this, { name });\n    }\n\n    connect(proivder: Provider): MulticoinProviderPlugin {\n        return this;\n    }\n\n    /**\n     *  Returns ``true`` if %%coinType%% is supported by this plugin.\n     */\n    supportsCoinType(coinType: number): boolean {\n        return false;\n    }\n\n    /**\n     *  Resolves to the encoded %%address%% for %%coinType%%.\n     */\n    async encodeAddress(coinType: number, address: string): Promise<string> {\n        throw new Error(\"unsupported coin\");\n    }\n\n    /**\n     *  Resolves to the decoded %%data%% for %%coinType%%.\n     */\n    async decodeAddress(coinType: number, data: BytesLike): Promise<string> {\n        throw new Error(\"unsupported coin\");\n    }\n}\n\nconst BasicMulticoinPluginId = \"org.ethers.plugins.provider.BasicMulticoin\";\n\n/**\n *  A **BasicMulticoinProviderPlugin** provides service for common\n *  coin types, which do not require additional libraries to encode or\n *  decode.\n */\nexport class BasicMulticoinProviderPlugin extends MulticoinProviderPlugin {\n    /**\n     *  Creates a new **BasicMulticoinProviderPlugin**.\n     */\n    constructor() {\n        super(BasicMulticoinPluginId);\n    }\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\n/**\n *  A connected object to a resolved ENS name resolver, which can be\n *  used to query additional details.\n */\nexport class EnsResolver {\n    /**\n     *  The connected provider.\n     */\n    provider!: AbstractProvider;\n\n    /**\n     *  The address of the resolver.\n     */\n    address!: string;\n\n    /**\n     *  The name this resolver was resolved against.\n     */\n    name!: string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    #supports2544: null | Promise<boolean>;\n\n    #resolver: Contract;\n\n    constructor(provider: AbstractProvider, address: string, name: string) {\n        defineProperties<EnsResolver>(this, { provider, address, name });\n        this.#supports2544 = null;\n\n        this.#resolver = new Contract(address, [\n            \"function supportsInterface(bytes4) view returns (bool)\",\n            \"function resolve(bytes, bytes) view returns (bytes)\",\n            \"function addr(bytes32) view returns (address)\",\n            \"function addr(bytes32, uint) view returns (bytes)\",\n            \"function text(bytes32, string) view returns (string)\",\n            \"function contenthash(bytes32) view returns (bytes)\",\n        ], provider);\n\n    }\n\n    /**\n     *  Resolves to true if the resolver supports wildcard resolution.\n     */\n    async supportsWildcard(): Promise<boolean> {\n        if (this.#supports2544 == null) {\n            this.#supports2544 = (async () => {\n                try {\n                    return await this.#resolver.supportsInterface(\"0x9061b923\");\n                } catch (error) {\n                    // Wildcard resolvers must understand supportsInterface\n                    // and return true.\n                    if (isError(error, \"CALL_EXCEPTION\")) { return false; }\n\n                    // Let future attempts try again...\n                    this.#supports2544 = null;\n\n                    throw error;\n                }\n            })();\n        }\n\n        return await this.#supports2544;\n    }\n\n    async #fetch(funcName: string, params?: Array<any>): Promise<null | any> {\n        params = (params || []).slice();\n        const iface = this.#resolver.interface;\n\n        // The first parameters is always the nodehash\n        params.unshift(namehash(this.name))\n\n        let fragment: null | FunctionFragment = null;\n        if (await this.supportsWildcard()) {\n            fragment = iface.getFunction(funcName);\n            assert(fragment, \"missing fragment\", \"UNKNOWN_ERROR\", {\n                info: { funcName }\n            });\n\n            params = [\n                dnsEncode(this.name, 255),\n                iface.encodeFunctionData(fragment, params)\n            ];\n\n            funcName = \"resolve(bytes,bytes)\";\n        }\n\n        params.push({\n            enableCcipRead: true\n        });\n\n        try {\n            const result = await this.#resolver[funcName](...params);\n\n            if (fragment) {\n                return iface.decodeFunctionResult(fragment, result)[0];\n            }\n\n            return result;\n        } catch (error: any) {\n            if (!isError(error, \"CALL_EXCEPTION\")) { throw error; }\n        }\n\n        return null;\n    }\n\n    /**\n     *  Resolves to the address for %%coinType%% or null if the\n     *  provided %%coinType%% has not been configured.\n     */\n    async getAddress(coinType?: number): Promise<null | string> {\n        if (coinType == null) { coinType = 60; }\n        if (coinType === 60) {\n            try {\n                const result = await this.#fetch(\"addr(bytes32)\");\n\n                // No address\n                if (result == null || result === ZeroAddress) { return null; }\n\n                return result;\n            } catch (error: any) {\n                if (isError(error, \"CALL_EXCEPTION\")) { return null; }\n                throw error;\n            }\n        }\n\n        // Try decoding its EVM canonical chain as an EVM chain address first\n        if (coinType >= 0 && coinType < 0x80000000) {\n            let ethCoinType = coinType + 0x80000000;\n\n            const data = await this.#fetch(\"addr(bytes32,uint)\", [ ethCoinType ]);\n            if (isHexString(data, 20)) { return getAddress(data); }\n        }\n\n        let coinPlugin: null | MulticoinProviderPlugin = null;\n        for (const plugin of this.provider.plugins) {\n            if (!(plugin instanceof MulticoinProviderPlugin)) { continue; }\n            if (plugin.supportsCoinType(coinType)) {\n                coinPlugin = plugin;\n                break;\n            }\n        }\n\n        if (coinPlugin == null) { return null; }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const data = await this.#fetch(\"addr(bytes32,uint)\", [ coinType ]);\n\n        // No address\n        if (data == null || data === \"0x\") { return null; }\n\n        // Compute the address\n        const address = await coinPlugin.decodeAddress(coinType, data);\n\n        if (address != null) { return address; }\n\n        assert(false, `invalid coin data`, \"UNSUPPORTED_OPERATION\", {\n            operation: `getAddress(${ coinType })`,\n            info: { coinType, data }\n        });\n    }\n\n    /**\n     *  Resolves to the EIP-634 text record for %%key%%, or ``null``\n     *  if unconfigured.\n     */\n    async getText(key: string): Promise<null | string> {\n        const data = await this.#fetch(\"text(bytes32,string)\", [ key ]);\n        if (data == null || data === \"0x\") { return null; }\n        return data;\n    }\n\n    /**\n     *  Rsolves to the content-hash or ``null`` if unconfigured.\n     */\n    async getContentHash(): Promise<null | string> {\n        // keccak256(\"contenthash()\")\n        const data = await this.#fetch(\"contenthash(bytes32)\");\n\n        // No contenthash\n        if (data == null || data === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: 70=DAG-PB, 72=libp2p-key)\n        const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const scheme = (ipfs[1] === \"e3010170\") ? \"ipfs\": \"ipns\";\n            const length = parseInt(ipfs[4], 16);\n            if (ipfs[5].length === length * 2) {\n                return `${ scheme }:/\\/${ encodeBase58(\"0x\" + ipfs[2])}`;\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm && swarm[1].length === 64) {\n            return `bzz:/\\/${ swarm[1] }`;\n        }\n\n        assert(false, `invalid or unsupported content hash data`, \"UNSUPPORTED_OPERATION\", {\n            operation: \"getContentHash()\",\n            info: { data }\n        });\n    }\n\n    /**\n     *  Resolves to the avatar url or ``null`` if the avatar is either\n     *  unconfigured or incorrectly configured (e.g. references an NFT\n     *  not owned by the address).\n     *\n     *  If diagnosing issues with configurations, the [[_getAvatar]]\n     *  method may be useful.\n     */\n    async getAvatar(): Promise<null | string> {\n        const avatar = await this._getAvatar();\n        return avatar.url;\n    }\n\n    /**\n     *  When resolving an avatar, there are many steps involved, such\n     *  fetching metadata and possibly validating ownership of an\n     *  NFT.\n     *\n     *  This method can be used to examine each step and the value it\n     *  was working from.\n     */\n    async _getAvatar(): Promise<AvatarResult> {\n        const linkage: Array<AvatarLinkage> = [ { type: \"name\", value: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) {\n                linkage.push({ type: \"!avatar\", value: \"\" });\n                return { url: null, linkage };\n            }\n            linkage.push({ type: \"avatar\", value: avatar });\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                    case \"data\":\n                        linkage.push({ type: \"url\", value: avatar });\n                        return { linkage, url: avatar };\n                    case \"ipfs\": {\n                        const url = getIpfsLink(avatar);\n                        linkage.push({ type: \"ipfs\", value: avatar });\n                        linkage.push({ type: \"url\", value: url });\n                        return { linkage, url };\n                    }\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"tokenURI(uint256)\": \"uri(uint256)\";\n                        linkage.push({ type: scheme, value: avatar });\n\n                        // The owner of this name\n                        const owner = await this.getAddress();\n                        if (owner == null) {\n                            linkage.push({ type: \"!owner\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) {\n                            linkage.push({ type: <any>`!${ scheme }caip`, value: (match[2] || \"\") });\n                            return { url: null, linkage };\n                        }\n\n                        const tokenId = comps[1];\n\n                        const contract = new Contract(comps[0], [\n                            // ERC-721\n                            \"function tokenURI(uint) view returns (string)\",\n                            \"function ownerOf(uint) view returns (address)\",\n\n                            // ERC-1155\n                            \"function uri(uint) view returns (string)\",\n                            \"function balanceOf(address, uint256) view returns (uint)\"\n                        ], this.provider);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            const tokenOwner = await contract.ownerOf(tokenId);\n\n                            if (owner !== tokenOwner) {\n                                linkage.push({ type: \"!owner\", value: tokenOwner });\n                                return { url: null, linkage };\n                            }\n                            linkage.push({ type: \"owner\", value: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            const balance = await contract.balanceOf(owner, tokenId);\n                            if (!balance) {\n                                linkage.push({ type: \"!balance\", value: \"0\" });\n                                return { url: null, linkage };\n                            }\n                            linkage.push({ type: \"balance\", value: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        let metadataUrl = await contract[selector](tokenId);\n                        if (metadataUrl == null || metadataUrl === \"0x\") {\n                            linkage.push({ type: \"!metadata-url\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n\n                        linkage.push({ type: \"metadata-url-base\", value: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", toBeHex(tokenId, 32).substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", value: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n                        linkage.push({ type: \"metadata-url\", value: metadataUrl });\n\n                        // Get the token metadata\n                        let metadata: any = { };\n                        const response = await (new FetchRequest(metadataUrl)).send();\n                        response.assertOk();\n\n                        try {\n                            metadata = response.bodyJson;\n                        } catch (error) {\n                            try {\n                                linkage.push({ type: \"!metadata\", value: response.bodyText });\n                            } catch (error) {\n                                const bytes = response.body;\n                                if (bytes) {\n                                    linkage.push({ type: \"!metadata\", value: hexlify(bytes) });\n                                }\n                                return { url: null, linkage };\n                            }\n                            return { url: null, linkage };\n                        }\n\n                        if (!metadata) {\n                            linkage.push({ type: \"!metadata\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n\n                        linkage.push({ type: \"metadata\", value: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") {\n                            linkage.push({ type: \"!imageUrl\", value: \"\" });\n                            return { url: null, linkage };\n                        }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) {\n                                linkage.push({ type: \"!imageUrl-ipfs\", value: imageUrl });\n                                return { url: null, linkage };\n                            }\n\n                            linkage.push({ type: \"imageUrl-ipfs\", value: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", value: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return { linkage, url: null };\n    }\n\n    static async getEnsAddress(provider: Provider): Promise<string> {\n        const network = await provider.getNetwork();\n\n        const ensPlugin = network.getPlugin<EnsPlugin>(\"org.ethers.plugins.network.Ens\");\n\n        // No ENS...\n        assert(ensPlugin, \"network does not support ENS\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"getEnsAddress\", info: { network } });\n\n        return ensPlugin.address;\n    }\n\n    static async #getResolver(provider: Provider, name: string): Promise<null | string> {\n        const ensAddr = await EnsResolver.getEnsAddress(provider);\n\n        try {\n            const contract = new Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], provider);\n\n            const addr = await contract.resolver(namehash(name), {\n                enableCcipRead: true\n            });\n\n            if (addr === ZeroAddress) { return null; }\n            return addr;\n\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32),\n            // so probably a link error\n            throw error;\n        }\n\n        return null;\n    }\n\n    /**\n     *  Resolve to the ENS resolver for %%name%% using %%provider%% or\n     *  ``null`` if unconfigured.\n     */\n    static async fromName(provider: AbstractProvider, name: string): Promise<null | EnsResolver> {\n\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await EnsResolver.#getResolver(provider, currentName);\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new EnsResolver(provider, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n    }\n}\n","/**\n *  @_ignore\n */\nimport { getAddress, getCreateAddress } from \"../address/index.js\";\nimport { Signature } from \"../crypto/index.js\"\nimport { accessListify } from \"../transaction/index.js\";\nimport {\n    getBigInt, getNumber, hexlify, isHexString, zeroPadValue,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport type {\n    BlockParams, LogParams,\n    TransactionReceiptParams, TransactionResponseParams,\n} from \"./formatting.js\";\n\n\nconst BN_0 = BigInt(0);\n\nexport type FormatFunc = (value: any) => any;\n\nexport function allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n    return (function(value: any) {\n        if (value == null) { return nullValue; }\n        return format(value);\n    });\n}\n\nexport function arrayOf(format: FormatFunc, allowNull?: boolean): FormatFunc {\n    return ((array: any) => {\n        if (allowNull && array == null) { return null; }\n        if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n        return array.map((i) => format(i));\n    });\n}\n\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nexport function object(format: Record<string, FormatFunc>, altNames?: Record<string, Array<string>>): FormatFunc {\n    return ((value: any) => {\n        const result: any = { };\n        for (const key in format) {\n            let srcKey = key;\n            if (altNames && key in altNames && !(srcKey in value)) {\n                for (const altKey of altNames[key]) {\n                    if (altKey in value) {\n                        srcKey = altKey;\n                        break;\n                    }\n                }\n            }\n\n            try {\n                const nv = format[key](value[srcKey]);\n                if (nv !== undefined) { result[key] = nv; }\n            } catch (error) {\n                const message = (error instanceof Error) ? error.message: \"not-an-error\";\n                assert(false, `invalid value for value.${ key } (${ message })`, \"BAD_DATA\", { value })\n            }\n        }\n        return result;\n    });\n}\n\nexport function formatBoolean(value: any): boolean {\n    switch (value) {\n        case true: case \"true\":\n            return true;\n        case false: case \"false\":\n            return false;\n    }\n    assertArgument(false, `invalid boolean; ${ JSON.stringify(value) }`, \"value\", value);\n}\n\nexport function formatData(value: string): string {\n    assertArgument(isHexString(value, true), \"invalid data\", \"value\", value);\n    return value;\n}\n\nexport function formatHash(value: any): string {\n    assertArgument(isHexString(value, 32), \"invalid hash\", \"value\", value);\n    return value;\n}\n\nexport function formatUint256(value: any): string {\n    if (!isHexString(value)) {\n        throw new Error(\"invalid uint256\");\n    }\n    return zeroPadValue(value, 32);\n}\n\nconst _formatLog = object({\n    address: getAddress,\n    blockHash: formatHash,\n    blockNumber: getNumber,\n    data: formatData,\n    index: getNumber,\n    removed: allowNull(formatBoolean, false),\n    topics: arrayOf(formatHash),\n    transactionHash: formatHash,\n    transactionIndex: getNumber,\n}, {\n    index: [ \"logIndex\" ]\n});\n\nexport function formatLog(value: any): LogParams {\n    return _formatLog(value);\n}\n\nconst _formatBlock = object({\n    hash: allowNull(formatHash),\n    parentHash: formatHash,\n    parentBeaconBlockRoot: allowNull(formatHash, null),\n\n    number: getNumber,\n\n    timestamp: getNumber,\n    nonce: allowNull(formatData),\n    difficulty: getBigInt,\n\n    gasLimit: getBigInt,\n    gasUsed: getBigInt,\n\n    stateRoot: allowNull(formatHash, null),\n    receiptsRoot: allowNull(formatHash, null),\n\n    blobGasUsed: allowNull(getBigInt, null),\n    excessBlobGas: allowNull(getBigInt, null),\n\n    miner: allowNull(getAddress),\n    prevRandao: allowNull(formatHash, null),\n    extraData: formatData,\n\n    baseFeePerGas: allowNull(getBigInt)\n}, {\n    prevRandao: [ \"mixHash\" ]\n});\n\nexport function formatBlock(value: any): BlockParams {\n    const result = _formatBlock(value);\n    result.transactions = value.transactions.map((tx: string | TransactionResponseParams) => {\n        if (typeof(tx) === \"string\") { return tx; }\n        return formatTransactionResponse(tx);\n    });\n    return result;\n}\n\nconst _formatReceiptLog = object({\n    transactionIndex: getNumber,\n    blockNumber: getNumber,\n    transactionHash: formatHash,\n    address: getAddress,\n    topics: arrayOf(formatHash),\n    data: formatData,\n    index: getNumber,\n    blockHash: formatHash,\n}, {\n    index: [ \"logIndex\" ]\n});\n\nexport function formatReceiptLog(value: any): LogParams {\n    return _formatReceiptLog(value);\n}\n\nconst _formatTransactionReceipt = object({\n    to: allowNull(getAddress, null),\n    from: allowNull(getAddress, null),\n    contractAddress: allowNull(getAddress, null),\n    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n    index: getNumber,\n    root: allowNull(hexlify),\n    gasUsed: getBigInt,\n    blobGasUsed: allowNull(getBigInt, null),\n    logsBloom: allowNull(formatData),\n    blockHash: formatHash,\n    hash: formatHash,\n    logs: arrayOf(formatReceiptLog),\n    blockNumber: getNumber,\n    //confirmations: allowNull(getNumber, null),\n    cumulativeGasUsed: getBigInt,\n    effectiveGasPrice: allowNull(getBigInt),\n    blobGasPrice: allowNull(getBigInt, null),\n    status: allowNull(getNumber),\n    type: allowNull(getNumber, 0)\n}, {\n    effectiveGasPrice: [ \"gasPrice\" ],\n    hash: [ \"transactionHash\" ],\n    index: [ \"transactionIndex\" ],\n});\n\nexport function formatTransactionReceipt(value: any): TransactionReceiptParams {\n    return _formatTransactionReceipt(value);\n}\n\nexport function formatTransactionResponse(value: any): TransactionResponseParams {\n\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (value.to && getBigInt(value.to) === BN_0) {\n        value.to = \"0x0000000000000000000000000000000000000000\";\n    }\n\n    const result = object({\n        hash: formatHash,\n\n        // Some nodes do not return this, usually test nodes (like Ganache)\n        index: allowNull(getNumber, undefined),\n\n        type: (value: any) => {\n            if (value === \"0x\" || value == null) { return 0; }\n            return getNumber(value);\n        },\n        accessList: allowNull(accessListify, null),\n        blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),\n\n        blockHash: allowNull(formatHash, null),\n        blockNumber: allowNull(getNumber, null),\n        transactionIndex: allowNull(getNumber, null),\n\n        from: getAddress,\n\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n        gasPrice: allowNull(getBigInt),\n        maxPriorityFeePerGas: allowNull(getBigInt),\n        maxFeePerGas: allowNull(getBigInt),\n        maxFeePerBlobGas: allowNull(getBigInt, null),\n\n        gasLimit: getBigInt,\n        to: allowNull(getAddress, null),\n        value: getBigInt,\n        nonce: getNumber,\n        data: formatData,\n\n        creates: allowNull(getAddress, null),\n\n        chainId: allowNull(getBigInt, null)\n    }, {\n        data: [ \"input\" ],\n        gasLimit: [ \"gas\" ],\n        index: [ \"transactionIndex\" ]\n    })(value);\n\n    // If to and creates are empty, populate the creates from the value\n    if (result.to == null && result.creates == null) {\n        result.creates = getCreateAddress(result);\n    }\n\n    // @TODO: Check fee data\n\n    // Add an access list to supported transaction types\n    if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n        result.accessList = [ ];\n    }\n\n    // Compute the signature\n    if (value.signature) {\n        result.signature = Signature.from(value.signature);\n    } else {\n        result.signature = Signature.from(value);\n    }\n\n    // Some backends omit ChainId on legacy transactions, but we can compute it\n    if (result.chainId == null) {\n        const chainId = result.signature.legacyChainId;\n        if (chainId != null) { result.chainId = chainId; }\n    }\n\n\n    // @TODO: check chainID\n    /*\n    if (value.chainId != null) {\n        let chainId = value.chainId;\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n\n    } else {\n        let chainId = value.networkId;\n\n        // geth-etc returns chainId\n        if (chainId == null && result.v == null) {\n            chainId = value.chainId;\n        }\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        if (typeof(chainId) !== \"number\" && result.v != null) {\n            chainId = (result.v - 35) / 2;\n            if (chainId < 0) { chainId = 0; }\n            chainId = parseInt(chainId);\n        }\n\n        if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n        result.chainId = chainId;\n    }\n    */\n\n    // 0x0000... should actually be null\n    if (result.blockHash && getBigInt(result.blockHash) === BN_0) {\n        result.blockHash = null;\n    }\n\n    return result;\n}\n","import { keccak256 } from \"../crypto/index.js\";\nimport {\n    concat, dataSlice, getBigInt, getBytes, encodeRlp, assertArgument\n} from \"../utils/index.js\";\n\nimport { getAddress } from \"./address.js\";\n\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\n\n\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n\n/**\n *  Returns the address that would result from a ``CREATE`` for %%tx%%.\n *\n *  This can be used to compute the address a contract will be\n *  deployed to by an EOA when sending a deployment transaction (i.e.\n *  when the ``to`` address is ``null``).\n *\n *  This can also be used to compute the address a contract will be\n *  deployed to by a contract, by using the contract's address as the\n *  ``to`` and the contract's nonce.\n *\n *  @example\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\";\n *    nonce = 5;\n *\n *    getCreateAddress({ from, nonce });\n *    //_result:\n */\nexport function getCreateAddress(tx: { from: string, nonce: BigNumberish }): string {\n    const from = getAddress(tx.from);\n    const nonce = getBigInt(tx.nonce, \"tx.nonce\");\n\n    let nonceHex = nonce.toString(16);\n    if (nonceHex === \"0\") {\n        nonceHex = \"0x\";\n    } else if (nonceHex.length % 2) {\n        nonceHex = \"0x0\" + nonceHex;\n    } else {\n        nonceHex = \"0x\" + nonceHex;\n    }\n\n    return getAddress(dataSlice(keccak256(encodeRlp([ from, nonceHex ])), 12));\n}\n\n/**\n *  Returns the address that would result from a ``CREATE2`` operation\n *  with the given %%from%%, %%salt%% and %%initCodeHash%%.\n *\n *  To compute the %%initCodeHash%% from a contract's init code, use\n *  the [[keccak256]] function.\n *\n *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].\n *\n *  @example\n *    // The address of the contract\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\"\n *\n *    // The salt\n *    salt = id(\"HelloWorld\")\n *\n *    // The hash of the initCode\n *    initCode = \"0x6394198df16000526103ff60206004601c335afa6040516060f3\";\n *    initCodeHash = keccak256(initCode)\n *\n *    getCreate2Address(from, salt, initCodeHash)\n *    //_result:\n */\nexport function getCreate2Address(_from: string, _salt: BytesLike, _initCodeHash: BytesLike): string {\n    const from = getAddress(_from);\n    const salt = getBytes(_salt, \"salt\");\n    const initCodeHash = getBytes(_initCodeHash, \"initCodeHash\");\n\n    assertArgument(salt.length === 32, \"salt must be 32 bytes\", \"salt\", _salt);\n\n    assertArgument(initCodeHash.length === 32, \"initCodeHash must be 32 bytes\", \"initCodeHash\", _initCodeHash);\n\n    return getAddress(dataSlice(keccak256(concat([ \"0xff\", from, salt, initCodeHash ])), 12))\n}\n","import { defineProperties } from \"../utils/properties.js\";\n\nimport { assertArgument } from \"../utils/index.js\";\n\nimport type { FeeData, Provider } from \"./provider.js\";\nimport type { FetchRequest } from \"../utils/fetch.js\";\n\n\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nexport class NetworkPlugin {\n    /**\n     *  The name of the plugin.\n     *\n     *  It is recommended to use reverse-domain-notation, which permits\n     *  unique names with a known authority as well as hierarchal entries.\n     */\n    readonly name!: string;\n\n    /**\n     *  Creates a new **NetworkPlugin**.\n     */\n    constructor(name: string) {\n        defineProperties<NetworkPlugin>(this, { name });\n    }\n\n    /**\n     *  Creates a copy of this plugin.\n     */\n    clone(): NetworkPlugin {\n        return new NetworkPlugin(this.name);\n    }\n\n//    validate(network: Network): NetworkPlugin {\n//        return this;\n//    }\n}\n\n\n/**\n *  The gas cost parameters for a [[GasCostPlugin]].\n */\nexport type GasCostParameters = {\n    /**\n     *  The transactions base fee.\n     */\n    txBase?: number;\n\n    /**\n     *  The fee for creating a new account.\n     */\n    txCreate?: number;\n\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    txDataZero?: number;\n\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    txDataNonzero?: number;\n\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    txAccessListStorageKey?: number;\n\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    txAccessListAddress?: number;\n};\n\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nexport class GasCostPlugin extends NetworkPlugin implements GasCostParameters {\n    /**\n     *  The block number to treat these values as valid from.\n     *\n     *  This allows a hardfork to have updated values included as well as\n     *  mulutiple hardforks to be supported.\n     */\n    readonly effectiveBlock!: number;\n\n    /**\n     *  The transactions base fee.\n     */\n    readonly txBase!: number;\n\n    /**\n     *  The fee for creating a new account.\n     */\n    readonly txCreate!: number;\n\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    readonly txDataZero!: number;\n\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    readonly txDataNonzero!: number;\n\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    readonly txAccessListStorageKey!: number;\n\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    readonly txAccessListAddress!: number;\n\n\n    /**\n     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n     *  latest block or another GasCostPlugin supercedes that block number,\n     *  with the associated %%costs%%.\n     */\n    constructor(effectiveBlock?: number, costs?: GasCostParameters) {\n        if (effectiveBlock == null) { effectiveBlock = 0; }\n        super(`org.ethers.network.plugins.GasCost#${ (effectiveBlock || 0) }`);\n\n        const props: Record<string, number> = { effectiveBlock };\n        function set(name: keyof GasCostParameters, nullish: number): void {\n            let value = (costs || { })[name];\n            if (value == null) { value = nullish; }\n            assertArgument(typeof(value) === \"number\", `invalud value for ${ name }`, \"costs\", costs);\n            props[name] = value;\n        }\n\n        set(\"txBase\", 21000);\n        set(\"txCreate\", 32000);\n        set(\"txDataZero\", 4);\n        set(\"txDataNonzero\", 16);\n        set(\"txAccessListStorageKey\", 1900);\n        set(\"txAccessListAddress\", 2400);\n\n        defineProperties<GasCostPlugin>(this, props);\n    }\n\n    clone(): GasCostPlugin {\n        return new GasCostPlugin(this.effectiveBlock, this);\n    }\n}\n\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nexport class EnsPlugin extends NetworkPlugin {\n\n    /**\n     *  The ENS Registrty Contract address.\n     */\n    readonly address!: string;\n\n    /**\n     *  The chain ID that the ENS contract lives on.\n     */\n    readonly targetNetwork!: number;\n\n    /**\n     *  Creates a new **EnsPlugin** connected to %%address%% on the\n     *  %%targetNetwork%%. The default ENS address and mainnet is used\n     *  if unspecified.\n     */\n    constructor(address?: null | string, targetNetwork?: null | number) {\n        super(\"org.ethers.plugins.network.Ens\");\n        defineProperties<EnsPlugin>(this, {\n            address: (address || EnsAddress),\n            targetNetwork: ((targetNetwork == null) ? 1: targetNetwork)\n        });\n    }\n\n    clone(): EnsPlugin {\n        return new EnsPlugin(this.address, this.targetNetwork);\n    }\n}\n\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n    readonly #feeDataFunc: (provider: Provider) => Promise<FeeData>;\n\n    /**\n     *  The fee data function provided to the constructor.\n     */\n    get feeDataFunc(): (provider: Provider) => Promise<FeeData> {\n        return this.#feeDataFunc;\n    }\n\n    /**\n     *  Creates a new **FeeDataNetworkPlugin**.\n     */\n    constructor(feeDataFunc: (provider: Provider) => Promise<FeeData>) {\n        super(\"org.ethers.plugins.network.FeeData\");\n        this.#feeDataFunc = feeDataFunc;\n    }\n\n    /**\n     *  Resolves to the fee data.\n     */\n    async getFeeData(provider: Provider): Promise<FeeData> {\n        return await this.#feeDataFunc(provider);\n    }\n\n    clone(): FeeDataNetworkPlugin {\n        return new FeeDataNetworkPlugin(this.#feeDataFunc);\n    }\n}\n\nexport class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {\n    readonly #url: string;\n    readonly #processFunc: (f: () => Promise<FeeData>, p: Provider, r: FetchRequest) => Promise<{ gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint }>;\n\n    /**\n     *  The URL to initialize the FetchRequest with in %%processFunc%%.\n     */\n    get url(): string { return this.#url; }\n\n    /**\n     *  The callback to use when computing the FeeData.\n     */\n    get processFunc(): (f: () => Promise<FeeData>, p: Provider, r: FetchRequest) => Promise<{ gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint }> { return this.#processFunc; }\n\n    /**\n     *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\n     *  be used when computing the fee data for the network.\n     */\n    constructor(url: string, processFunc: (f: () => Promise<FeeData>, p: Provider, r: FetchRequest) => Promise<{ gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint }>) {\n        super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n        this.#url = url;\n        this.#processFunc = processFunc;\n    }\n\n    // We are immutable, so we can serve as our own clone\n    clone(): FetchUrlFeeDataNetworkPlugin { return this; }\n}\n\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/\n","/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\n\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assert, assertArgument } from \"../utils/index.js\";\n\nimport {\n    EnsPlugin, FetchUrlFeeDataNetworkPlugin, GasCostPlugin\n} from \"./plugins-network.js\";\n\nimport type { BigNumberish } from \"../utils/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type { NetworkPlugin } from \"./plugins-network.js\";\n\n\n/**\n *  A Networkish can be used to allude to a Network, by specifing:\n *  - a [[Network]] object\n *  - a well-known (or registered) network name\n *  - a well-known (or registered) chain ID\n *  - an object with sufficient details to describe a network\n */\nexport type Networkish = Network | number | bigint | string | {\n    name?: string,\n    chainId?: number,\n    //layerOneConnection?: Provider,\n    ensAddress?: string,\n    ensNetwork?: number\n};\n\n\n\n\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n\n\nconst Networks: Map<string | bigint, () => Network> = new Map();\n\n\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nexport class Network {\n    #name: string;\n    #chainId: bigint;\n\n    #plugins: Map<string, NetworkPlugin>;\n\n    /**\n     *  Creates a new **Network** for %%name%% and %%chainId%%.\n     */\n    constructor(name: string, chainId: BigNumberish) {\n        this.#name = name;\n        this.#chainId = getBigInt(chainId);\n        this.#plugins = new Map();\n    }\n\n    /**\n     *  Returns a JSON-compatible representation of a Network.\n     */\n    toJSON(): any {\n        return { name: this.name, chainId: String(this.chainId) };\n    }\n\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */\n    get name(): string { return this.#name; }\n    set name(value: string) { this.#name =  value; }\n\n    /**\n     *  The network chain ID.\n     */\n    get chainId(): bigint { return this.#chainId; }\n    set chainId(value: BigNumberish) { this.#chainId = getBigInt(value, \"chainId\"); }\n\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */\n    matches(other: Networkish): boolean {\n        if (other == null) { return false; }\n\n        if (typeof(other) === \"string\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            } catch (error) { }\n            return (this.name === other);\n        }\n\n        if (typeof(other) === \"number\" || typeof(other) === \"bigint\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            } catch (error) { }\n            return false;\n        }\n\n        if (typeof(other) === \"object\") {\n            if (other.chainId != null) {\n                try {\n                    return (this.chainId === getBigInt(other.chainId));\n                } catch (error) { }\n                return false;\n            }\n            if (other.name != null) {\n                return (this.name === other.name);\n            }\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */\n    get plugins(): Array<NetworkPlugin> {\n        return Array.from(this.#plugins.values());\n    }\n\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */\n    attachPlugin(plugin: NetworkPlugin): this {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${ plugin.name } `);\n        }\n        this.#plugins.set(plugin.name, plugin.clone());\n        return this;\n    }\n\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */\n    getPlugin<T extends NetworkPlugin = NetworkPlugin>(name: string): null | T {\n        return <T>(this.#plugins.get(name)) || null;\n    }\n\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */\n    getPlugins<T extends NetworkPlugin = NetworkPlugin>(basename: string): Array<T> {\n        return <Array<T>>(this.plugins.filter((p) => (p.name.split(\"#\")[0] === basename)));\n    }\n\n    /**\n     *  Create a copy of this Network.\n     */\n    clone(): Network {\n        const clone = new Network(this.name, this.chainId);\n        this.plugins.forEach((plugin) => {\n            clone.attachPlugin(plugin.clone());\n        });\n        return clone;\n    }\n\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */\n    computeIntrinsicGas(tx: TransactionLike): number {\n        const costs = this.getPlugin<GasCostPlugin>(\"org.ethers.plugins.network.GasCost\") || (new GasCostPlugin());\n\n        let gas = costs.txBase;\n        if (tx.to == null) { gas += costs.txCreate; }\n        if (tx.data) {\n            for (let i = 2; i < tx.data.length; i += 2) {\n                if (tx.data.substring(i, i + 2) === \"00\") {\n                    gas += costs.txDataZero;\n                } else {\n                    gas += costs.txDataNonzero;\n                }\n            }\n        }\n\n        if (tx.accessList) {\n            const accessList = accessListify(tx.accessList);\n            for (const addr in accessList) {\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n            }\n        }\n\n        return gas;\n    }\n\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */\n    static from(network?: Networkish): Network {\n        injectCommonNetworks();\n\n        // Default network\n        if (network == null) { return Network.from(\"mainnet\"); }\n\n        // Canonical name or chain ID\n        if (typeof(network) === \"number\") { network = BigInt(network); }\n        if (typeof(network) === \"string\" || typeof(network) === \"bigint\") {\n            const networkFunc = Networks.get(network);\n            if (networkFunc) { return networkFunc(); }\n            if (typeof(network) === \"bigint\") {\n                return new Network(\"unknown\", network);\n            }\n\n            assertArgument(false, \"unknown network\", \"network\", network);\n        }\n\n        // Clonable with network-like abilities\n        if (typeof((<Network>network).clone) === \"function\") {\n            const clone = (<Network>network).clone();\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n            //}\n            return clone;\n        }\n\n        // Networkish\n        if (typeof(network) === \"object\") {\n            assertArgument(typeof(network.name) === \"string\" && typeof(network.chainId) === \"number\",\n                \"invalid network object name or chainId\", \"network\", network);\n\n            const custom = new Network(<string>(network.name), <number>(network.chainId));\n\n            if ((<any>network).ensAddress || (<any>network).ensNetwork != null) {\n                custom.attachPlugin(new EnsPlugin((<any>network).ensAddress, (<any>network).ensNetwork));\n            }\n\n            //if ((<any>network).layerOneConnection) {\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n            //}\n\n            return custom;\n        }\n\n        assertArgument(false, \"invalid network\", \"network\", network);\n    }\n\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */\n    static register(nameOrChainId: string | number | bigint, networkFunc: () => Network): void {\n        if (typeof(nameOrChainId) === \"number\") { nameOrChainId = BigInt(nameOrChainId); }\n        const existing = Networks.get(nameOrChainId);\n        if (existing) {\n            assertArgument(false, `conflicting network for ${ JSON.stringify(existing.name) }`, \"nameOrChainId\", nameOrChainId);\n        }\n        Networks.set(nameOrChainId, networkFunc);\n    }\n}\n\n\ntype Options = {\n    ensNetwork?: number;\n    altNames?: Array<string>;\n    plugins?: Array<NetworkPlugin>;\n};\n\n// We don't want to bring in formatUnits because it is backed by\n// FixedNumber and we want to keep Networks tiny. The values\n// included by the Gas Stations are also IEEE 754 with lots of\n// rounding issues and exceed the strict checks formatUnits has.\nfunction parseUnits(_value: number | string, decimals: number): bigint {\n    const value = String(_value);\n    if (!value.match(/^[0-9.]+$/)) {\n        throw new Error(`invalid gwei value: ${ _value }`);\n    }\n\n    // Break into [ whole, fraction ]\n    const comps = value.split(\".\");\n    if (comps.length === 1) { comps.push(\"\"); }\n\n    // More than 1 decimal point or too many fractional positions\n    if (comps.length !== 2) {\n        throw new Error(`invalid gwei value: ${ _value }`);\n    }\n\n    // Pad the fraction to 9 decimalplaces\n    while (comps[1].length < decimals) { comps[1] += \"0\"; }\n\n    // Too many decimals and some non-zero ending, take the ceiling\n    if (comps[1].length > 9) {\n        let frac = BigInt(comps[1].substring(0, 9));\n        if (!comps[1].substring(9).match(/^0+$/)) { frac++; }\n        comps[1] = frac.toString();\n    }\n\n    return BigInt(comps[0] + comps[1]);\n}\n\n// Used by Polygon to use a gas station for fee data\nfunction getGasStationPlugin(url: string) {\n    return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {\n\n        // Prevent Cloudflare from blocking our request in node.js\n        request.setHeader(\"User-Agent\", \"ethers\");\n\n        let response;\n        try {\n            const [ _response, _feeData ] = await Promise.all([\n                request.send(), fetchFeeData()\n            ]);\n            response = _response;\n            const payload = response.bodyJson.standard;\n            const feeData = {\n                gasPrice: _feeData.gasPrice,\n                maxFeePerGas: parseUnits(payload.maxFee, 9),\n                maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9),\n            };\n            return feeData;\n        } catch (error: any) {\n            assert(false, `error encountered with polygon gas station (${ JSON.stringify(request.url) })`, \"SERVER_ERROR\", { request, response, error });\n        }\n    });\n}\n\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks(): void {\n    if (injected) { return; }\n    injected = true;\n\n    /// Register popular Ethereum networks\n    function registerEth(name: string, chainId: number, options: Options): void {\n        const func = function() {\n            const network = new Network(name, chainId);\n\n            // We use 0 to disable ENS\n            if (options.ensNetwork != null) {\n                network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n            }\n\n            network.attachPlugin(new GasCostPlugin());\n\n            (options.plugins || []).forEach((plugin) => {\n                network.attachPlugin(plugin);\n            });\n\n            return network;\n        };\n\n        // Register the network by name and chain ID\n        Network.register(name, func);\n        Network.register(chainId, func);\n\n        if (options.altNames) {\n            options.altNames.forEach((name) => {\n                Network.register(name, func);\n            });\n        }\n    }\n\n    registerEth(\"mainnet\", 1, { ensNetwork: 1, altNames: [ \"homestead\" ] });\n    registerEth(\"ropsten\", 3, { ensNetwork: 3 });\n    registerEth(\"rinkeby\", 4, { ensNetwork: 4 });\n    registerEth(\"goerli\", 5, { ensNetwork: 5 });\n    registerEth(\"kovan\", 42, { ensNetwork: 42 });\n    registerEth(\"sepolia\", 11155111, { ensNetwork: 11155111 });\n    registerEth(\"holesky\", 17000, { ensNetwork: 17000 });\n\n    registerEth(\"classic\", 61, { });\n    registerEth(\"classicKotti\", 6, { });\n\n    registerEth(\"arbitrum\", 42161, {\n        ensNetwork: 1,\n    });\n    registerEth(\"arbitrum-goerli\", 421613, { });\n    registerEth(\"arbitrum-sepolia\", 421614, { });\n\n    registerEth(\"base\", 8453, { ensNetwork: 1 });\n    registerEth(\"base-goerli\", 84531, { });\n    registerEth(\"base-sepolia\", 84532, { });\n\n    registerEth(\"bnb\", 56, { ensNetwork: 1 });\n    registerEth(\"bnbt\", 97, { });\n\n    registerEth(\"linea\", 59144, { ensNetwork: 1 });\n    registerEth(\"linea-goerli\", 59140, { });\n    registerEth(\"linea-sepolia\", 59141, { });\n\n    registerEth(\"matic\", 137, {\n        ensNetwork: 1,\n        plugins: [\n            getGasStationPlugin(\"https:/\\/gasstation.polygon.technology/v2\")\n        ]\n    });\n    registerEth(\"matic-amoy\", 80002, { });\n    registerEth(\"matic-mumbai\", 80001, {\n        altNames: [ \"maticMumbai\", \"maticmum\" ],  // @TODO: Future remove these alts\n        plugins: [\n            getGasStationPlugin(\"https:/\\/gasstation-testnet.polygon.technology/v2\")\n        ]\n    });\n\n    registerEth(\"optimism\", 10, {\n        ensNetwork: 1,\n        plugins: [ ]\n    });\n    registerEth(\"optimism-goerli\", 420, { });\n    registerEth(\"optimism-sepolia\", 11155420, { });\n\n    registerEth(\"xdai\", 100, { ensNetwork: 1 });\n}\n","import { assert, isHexString } from \"../utils/index.js\";\n\nimport type { AbstractProvider, Subscriber } from \"./abstract-provider.js\";\nimport type { EventFilter, OrphanFilter, ProviderEvent } from \"./provider.js\";\n\nfunction copy(obj: any): any {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n *  Return the polling subscriber for common events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport function getPollingSubscriber(provider: AbstractProvider, event: ProviderEvent): Subscriber {\n    if (event === \"block\") { return new PollingBlockSubscriber(provider); }\n    if (isHexString(event, 32)) { return new PollingTransactionSubscriber(provider, event); }\n\n    assert(false, \"unsupported polling event\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getPollingSubscriber\", info: { event }\n    });\n}\n\n// @TODO: refactor this\n\n/**\n *  A **PollingBlockSubscriber** polls at a regular interval for a change\n *  in the block number.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingBlockSubscriber implements Subscriber {\n    #provider: AbstractProvider;\n    #poller: null | number;\n\n    #interval: number;\n\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    #blockNumber: number;\n\n    /**\n     *  Create a new **PollingBlockSubscriber** attached to %%provider%%.\n     */\n    constructor(provider: AbstractProvider) {\n        this.#provider = provider;\n        this.#poller = null;\n        this.#interval = 4000;\n\n        this.#blockNumber = -2;\n    }\n\n    /**\n     *  The polling interval.\n     */\n    get pollingInterval(): number { return this.#interval; }\n    set pollingInterval(value: number) { this.#interval = value; }\n\n    async #poll(): Promise<void> {\n        try {\n            const blockNumber = await this.#provider.getBlockNumber();\n\n            // Bootstrap poll to setup our initial block number\n            if (this.#blockNumber === -2) {\n                this.#blockNumber = blockNumber;\n                return;\n            }\n\n            // @TODO: Put a cap on the maximum number of events per loop?\n\n            if (blockNumber !== this.#blockNumber) {\n                for (let b = this.#blockNumber + 1; b <= blockNumber; b++) {\n                    // We have been stopped\n                    if (this.#poller == null) { return; }\n\n                    await this.#provider.emit(\"block\", b);\n                }\n\n                this.#blockNumber = blockNumber;\n            }\n\n        } catch (error) {\n            // @TODO: Minor bump, add an \"error\" event to let subscribers\n            //        know things went awry.\n            //console.log(error);\n        }\n\n        // We have been stopped\n        if (this.#poller == null) { return; }\n\n        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\n    }\n\n    start(): void {\n        if (this.#poller) { return; }\n        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\n        this.#poll();\n    }\n\n    stop(): void {\n        if (!this.#poller) { return; }\n        this.#provider._clearTimeout(this.#poller);\n        this.#poller = null;\n    }\n\n    pause(dropWhilePaused?: boolean): void {\n        this.stop();\n        if (dropWhilePaused) { this.#blockNumber = -2; }\n    }\n\n    resume(): void {\n        this.start();\n    }\n}\n\n\n/**\n *  An **OnBlockSubscriber** can be sub-classed, with a [[_poll]]\n *  implmentation which will be called on every new block.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class OnBlockSubscriber implements Subscriber {\n    #provider: AbstractProvider;\n    #poll: (b: number) => void;\n    #running: boolean;\n\n    /**\n     *  Create a new **OnBlockSubscriber** attached to %%provider%%.\n     */\n    constructor(provider: AbstractProvider) {\n        this.#provider = provider;\n        this.#running = false;\n        this.#poll = (blockNumber: number) => {\n            this._poll(blockNumber, this.#provider);\n        }\n    }\n\n    /**\n     *  Called on every new block.\n     */\n    async _poll(blockNumber: number, provider: AbstractProvider): Promise<void> {\n        throw new Error(\"sub-classes must override this\");\n    }\n\n    start(): void {\n        if (this.#running) { return; }\n        this.#running = true;\n\n        this.#poll(-2);\n        this.#provider.on(\"block\", this.#poll);\n    }\n\n    stop(): void {\n        if (!this.#running) { return; }\n        this.#running = false;\n\n        this.#provider.off(\"block\", this.#poll);\n    }\n\n    pause(dropWhilePaused?: boolean): void { this.stop(); }\n    resume(): void { this.start(); }\n}\n\nexport class PollingBlockTagSubscriber extends OnBlockSubscriber {\n    readonly #tag: string;\n    #lastBlock: number;\n\n    constructor(provider: AbstractProvider, tag: string) {\n        super(provider);\n        this.#tag = tag;\n        this.#lastBlock = -2;\n    }\n\n    pause(dropWhilePaused?: boolean): void {\n        if (dropWhilePaused) { this.#lastBlock = -2; }\n        super.pause(dropWhilePaused);\n    }\n\n    async _poll(blockNumber: number, provider: AbstractProvider): Promise<void> {\n        const block = await provider.getBlock(this.#tag);\n        if (block == null) { return; }\n\n        if (this.#lastBlock === -2) {\n            this.#lastBlock = block.number;\n        } else if (block.number > this.#lastBlock) {\n            provider.emit(this.#tag, block.number);\n            this.#lastBlock = block.number;\n        }\n    }\n}\n\n\n/**\n *  @_ignore:\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingOrphanSubscriber extends OnBlockSubscriber {\n    #filter: OrphanFilter;\n\n    constructor(provider: AbstractProvider, filter: OrphanFilter) {\n        super(provider);\n        this.#filter = copy(filter);\n    }\n\n    async _poll(blockNumber: number, provider: AbstractProvider): Promise<void> {\n        throw new Error(\"@TODO\");\n        console.log(this.#filter);\n    }\n}\n\n/**\n *  A **PollingTransactionSubscriber** will poll for a given transaction\n *  hash for its receipt.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingTransactionSubscriber extends OnBlockSubscriber {\n    #hash: string;\n\n    /**\n     *  Create a new **PollingTransactionSubscriber** attached to\n     *  %%provider%%, listening for %%hash%%.\n     */\n    constructor(provider: AbstractProvider, hash: string) {\n        super(provider);\n        this.#hash = hash;\n    }\n\n    async _poll(blockNumber: number, provider: AbstractProvider): Promise<void> {\n        const tx = await provider.getTransactionReceipt(this.#hash);\n        if (tx) { provider.emit(this.#hash, tx); }\n    }\n}\n\n/**\n *  A **PollingEventSubscriber** will poll for a given filter for its logs.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class PollingEventSubscriber implements Subscriber {\n    #provider: AbstractProvider;\n    #filter: EventFilter;\n    #poller: (b: number) => void;\n\n    #running: boolean;\n\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    #blockNumber: number;\n\n    /**\n     *  Create a new **PollingTransactionSubscriber** attached to\n     *  %%provider%%, listening for %%filter%%.\n     */\n    constructor(provider: AbstractProvider, filter: EventFilter) {\n        this.#provider = provider;\n        this.#filter = copy(filter);\n        this.#poller = this.#poll.bind(this);\n        this.#running = false;\n        this.#blockNumber = -2;\n    }\n\n    async #poll(blockNumber: number): Promise<void> {\n        // The initial block hasn't been determined yet\n        if (this.#blockNumber === -2) { return; }\n\n        const filter = copy(this.#filter);\n        filter.fromBlock = this.#blockNumber + 1;\n        filter.toBlock = blockNumber;\n\n        const logs = await this.#provider.getLogs(filter);\n\n        // No logs could just mean the node has not indexed them yet,\n        // so we keep a sliding window of 60 blocks to keep scanning\n        if (logs.length === 0) {\n            if (this.#blockNumber < blockNumber - 60) {\n                this.#blockNumber = blockNumber - 60;\n            }\n            return;\n        }\n\n        for (const log of logs) {\n            this.#provider.emit(this.#filter, log);\n\n            // Only advance the block number when logs were found to\n            // account for networks (like BNB and Polygon) which may\n            // sacrifice event consistency for block event speed\n            this.#blockNumber = log.blockNumber;\n        }\n    }\n\n    start(): void {\n        if (this.#running) { return; }\n        this.#running = true;\n\n        if (this.#blockNumber === -2) {\n            this.#provider.getBlockNumber().then((blockNumber) => {\n                this.#blockNumber = blockNumber;\n            });\n        }\n        this.#provider.on(\"block\", this.#poller);\n    }\n\n    stop(): void {\n        if (!this.#running) { return; }\n        this.#running = false;\n\n        this.#provider.off(\"block\", this.#poller);\n    }\n\n    pause(dropWhilePaused?: boolean): void {\n        this.stop();\n        if (dropWhilePaused) { this.#blockNumber = -2; }\n    }\n\n    resume(): void {\n        this.start();\n    }\n}\n","/**\n *  The available providers should suffice for most developers purposes,\n *  but the [[AbstractProvider]] class has many features which enable\n *  sub-classing it for specific purposes.\n *\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\n */\n\n// @TODO\n// Event coalescence\n//   When we register an event with an async value (e.g. address is a Signer\n//   or ENS name), we need to add it immeidately for the Event API, but also\n//   need time to resolve the address. Upon resolving the address, we need to\n//   migrate the listener to the static event. We also need to maintain a map\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\n\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { ZeroAddress } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { namehash } from \"../hash/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport {\n    concat, dataLength, dataSlice, hexlify, isHexString,\n    getBigInt, getBytes, getNumber,\n    isCallException, isError, makeError, assert, assertArgument,\n    FetchRequest,\n    toBeArray, toQuantity,\n    defineProperties, EventPayload, resolveProperties,\n    toUtf8String\n} from \"../utils/index.js\";\n\nimport { EnsResolver } from \"./ens-resolver.js\";\nimport {\n    formatBlock, formatLog, formatTransactionReceipt, formatTransactionResponse\n} from \"./format.js\";\nimport { Network } from \"./network.js\";\nimport { copyRequest, Block, FeeData, Log, TransactionReceipt, TransactionResponse } from \"./provider.js\";\nimport {\n    PollingBlockSubscriber, PollingBlockTagSubscriber, PollingEventSubscriber,\n    PollingOrphanSubscriber, PollingTransactionSubscriber\n} from \"./subscriber-polling.js\";\n\nimport type { Addressable, AddressLike } from \"../address/index.js\";\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\nimport type { FetchResponse, Listener } from \"../utils/index.js\";\n\nimport type { Networkish } from \"./network.js\";\nimport type { FetchUrlFeeDataNetworkPlugin } from \"./plugins-network.js\";\n//import type { MaxPriorityFeePlugin } from \"./plugins-network.js\";\nimport type {\n    BlockParams, LogParams, TransactionReceiptParams,\n    TransactionResponseParams\n} from \"./formatting.js\";\n\nimport type {\n    BlockTag, EventFilter, Filter, FilterByBlockHash, OrphanFilter,\n    PreparedTransactionRequest, Provider, ProviderEvent,\n    TransactionRequest\n} from \"./provider.js\";\n\ntype Timer = ReturnType<typeof setTimeout>;\n\n\n// Constants\nconst BN_2 = BigInt(2);\n\nconst MAX_CCIP_REDIRECTS = 10;\n\nfunction isPromise<T = any>(value: any): value is Promise<T> {\n    return (value && typeof(value.then) === \"function\");\n}\n\nfunction getTag(prefix: string, value: any): string {\n    return prefix + \":\" + JSON.stringify(value, (k, v) => {\n        if (v == null) { return \"null\"; }\n        if (typeof(v) === \"bigint\") { return `bigint:${ v.toString() }`}\n        if (typeof(v) === \"string\") { return v.toLowerCase(); }\n\n        // Sort object keys\n        if (typeof(v) === \"object\" && !Array.isArray(v)) {\n            const keys = Object.keys(v);\n            keys.sort();\n            return keys.reduce((accum, key) => {\n                accum[key] = v[key];\n                return accum;\n            }, <any>{ });\n        }\n\n        return v;\n    });\n}\n\n/**\n *  The types of additional event values that can be emitted for the\n *  ``\"debug\"`` event.\n */\nexport type DebugEventAbstractProvider = {\n    action: \"sendCcipReadFetchRequest\",\n    request: FetchRequest\n    index: number\n    urls: Array<string>\n} | {\n    action: \"receiveCcipReadFetchResult\",\n    request: FetchRequest,\n    result: any\n} | {\n    action: \"receiveCcipReadFetchError\",\n    request: FetchRequest,\n    result: any\n} | {\n    action: \"sendCcipReadCall\",\n    transaction: { to: string, data: string }\n} | {\n    action: \"receiveCcipReadCallResult\",\n    transaction: { to: string, data: string }\n    result: string\n} | {\n    action: \"receiveCcipReadCallError\",\n    transaction: { to: string, data: string }\n    error: Error\n};\n\n\n/**\n *  The value passed to the [[AbstractProvider-_getSubscriber]] method.\n *\n *  Only developers sub-classing [[AbstractProvider[[ will care about this,\n *  if they are modifying a low-level feature of how subscriptions operate.\n */\nexport type Subscription = {\n    type: \"block\" | \"close\" | \"debug\" | \"error\" | \"finalized\" | \"network\" | \"pending\" | \"safe\",\n    tag: string\n} | {\n    type: \"transaction\",\n    tag: string,\n    hash: string\n} | {\n    type: \"event\",\n    tag: string,\n    filter: EventFilter\n} | {\n    type: \"orphan\",\n    tag: string,\n    filter: OrphanFilter\n};\n\n/**\n *  A **Subscriber** manages a subscription.\n *\n *  Only developers sub-classing [[AbstractProvider[[ will care about this,\n *  if they are modifying a low-level feature of how subscriptions operate.\n */\nexport interface Subscriber {\n    /**\n     *  Called initially when a subscriber is added the first time.\n     */\n    start(): void;\n\n    /**\n     *  Called when there are no more subscribers to the event.\n     */\n    stop(): void;\n\n    /**\n     *  Called when the subscription should pause.\n     *\n     *  If %%dropWhilePaused%%, events that occur while paused should not\n     *  be emitted [[resume]].\n     */\n    pause(dropWhilePaused?: boolean): void;\n\n    /**\n     *  Resume a paused subscriber.\n     */\n    resume(): void;\n\n    /**\n     *  The frequency (in ms) to poll for events, if polling is used by\n     *  the subscriber.\n     *\n     *  For non-polling subscribers, this must return ``undefined``.\n     */\n    pollingInterval?: number;\n}\n\n/**\n *  An **UnmanagedSubscriber** is useful for events which do not require\n *  any additional management, such as ``\"debug\"`` which only requires\n *  emit in synchronous event loop triggered calls.\n */\nexport class UnmanagedSubscriber implements Subscriber {\n    /**\n     *  The name fof the event.\n     */\n    name!: string;\n\n    /**\n     *  Create a new UnmanagedSubscriber with %%name%%.\n     */\n    constructor(name: string) { defineProperties<UnmanagedSubscriber>(this, { name }); }\n\n    start(): void { }\n    stop(): void { }\n\n    pause(dropWhilePaused?: boolean): void { }\n    resume(): void { }\n}\n\ntype Sub = {\n    tag: string;\n    nameMap: Map<string, string>\n    addressableMap: WeakMap<Addressable, string>;\n    listeners: Array<{ listener: Listener, once: boolean }>;\n    // @TODO: get rid of this, as it is (and has to be)\n    // tracked in subscriber\n    started: boolean;\n    subscriber: Subscriber;\n};\n\nfunction copy<T = any>(value: T): T {\n    return JSON.parse(JSON.stringify(value));\n}\n\nfunction concisify(items: Array<string>): Array<string> {\n    items = Array.from((new Set(items)).values())\n    items.sort();\n    return items;\n}\n\n\nasync function getSubscription(_event: ProviderEvent, provider: AbstractProvider): Promise<Subscription> {\n    if (_event == null) { throw new Error(\"invalid event\"); }\n\n    // Normalize topic array info an EventFilter\n    if (Array.isArray(_event)) { _event = { topics: _event }; }\n\n    if (typeof(_event) === \"string\") {\n        switch (_event) {\n            case \"block\":\n            case \"debug\":\n            case \"error\":\n            case \"finalized\":\n            case \"network\":\n            case \"pending\":\n            case \"safe\": {\n                return { type: _event, tag: _event };\n            }\n        }\n    }\n\n    if (isHexString(_event, 32)) {\n        const hash = _event.toLowerCase();\n        return { type: \"transaction\", tag: getTag(\"tx\", { hash }), hash };\n    }\n\n    if ((<any>_event).orphan) {\n        const event = <OrphanFilter>_event;\n        // @TODO: Should lowercase and whatnot things here instead of copy...\n        return { type: \"orphan\", tag: getTag(\"orphan\", event), filter: copy(event) };\n    }\n\n    if (((<any>_event).address || (<any>_event).topics)) {\n        const event = <EventFilter>_event;\n\n        const filter: any = {\n            topics: ((event.topics || []).map((t) => {\n                if (t == null) { return null; }\n                if (Array.isArray(t)) {\n                    return concisify(t.map((t) => t.toLowerCase()));\n                }\n                return t.toLowerCase();\n            }))\n        };\n\n        if (event.address) {\n            const addresses: Array<string> = [ ];\n            const promises: Array<Promise<void>> = [ ];\n\n            const addAddress = (addr: AddressLike) => {\n                if (isHexString(addr)) {\n                    addresses.push(addr);\n                } else {\n                    promises.push((async () => {\n                        addresses.push(await resolveAddress(addr, provider));\n                    })());\n                }\n            }\n\n            if (Array.isArray(event.address)) {\n                event.address.forEach(addAddress);\n            } else {\n                addAddress(event.address);\n            }\n            if (promises.length) { await Promise.all(promises); }\n            filter.address = concisify(addresses.map((a) => a.toLowerCase()));\n        }\n\n        return { filter, tag: getTag(\"event\", filter), type: \"event\" };\n    }\n\n    assertArgument(false, \"unknown ProviderEvent\", \"event\", _event);\n}\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\n/**\n *  An **AbstractPlugin** is used to provide additional internal services\n *  to an [[AbstractProvider]] without adding backwards-incompatible changes\n *  to method signatures or other internal and complex logic.\n */\nexport interface AbstractProviderPlugin {\n    /**\n     *  The reverse domain notation of the plugin.\n     */\n    readonly name: string;\n\n    /**\n     *  Creates a new instance of the plugin, connected to %%provider%%.\n     */\n    connect(provider: AbstractProvider): AbstractProviderPlugin;\n}\n\n/**\n *  A normalized filter used for [[PerformActionRequest]] objects.\n */\nexport type PerformActionFilter = {\n    address?: string | Array<string>;\n    topics?: Array<null | string | Array<string>>;\n    fromBlock?: BlockTag;\n    toBlock?: BlockTag;\n} | {\n    address?: string | Array<string>;\n    topics?: Array<null | string | Array<string>>;\n    blockHash?: string;\n};\n\n/**\n *  A normalized transactions used for [[PerformActionRequest]] objects.\n */\nexport interface PerformActionTransaction extends PreparedTransactionRequest {\n    /**\n     *  The ``to`` address of the transaction.\n     */\n    to?: string;\n\n    /**\n     *  The sender of the transaction.\n     */\n    from?: string;\n}\n\n/**\n *  The [[AbstractProvider]] methods will normalize all values and pass this\n *  type to [[AbstractProvider-_perform]].\n */\nexport type PerformActionRequest = {\n    method: \"broadcastTransaction\",\n    signedTransaction: string\n} | {\n    method: \"call\",\n    transaction: PerformActionTransaction, blockTag: BlockTag\n} | {\n    method: \"chainId\"\n} | {\n    method: \"estimateGas\",\n    transaction: PerformActionTransaction\n} | {\n    method: \"getBalance\",\n    address: string, blockTag: BlockTag\n} | {\n    method: \"getBlock\",\n    blockTag: BlockTag, includeTransactions: boolean\n} | {\n    method: \"getBlock\",\n    blockHash: string, includeTransactions: boolean\n} | {\n    method: \"getBlockNumber\"\n} | {\n    method: \"getCode\",\n    address: string, blockTag: BlockTag\n} | {\n    method: \"getGasPrice\"\n} | {\n    method: \"getLogs\",\n    filter: PerformActionFilter\n} | {\n    method: \"getPriorityFee\"\n} | {\n    method: \"getStorage\",\n    address: string, position: bigint, blockTag: BlockTag\n} | {\n    method: \"getTransaction\",\n    hash: string\n} | {\n    method: \"getTransactionCount\",\n    address: string, blockTag: BlockTag\n} | {\n    method: \"getTransactionReceipt\",\n    hash: string\n} | {\n    method: \"getTransactionResult\",\n    hash: string\n};\n\ntype _PerformAccountRequest = {\n    method: \"getBalance\" | \"getTransactionCount\" | \"getCode\"\n} | {\n    method: \"getStorage\", position: bigint\n}\n\n/**\n *  Options for configuring some internal aspects of an [[AbstractProvider]].\n *\n *  **``cacheTimeout``** - how long to cache a low-level ``_perform``\n *  for, based on input parameters. This reduces the number of calls\n *  to getChainId and getBlockNumber, but may break test chains which\n *  can perform operations (internally) synchronously. Use ``-1`` to\n *  disable, ``0`` will only buffer within the same event loop and\n *  any other value is in ms. (default: ``250``)\n */\nexport type AbstractProviderOptions = {\n    cacheTimeout?: number;\n    pollingInterval?: number;\n};\n\nconst defaultOptions = {\n    cacheTimeout: 250,\n    pollingInterval: 4000\n};\n\ntype CcipArgs = {\n    sender: string;\n    urls: Array<string>;\n    calldata: string;\n    selector: string;\n    extraData: string;\n    errorArgs: Array<any>\n};\n\n/**\n *  An **AbstractProvider** provides a base class for other sub-classes to\n *  implement the [[Provider]] API by normalizing input arguments and\n *  formatting output results as well as tracking events for consistent\n *  behaviour on an eventually-consistent network.\n */\nexport class AbstractProvider implements Provider {\n\n    #subs: Map<string, Sub>;\n    #plugins: Map<string, AbstractProviderPlugin>;\n\n    // null=unpaused, true=paused+dropWhilePaused, false=paused\n    #pausedState: null | boolean;\n\n    #destroyed: boolean;\n\n    #networkPromise: null | Promise<Network>;\n    readonly #anyNetwork: boolean;\n\n    #performCache: Map<string, Promise<any>>;\n\n    // The most recent block number if running an event or -1 if no \"block\" event\n    #lastBlockNumber: number;\n\n    #nextTimer: number;\n    #timers: Map<number, { timer: null | Timer, func: () => void, time: number }>;\n\n    #disableCcipRead: boolean;\n\n    #options: Required<AbstractProviderOptions>;\n\n    /**\n     *  Create a new **AbstractProvider** connected to %%network%%, or\n     *  use the various network detection capabilities to discover the\n     *  [[Network]] if necessary.\n     */\n    constructor(_network?: \"any\" | Networkish, options?: AbstractProviderOptions) {\n        this.#options = Object.assign({ }, defaultOptions, options || { });\n\n        if (_network === \"any\") {\n            this.#anyNetwork = true;\n            this.#networkPromise = null;\n        } else if (_network) {\n            const network = Network.from(_network);\n            this.#anyNetwork = false;\n            this.#networkPromise = Promise.resolve(network);\n            setTimeout(() => { this.emit(\"network\", network, null); }, 0);\n        } else {\n            this.#anyNetwork = false;\n            this.#networkPromise = null;\n        }\n\n        this.#lastBlockNumber = -1;\n\n        this.#performCache = new Map();\n\n        this.#subs = new Map();\n        this.#plugins = new Map();\n        this.#pausedState = null;\n\n        this.#destroyed = false;\n\n        this.#nextTimer = 1;\n        this.#timers = new Map();\n\n        this.#disableCcipRead = false;\n    }\n\n    get pollingInterval(): number { return this.#options.pollingInterval; }\n\n    /**\n     *  Returns ``this``, to allow an **AbstractProvider** to implement\n     *  the [[ContractRunner]] interface.\n     */\n    get provider(): this { return this; }\n\n    /**\n     *  Returns all the registered plug-ins.\n     */\n    get plugins(): Array<AbstractProviderPlugin> {\n        return Array.from(this.#plugins.values());\n    }\n\n    /**\n     *  Attach a new plug-in.\n     */\n    attachPlugin(plugin: AbstractProviderPlugin): this {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${ plugin.name } `);\n        }\n        this.#plugins.set(plugin.name,  plugin.connect(this));\n        return this;\n    }\n\n    /**\n     *  Get a plugin by name.\n     */\n    getPlugin<T extends AbstractProviderPlugin = AbstractProviderPlugin>(name: string): null | T {\n        return <T>(this.#plugins.get(name)) || null;\n    }\n\n    /**\n     *  Prevent any CCIP-read operation, regardless of whether requested\n     *  in a [[call]] using ``enableCcipRead``.\n     */\n    get disableCcipRead(): boolean { return this.#disableCcipRead; }\n    set disableCcipRead(value: boolean) { this.#disableCcipRead = !!value; }\n\n    // Shares multiple identical requests made during the same 250ms\n    async #perform<T = any>(req: PerformActionRequest): Promise<T> {\n        const timeout = this.#options.cacheTimeout;\n\n        // Caching disabled\n        if (timeout < 0) { return await this._perform(req); }\n\n        // Create a tag\n        const tag = getTag(req.method, req);\n\n        let perform = this.#performCache.get(tag);\n        if (!perform) {\n            perform = this._perform(req);\n\n            this.#performCache.set(tag, perform);\n\n            setTimeout(() => {\n                if (this.#performCache.get(tag) === perform) {\n                    this.#performCache.delete(tag);\n                }\n            }, timeout);\n        }\n\n        return await perform;\n    }\n\n    /**\n     *  Resolves to the data for executing the CCIP-read operations.\n     */\n    async ccipReadFetch(tx: PerformActionTransaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0 || tx.to == null) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n            //    value.status = response.statusCode;\n            //    return value;\n            //});\n            const request = new FetchRequest(href);\n            if (url.indexOf(\"{data}\") === -1) {\n                request.body = { data, sender };\n            }\n\n            this.emit(\"debug\", { action: \"sendCcipReadFetchRequest\", request, index: i, urls });\n\n            let errorMessage = \"unknown error\";\n\n            // Fetch the resource...\n            let resp: FetchResponse;\n            try {\n                resp = await request.send();\n            } catch (error: any) {\n                // ...low-level fetch error (missing host, bad SSL, etc.),\n                // so try next URL\n                errorMessages.push(error.message);\n                this.emit(\"debug\", { action: \"receiveCcipReadFetchError\", request, result: { error } });\n                continue;\n            }\n\n            try {\n                const result = resp.bodyJson;\n                if (result.data) {\n                    this.emit(\"debug\", { action: \"receiveCcipReadFetchResult\", request, result });\n                    return result.data;\n                }\n                if (result.message) { errorMessage = result.message; }\n                this.emit(\"debug\", { action: \"receiveCcipReadFetchError\", request, result });\n            } catch (error) { }\n\n            // 4xx indicates the result is not present; stop\n            assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${ errorMessage }`,\n                \"OFFCHAIN_FAULT\", { reason: \"404_MISSING_RESOURCE\", transaction: tx, info: { url, errorMessage } });\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        assert(false, `error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, \"OFFCHAIN_FAULT\", {\n            reason: \"500_SERVER_ERROR\",\n            transaction: tx, info: { urls, errorMessages }\n        });\n    }\n\n    /**\n     *  Provides the opportunity for a sub-class to wrap a block before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Block]].\n     */\n    _wrapBlock(value: BlockParams, network: Network): Block {\n        return new Block(formatBlock(value), this);\n    }\n\n    /**\n     *  Provides the opportunity for a sub-class to wrap a log before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Log]].\n     */\n    _wrapLog(value: LogParams, network: Network): Log {\n        return new Log(formatLog(value), this);\n    }\n\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  receipt before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionReceipt]].\n     */\n    _wrapTransactionReceipt(value: TransactionReceiptParams, network: Network): TransactionReceipt {\n        return new TransactionReceipt(formatTransactionReceipt(value), this);\n    }\n\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  response before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionResponse]].\n     */\n    _wrapTransactionResponse(tx: TransactionResponseParams, network: Network): TransactionResponse {\n        return new TransactionResponse(formatTransactionResponse(tx), this);\n    }\n\n    /**\n     *  Resolves to the Network, forcing a network detection using whatever\n     *  technique the sub-class requires.\n     *\n     *  Sub-classes **must** override this.\n     */\n    _detectNetwork(): Promise<Network> {\n        assert(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_detectNetwork\"\n        });\n    }\n\n    /**\n     *  Sub-classes should use this to perform all built-in operations. All\n     *  methods sanitizes and normalizes the values passed into this.\n     *\n     *  Sub-classes **must** override this.\n     */\n    async _perform<T = any>(req: PerformActionRequest): Promise<T> {\n        assert(false, `unsupported method: ${ req.method }`, \"UNSUPPORTED_OPERATION\", {\n            operation: req.method,\n            info: req\n        });\n    }\n\n    // State\n\n    async getBlockNumber(): Promise<number> {\n        const blockNumber = getNumber(await this.#perform({ method: \"getBlockNumber\" }), \"%response\");\n        if (this.#lastBlockNumber >= 0) { this.#lastBlockNumber = blockNumber; }\n        return blockNumber;\n    }\n\n    /**\n     *  Returns or resolves to the address for %%address%%, resolving ENS\n     *  names and [[Addressable]] objects and returning if already an\n     *  address.\n     */\n    _getAddress(address: AddressLike): string | Promise<string> {\n        return resolveAddress(address, this);\n    }\n\n    /**\n     *  Returns or resolves to a valid block tag for %%blockTag%%, resolving\n     *  negative values and returning if already a valid block tag.\n     */\n    _getBlockTag(blockTag?: BlockTag): string | Promise<string> {\n        if (blockTag == null) { return \"latest\"; }\n\n        switch (blockTag) {\n            case \"earliest\":\n                return \"0x0\";\n            case \"finalized\":\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n                return blockTag;\n        }\n\n\n        if (isHexString(blockTag)) {\n            if (isHexString(blockTag, 32)) { return blockTag; }\n            return toQuantity(blockTag);\n        }\n\n        if (typeof(blockTag) === \"bigint\") {\n            blockTag = getNumber(blockTag, \"blockTag\");\n        }\n\n        if (typeof(blockTag) === \"number\") {\n            if (blockTag >= 0) { return toQuantity(blockTag); }\n            if (this.#lastBlockNumber >= 0) { return toQuantity(this.#lastBlockNumber + blockTag); }\n            return this.getBlockNumber().then((b) => toQuantity(b + <number>blockTag));\n        }\n\n        assertArgument(false, \"invalid blockTag\", \"blockTag\", blockTag);\n    }\n\n    /**\n     *  Returns or resolves to a filter for %%filter%%, resolving any ENS\n     *  names or [[Addressable]] object and returning if already a valid\n     *  filter.\n     */\n    _getFilter(filter: Filter | FilterByBlockHash): PerformActionFilter | Promise<PerformActionFilter> {\n\n        // Create a canonical representation of the topics\n        const topics = (filter.topics || [ ]).map((t) => {\n            if (t == null) { return null; }\n            if (Array.isArray(t)) {\n                return concisify(t.map((t) => t.toLowerCase()));\n            }\n            return t.toLowerCase();\n        });\n\n        const blockHash = (\"blockHash\" in filter) ? filter.blockHash: undefined;\n\n        const resolve = (_address: Array<string>, fromBlock?: string, toBlock?: string) => {\n            let address: undefined | string | Array<string> = undefined;\n            switch (_address.length) {\n                case 0: break;\n                case 1:\n                    address = _address[0];\n                    break;\n                default:\n                    _address.sort();\n                    address = _address;\n            }\n\n            if (blockHash) {\n                if (fromBlock != null || toBlock != null) {\n                    throw new Error(\"invalid filter\");\n                }\n            }\n\n            const filter = <any>{ };\n            if (address) { filter.address = address; }\n            if (topics.length) { filter.topics = topics; }\n            if (fromBlock) { filter.fromBlock = fromBlock; }\n            if (toBlock) { filter.toBlock = toBlock; }\n            if (blockHash) { filter.blockHash = blockHash; }\n\n            return filter;\n        };\n\n        // Addresses could be async (ENS names or Addressables)\n        let address: Array<string | Promise<string>> = [ ];\n        if (filter.address) {\n            if (Array.isArray(filter.address)) {\n                for (const addr of filter.address) { address.push(this._getAddress(addr)); }\n            } else {\n                address.push(this._getAddress(filter.address));\n            }\n        }\n\n        let fromBlock: undefined | string | Promise<string> = undefined;\n        if (\"fromBlock\" in filter) { fromBlock = this._getBlockTag(filter.fromBlock); }\n\n        let toBlock: undefined | string | Promise<string> = undefined;\n        if (\"toBlock\" in filter) { toBlock = this._getBlockTag(filter.toBlock); }\n\n        if (address.filter((a) => (typeof(a) !== \"string\")).length ||\n            (fromBlock != null && typeof(fromBlock) !== \"string\") ||\n            (toBlock != null && typeof(toBlock) !== \"string\")) {\n\n            return Promise.all([ Promise.all(address), fromBlock, toBlock ]).then((result) => {\n                return resolve(result[0], result[1], result[2]);\n            });\n        }\n\n        return resolve(<Array<string>>address, fromBlock, toBlock);\n    }\n\n    /**\n     *  Returns or resolves to a transaction for %%request%%, resolving\n     *  any ENS names or [[Addressable]] and returning if already a valid\n     *  transaction.\n     */\n    _getTransactionRequest(_request: TransactionRequest): PerformActionTransaction | Promise<PerformActionTransaction> {\n        const request = <PerformActionTransaction>copyRequest(_request);\n\n        const promises: Array<Promise<void>> = [ ];\n        [ \"to\", \"from\" ].forEach((key) => {\n            if ((<any>request)[key] == null) { return; }\n\n            const addr = resolveAddress((<any>request)[key], this);\n            if (isPromise(addr)) {\n                promises.push((async function() { (<any>request)[key] = await addr; })());\n            } else {\n                (<any>request)[key] = addr;\n            }\n        });\n\n        if (request.blockTag != null) {\n            const blockTag = this._getBlockTag(request.blockTag);\n            if (isPromise(blockTag)) {\n                promises.push((async function() { request.blockTag = await blockTag; })());\n            } else {\n                request.blockTag = blockTag;\n            }\n        }\n\n        if (promises.length) {\n            return (async function() {\n                await Promise.all(promises);\n                return request;\n            })();\n        }\n\n        return request;\n    }\n\n    async getNetwork(): Promise<Network> {\n\n        // No explicit network was set and this is our first time\n        if (this.#networkPromise == null) {\n\n            // Detect the current network (shared with all calls)\n            const detectNetwork = (async () => {\n                try {\n                    const network = await this._detectNetwork();\n                    this.emit(\"network\", network, null);\n                    return network;\n                } catch (error) {\n                    if (this.#networkPromise === detectNetwork!) {\n                        this.#networkPromise = null;\n                    }\n                    throw error;\n                }\n            })();\n\n            this.#networkPromise = detectNetwork;\n            return (await detectNetwork).clone();\n        }\n\n        const networkPromise = this.#networkPromise;\n\n        const [ expected, actual ] = await Promise.all([\n            networkPromise,          // Possibly an explicit Network\n            this._detectNetwork()    // The actual connected network\n        ]);\n\n        if (expected.chainId !== actual.chainId) {\n            if (this.#anyNetwork) {\n                // The \"any\" network can change, so notify listeners\n                this.emit(\"network\", actual, expected);\n\n                // Update the network if something else hasn't already changed it\n                if (this.#networkPromise === networkPromise) {\n                    this.#networkPromise = Promise.resolve(actual);\n                }\n            } else {\n                // Otherwise, we do not allow changes to the underlying network\n                assert(false, `network changed: ${ expected.chainId } => ${ actual.chainId } `, \"NETWORK_ERROR\", {\n                    event: \"changed\"\n                });\n            }\n        }\n\n        return expected.clone();\n    }\n\n    async getFeeData(): Promise<FeeData> {\n        const network = await this.getNetwork();\n\n        const getFeeDataFunc = async () => {\n            const { _block, gasPrice, priorityFee } = await resolveProperties({\n                _block: this.#getBlock(\"latest\", false),\n                gasPrice: ((async () => {\n                    try {\n                        const value = await this.#perform({ method: \"getGasPrice\" });\n                        return getBigInt(value, \"%response\");\n                    } catch (error) { }\n                    return null\n                })()),\n                priorityFee: ((async () => {\n                    try {\n                        const value = await this.#perform({ method: \"getPriorityFee\" });\n                        return getBigInt(value, \"%response\");\n                    } catch (error) { }\n                    return null;\n                })())\n            });\n\n            let maxFeePerGas: null | bigint = null;\n            let maxPriorityFeePerGas: null | bigint = null;\n\n            // These are the recommended EIP-1559 heuristics for fee data\n            const block = this._wrapBlock(_block, network);\n            if (block && block.baseFeePerGas) {\n                maxPriorityFeePerGas = (priorityFee != null) ? priorityFee: BigInt(\"1000000000\");\n                maxFeePerGas = (block.baseFeePerGas * BN_2) + maxPriorityFeePerGas;\n            }\n\n            return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\n        };\n\n        // Check for a FeeDataNetWorkPlugin\n        const plugin = <FetchUrlFeeDataNetworkPlugin>network.getPlugin(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n        if (plugin) {\n            const req = new FetchRequest(plugin.url);\n            const feeData = await plugin.processFunc(getFeeDataFunc, this, req);\n            return new FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);\n        }\n\n        return await getFeeDataFunc();\n    }\n\n\n    async estimateGas(_tx: TransactionRequest): Promise<bigint> {\n        let tx = this._getTransactionRequest(_tx);\n        if (isPromise(tx)) { tx = await tx; }\n        return getBigInt(await this.#perform({\n            method: \"estimateGas\", transaction: tx\n        }), \"%response\");\n    }\n\n    async #call(tx: PerformActionTransaction, blockTag: string, attempt: number): Promise<string> {\n        assert (attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n             reason: \"TOO_MANY_REDIRECTS\",\n             transaction: Object.assign({ }, tx, { blockTag, enableCcipRead: true })\n         });\n\n         // This came in as a PerformActionTransaction, so to/from are safe; we can cast\n         const transaction = <PerformActionTransaction>copyRequest(tx);\n\n         try {\n             return hexlify(await this._perform({ method: \"call\", transaction, blockTag }));\n\n         } catch (error: any) {\n             // CCIP Read OffchainLookup\n             if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && dataSlice(error.data, 0, 4) === \"0x556f1830\") {\n                 const data = error.data;\n\n                 const txSender = await resolveAddress(transaction.to, this);\n\n                 // Parse the CCIP Read Arguments\n                 let ccipArgs: CcipArgs;\n                 try {\n                     ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));\n                 } catch (error: any) {\n                     assert(false, error.message, \"OFFCHAIN_FAULT\", {\n                         reason: \"BAD_DATA\", transaction, info: { data } });\n                 }\n\n                 // Check the sender of the OffchainLookup matches the transaction\n                 assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(),\n                     \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n                         action: \"call\",\n                         data,\n                         reason: \"OffchainLookup\",\n                         transaction: <any>transaction, // @TODO: populate data?\n                         invocation: null,\n                         revert: {\n                             signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                             name: \"OffchainLookup\",\n                             args: ccipArgs.errorArgs\n                         }\n                     });\n\n                 const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n                 assert(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n                     reason: \"FETCH_FAILED\", transaction, info: { data: error.data, errorArgs: ccipArgs.errorArgs } });\n\n                 const tx = {\n                     to: txSender,\n                     data: concat([ ccipArgs.selector, encodeBytes([ ccipResult, ccipArgs.extraData ]) ])\n                 };\n\n                 this.emit(\"debug\", { action: \"sendCcipReadCall\", transaction: tx });\n                 try {\n                     const result = await this.#call(tx, blockTag, attempt + 1);\n                     this.emit(\"debug\", { action: \"receiveCcipReadCallResult\", transaction: Object.assign({ }, tx), result });\n                     return result;\n                 } catch (error) {\n                     this.emit(\"debug\", { action: \"receiveCcipReadCallError\", transaction: Object.assign({ }, tx), error });\n                     throw error;\n                 }\n             }\n\n             throw error;\n         }\n    }\n\n    async #checkNetwork<T>(promise: Promise<T>): Promise<T> {\n        const { value } = await resolveProperties({\n            network: this.getNetwork(),\n            value: promise\n        });\n        return value;\n    }\n\n    async call(_tx: TransactionRequest): Promise<string> {\n        const { tx, blockTag } = await resolveProperties({\n            tx: this._getTransactionRequest(_tx),\n            blockTag: this._getBlockTag(_tx.blockTag)\n        });\n\n        return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0: -1));\n    }\n\n    // Account\n    async #getAccountValue(request: _PerformAccountRequest, _address: AddressLike, _blockTag?: BlockTag): Promise<any> {\n        let address: string | Promise<string> = this._getAddress(_address);\n        let blockTag: string | Promise<string> = this._getBlockTag(_blockTag);\n\n        if (typeof(address) !== \"string\" || typeof(blockTag) !== \"string\") {\n            [ address, blockTag ] = await Promise.all([ address, blockTag ]);\n        }\n\n        return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));\n    }\n\n    async getBalance(address: AddressLike, blockTag?: BlockTag): Promise<bigint> {\n        return getBigInt(await this.#getAccountValue({ method: \"getBalance\" }, address, blockTag), \"%response\");\n    }\n\n    async getTransactionCount(address: AddressLike, blockTag?: BlockTag): Promise<number> {\n        return getNumber(await this.#getAccountValue({ method: \"getTransactionCount\" }, address, blockTag), \"%response\");\n    }\n\n    async getCode(address: AddressLike, blockTag?: BlockTag): Promise<string> {\n        return hexlify(await this.#getAccountValue({ method: \"getCode\" }, address, blockTag));\n    }\n\n    async getStorage(address: AddressLike, _position: BigNumberish, blockTag?: BlockTag): Promise<string> {\n        const position = getBigInt(_position, \"position\");\n        return hexlify(await this.#getAccountValue({ method: \"getStorage\", position }, address, blockTag));\n    }\n\n    // Write\n    async broadcastTransaction(signedTx: string): Promise<TransactionResponse> {\n        const { blockNumber, hash, network } = await resolveProperties({\n             blockNumber: this.getBlockNumber(),\n             hash: this._perform({\n                 method: \"broadcastTransaction\",\n                 signedTransaction: signedTx\n             }),\n             network: this.getNetwork()\n        });\n\n        const tx = Transaction.from(signedTx);\n        if (tx.hash !== hash) {\n            throw new Error(\"@TODO: the returned hash did not match\");\n        }\n\n        return this._wrapTransactionResponse(<any>tx, network).replaceableTransaction(blockNumber);\n    }\n\n    async #getBlock(block: BlockTag | string, includeTransactions: boolean): Promise<any> {\n        // @TODO: Add CustomBlockPlugin check\n\n        if (isHexString(block, 32)) {\n            return await this.#perform({\n                method: \"getBlock\", blockHash: block, includeTransactions\n            });\n        }\n\n        let blockTag = this._getBlockTag(block);\n        if (typeof(blockTag) !== \"string\") { blockTag = await blockTag; }\n\n        return await this.#perform({\n            method: \"getBlock\", blockTag, includeTransactions\n        });\n    }\n\n    // Queries\n    async getBlock(block: BlockTag | string, prefetchTxs?: boolean): Promise<null | Block> {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#getBlock(block, !!prefetchTxs)\n        });\n        if (params == null) { return null; }\n\n        return this._wrapBlock(params, network);\n    }\n\n    async getTransaction(hash: string): Promise<null | TransactionResponse> {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransaction\", hash })\n        });\n        if (params == null) { return null; }\n\n        return this._wrapTransactionResponse(params, network);\n    }\n\n    async getTransactionReceipt(hash: string): Promise<null | TransactionReceipt> {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransactionReceipt\", hash })\n        });\n        if (params == null) { return null; }\n\n        // Some backends did not backfill the effectiveGasPrice into old transactions\n        // in the receipt, so we look it up manually and inject it.\n        if (params.gasPrice == null && params.effectiveGasPrice == null) {\n            const tx = await this.#perform({ method: \"getTransaction\", hash });\n            if (tx == null) { throw new Error(\"report this; could not find tx or effectiveGasPrice\"); }\n            params.effectiveGasPrice = tx.gasPrice;\n        }\n\n        return this._wrapTransactionReceipt(params, network);\n    }\n\n    async getTransactionResult(hash: string): Promise<null | string> {\n        const { result } = await resolveProperties({\n            network: this.getNetwork(),\n            result: this.#perform({ method: \"getTransactionResult\", hash })\n        });\n        if (result == null) { return null; }\n        return hexlify(result);\n    }\n\n    // Bloom-filter Queries\n    async getLogs(_filter: Filter | FilterByBlockHash): Promise<Array<Log>> {\n        let filter = this._getFilter(_filter);\n        if (isPromise(filter)) { filter = await filter; }\n\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform<Array<LogParams>>({ method: \"getLogs\", filter })\n        });\n\n        return params.map((p) => this._wrapLog(p, network));\n    }\n\n    // ENS\n    _getProvider(chainId: number): AbstractProvider {\n        assert(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_getProvider()\"\n        });\n    }\n\n    async getResolver(name: string): Promise<null | EnsResolver> {\n        return await EnsResolver.fromName(this, name);\n    }\n\n    async getAvatar(name: string): Promise<null | string> {\n        const resolver = await this.getResolver(name);\n        if (resolver) { return await resolver.getAvatar(); }\n        return null;\n    }\n\n    async resolveName(name: string): Promise<null | string>{\n        const resolver = await this.getResolver(name);\n        if (resolver) { return await resolver.getAddress(); }\n        return null;\n    }\n\n    async lookupAddress(address: string): Promise<null | string> {\n        address = getAddress(address);\n        const node = namehash(address.substring(2).toLowerCase() + \".addr.reverse\");\n\n        try {\n\n            const ensAddr = await EnsResolver.getEnsAddress(this);\n            const ensContract = new Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], this);\n\n            const resolver = await ensContract.resolver(node);\n            if (resolver == null || resolver === ZeroAddress) { return null; }\n\n            const resolverContract = new Contract(resolver, [\n                \"function name(bytes32) view returns (string)\"\n            ], this);\n            const name = await resolverContract.name(node);\n\n            // Failed forward resolution\n            const check = await this.resolveName(name);\n            if (check !== address) { return null; }\n\n            return name;\n\n        } catch (error) {\n            // No data was returned from the resolver\n            if (isError(error, \"BAD_DATA\") && error.value === \"0x\") {\n                return null;\n            }\n\n            // Something reerted\n            if (isError(error, \"CALL_EXCEPTION\")) { return null; }\n\n            throw error;\n        }\n\n        return null;\n    }\n\n    async waitForTransaction(hash: string, _confirms?: null | number, timeout?: null | number): Promise<null | TransactionReceipt> {\n        const confirms = (_confirms != null) ? _confirms: 1;\n        if (confirms === 0) { return this.getTransactionReceipt(hash); }\n\n        return new Promise(async (resolve, reject) => {\n            let timer: null | Timer = null;\n\n            const listener = (async (blockNumber: number) => {\n                try {\n                    const receipt = await this.getTransactionReceipt(hash);\n                    if (receipt != null) {\n                        if (blockNumber - receipt.blockNumber + 1 >= confirms) {\n                            resolve(receipt);\n                            //this.off(\"block\", listener);\n                            if (timer) {\n                                clearTimeout(timer);\n                                timer = null;\n                            }\n                            return;\n                        }\n                    }\n                } catch (error) {\n                    console.log(\"EEE\", error);\n                }\n                this.once(\"block\", listener);\n            });\n\n            if (timeout != null) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n                    this.off(\"block\", listener);\n                    reject(makeError(\"timeout\", \"TIMEOUT\", { reason: \"timeout\" }));\n                }, timeout);\n            }\n\n            listener(await this.getBlockNumber());\n        });\n    }\n\n    async waitForBlock(blockTag?: BlockTag): Promise<Block> {\n        assert(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n            operation: \"waitForBlock\"\n        });\n    }\n\n    /**\n     *  Clear a timer created using the [[_setTimeout]] method.\n     */\n    _clearTimeout(timerId: number): void {\n        const timer = this.#timers.get(timerId);\n        if (!timer) { return; }\n        if (timer.timer) { clearTimeout(timer.timer); }\n        this.#timers.delete(timerId);\n    }\n\n    /**\n     *  Create a timer that will execute %%func%% after at least %%timeout%%\n     *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute\n     *  in the next event loop.\n     *\n     *  [Pausing](AbstractProvider-paused) the provider will pause any\n     *  associated timers.\n     */\n    _setTimeout(_func: () => void, timeout?: number): number {\n        if (timeout == null) { timeout = 0; }\n        const timerId = this.#nextTimer++;\n        const func = () => {\n            this.#timers.delete(timerId);\n            _func();\n        };\n\n        if (this.paused) {\n            this.#timers.set(timerId, { timer: null, func, time: timeout });\n        } else {\n            const timer = setTimeout(func, timeout);\n            this.#timers.set(timerId, { timer, func, time: getTime() });\n        }\n\n        return timerId;\n    }\n\n    /**\n     *  Perform %%func%% on each subscriber.\n     */\n    _forEachSubscriber(func: (s: Subscriber) => void): void {\n        for (const sub of this.#subs.values()) {\n            func(sub.subscriber);\n        }\n    }\n\n    /**\n     *  Sub-classes may override this to customize subscription\n     *  implementations.\n     */\n    _getSubscriber(sub: Subscription): Subscriber {\n        switch (sub.type) {\n            case \"debug\":\n            case \"error\":\n            case \"network\":\n                return new UnmanagedSubscriber(sub.type);\n            case \"block\": {\n                const subscriber = new PollingBlockSubscriber(this);\n                subscriber.pollingInterval = this.pollingInterval;\n                return subscriber;\n            }\n            case \"safe\": case \"finalized\":\n                return new PollingBlockTagSubscriber(this, sub.type);\n            case \"event\":\n                return new PollingEventSubscriber(this, sub.filter);\n            case \"transaction\":\n                return new PollingTransactionSubscriber(this, sub.hash);\n            case \"orphan\":\n                return new PollingOrphanSubscriber(this, sub.filter);\n        }\n\n        throw new Error(`unsupported event: ${ sub.type }`);\n    }\n\n    /**\n     *  If a [[Subscriber]] fails and needs to replace itself, this\n     *  method may be used.\n     *\n     *  For example, this is used for providers when using the\n     *  ``eth_getFilterChanges`` method, which can return null if state\n     *  filters are not supported by the backend, allowing the Subscriber\n     *  to swap in a [[PollingEventSubscriber]].\n     */\n    _recoverSubscriber(oldSub: Subscriber, newSub: Subscriber): void {\n        for (const sub of this.#subs.values()) {\n            if (sub.subscriber === oldSub) {\n                if (sub.started) { sub.subscriber.stop(); }\n                sub.subscriber = newSub;\n                if (sub.started) { newSub.start(); }\n                if (this.#pausedState != null) { newSub.pause(this.#pausedState); }\n                break;\n            }\n        }\n    }\n\n    async #hasSub(event: ProviderEvent, emitArgs?: Array<any>): Promise<null | Sub> {\n        let sub = await getSubscription(event, this);\n        // This is a log that is removing an existing log; we actually want\n        // to emit an orphan event for the removed log\n        if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\n            sub = await getSubscription({ orphan: \"drop-log\", log: emitArgs[0] }, this);\n        }\n        return this.#subs.get(sub.tag) || null;\n    }\n\n    async #getSub(event: ProviderEvent): Promise<Sub> {\n        const subscription = await getSubscription(event, this);\n\n        // Prevent tampering with our tag in any subclass' _getSubscriber\n        const tag = subscription.tag;\n\n        let sub = this.#subs.get(tag);\n        if (!sub) {\n            const subscriber = this._getSubscriber(subscription);\n\n            const addressableMap = new WeakMap();\n            const nameMap = new Map();\n            sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [ ] };\n            this.#subs.set(tag, sub);\n        }\n\n        return sub;\n    }\n\n    async on(event: ProviderEvent, listener: Listener): Promise<this> {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({ listener, once: false });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) { sub.subscriber.pause(this.#pausedState); }\n        }\n        return this;\n    }\n\n    async once(event: ProviderEvent, listener: Listener): Promise<this> {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({ listener, once: true });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) { sub.subscriber.pause(this.#pausedState); }\n        }\n        return this;\n    }\n\n    async emit(event: ProviderEvent, ...args: Array<any>): Promise<boolean> {\n        const sub = await this.#hasSub(event, args);\n        // If there is not subscription or if a recent emit removed\n        // the last of them (which also deleted the sub) do nothing\n        if (!sub || sub.listeners.length === 0) { return false; };\n\n        const count = sub.listeners.length;\n        sub.listeners = sub.listeners.filter(({ listener, once }) => {\n            const payload = new EventPayload(this, (once ? null: listener), event);\n            try {\n                listener.call(this, ...args, payload);\n            } catch(error) { }\n            return !once;\n        });\n\n        if (sub.listeners.length === 0) {\n            if (sub.started) { sub.subscriber.stop(); }\n            this.#subs.delete(sub.tag);\n        }\n\n        return (count > 0);\n    }\n\n    async listenerCount(event?: ProviderEvent): Promise<number> {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) { return 0; }\n            return sub.listeners.length;\n        }\n\n        let total = 0;\n        for (const { listeners } of this.#subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n\n    async listeners(event?: ProviderEvent): Promise<Array<Listener>> {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) { return  [ ]; }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n        let result: Array<Listener> = [ ];\n        for (const { listeners } of this.#subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n\n    async off(event: ProviderEvent, listener?: Listener): Promise<this> {\n        const sub = await this.#hasSub(event);\n        if (!sub) { return this; }\n\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) { sub.listeners.splice(index, 1); }\n        }\n\n        if (!listener || sub.listeners.length === 0) {\n            if (sub.started) { sub.subscriber.stop(); }\n            this.#subs.delete(sub.tag);\n        }\n\n        return this;\n    }\n\n    async removeAllListeners(event?: ProviderEvent): Promise<this> {\n        if (event) {\n            const { tag, started, subscriber } = await this.#getSub(event);\n            if (started) { subscriber.stop(); }\n            this.#subs.delete(tag);\n        } else {\n            for (const [ tag, { started, subscriber } ] of this.#subs) {\n                if (started) { subscriber.stop(); }\n                this.#subs.delete(tag);\n            }\n        }\n        return this;\n    }\n\n    // Alias for \"on\"\n    async addListener(event: ProviderEvent, listener: Listener): Promise<this> {\n       return await this.on(event, listener);\n    }\n\n    // Alias for \"off\"\n    async removeListener(event: ProviderEvent, listener: Listener): Promise<this> {\n       return this.off(event, listener);\n    }\n\n    /**\n     *  If this provider has been destroyed using the [[destroy]] method.\n     *\n     *  Once destroyed, all resources are reclaimed, internal event loops\n     *  and timers are cleaned up and no further requests may be sent to\n     *  the provider.\n     */\n    get destroyed(): boolean {\n        return this.#destroyed;\n    }\n\n    /**\n     *  Sub-classes may use this to shutdown any sockets or release their\n     *  resources and reject any pending requests.\n     *\n     *  Sub-classes **must** call ``super.destroy()``.\n     */\n    destroy(): void {\n        // Stop all listeners\n        this.removeAllListeners();\n\n        // Shut down all tiemrs\n        for (const timerId of this.#timers.keys()) {\n            this._clearTimeout(timerId);\n        }\n\n        this.#destroyed = true;\n    }\n\n    /**\n     *  Whether the provider is currently paused.\n     *\n     *  A paused provider will not emit any events, and generally should\n     *  not make any requests to the network, but that is up to sub-classes\n     *  to manage.\n     *\n     *  Setting ``paused = true`` is identical to calling ``.pause(false)``,\n     *  which will buffer any events that occur while paused until the\n     *  provider is unpaused.\n     */\n    get paused(): boolean { return (this.#pausedState != null); }\n    set paused(pause: boolean) {\n        if (!!pause === this.paused) { return; }\n\n        if (this.paused) {\n            this.resume();\n        } else {\n            this.pause(false);\n        }\n    }\n\n    /**\n     *  Pause the provider. If %%dropWhilePaused%%, any events that occur\n     *  while paused are dropped, otherwise all events will be emitted once\n     *  the provider is unpaused.\n     */\n    pause(dropWhilePaused?: boolean): void {\n        this.#lastBlockNumber = -1;\n\n        if (this.#pausedState != null) {\n            if (this.#pausedState == !!dropWhilePaused) { return; }\n            assert(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"pause\"\n            });\n        }\n\n        this._forEachSubscriber((s) => s.pause(dropWhilePaused));\n        this.#pausedState = !!dropWhilePaused;\n\n        for (const timer of this.#timers.values()) {\n            // Clear the timer\n            if (timer.timer) { clearTimeout(timer.timer); }\n\n            // Remaining time needed for when we become unpaused\n            timer.time = getTime() - timer.time;\n        }\n    }\n\n    /**\n     *  Resume the provider.\n     */\n    resume(): void {\n        if (this.#pausedState == null) { return; }\n\n        this._forEachSubscriber((s) => s.resume());\n        this.#pausedState = null;\n        for (const timer of this.#timers.values()) {\n            // Remaining time when we were paused\n            let timeout = timer.time;\n            if (timeout < 0) { timeout = 0; }\n\n            // Start time (in cause paused, so we con compute remaininf time)\n            timer.time = getTime();\n\n            // Start the timer\n            setTimeout(timer.func, timeout);\n        }\n    }\n}\n\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        const bytes = _parseBytes(result, start);\n        if (bytes) { return toUtf8String(bytes); }\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n    try {\n        const offset = getNumber(dataSlice(result, start, start + 32));\n        const length = getNumber(dataSlice(result, offset, offset + 32));\n\n        return dataSlice(result, offset + 32, offset + 32 + length);\n    } catch (error) { }\n    return null;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = toBeArray(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\nconst empty: Uint8Array = new Uint8Array([ ]);\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>): string {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(empty);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = getBytes(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return concat(result);\n}\n\nconst zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\"\nfunction parseOffchainLookup(data: string): CcipArgs {\n    const result: CcipArgs = {\n        sender: \"\", urls: [ ], calldata: \"\", selector: \"\", extraData: \"\", errorArgs: [ ]\n    };\n\n    assert(dataLength(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n        reason: \"insufficient OffchainLookup data\"\n    });\n\n    const sender = dataSlice(data, 0, 32);\n    assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup sender\"\n    });\n    result.sender = dataSlice(sender, 12);\n\n    // Read the URLs from the response\n    try {\n        const urls: Array<string> = [];\n        const urlsOffset = getNumber(dataSlice(data, 32, 64));\n        const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));\n        const urlsData = dataSlice(data, urlsOffset + 32);\n        for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n            if (url == null) { throw new Error(\"abort\"); }\n            urls.push(url);\n        }\n        result.urls = urls;\n    } catch (error) {\n        assert(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup urls\"\n        });\n    }\n\n    // Get the CCIP calldata to forward\n    try {\n        const calldata = _parseBytes(data, 64);\n        if (calldata == null) { throw new Error(\"abort\"); }\n        result.calldata = calldata;\n    } catch (error) {\n        assert(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup calldata\"\n        });\n    }\n\n    // Get the callbackSelector (bytes4)\n    assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup callbaackSelector\"\n    });\n    result.selector = dataSlice(data, 96, 100);\n\n    // Get the extra data to send back to the contract as context\n    try {\n        const extraData = _parseBytes(data, 128);\n        if (extraData == null) { throw new Error(\"abort\"); }\n        result.extraData = extraData;\n    } catch (error) {\n        assert(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup extraData\"\n        });\n    }\n\n    result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map((k) => (<any>result)[k])\n\n    return result;\n}\n","/**\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\n *  are sufficent for most developers, but this is provided to\n *  fascilitate more complex Signers.\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nimport { resolveAddress } from \"../address/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties, getBigInt, resolveProperties,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { copyRequest } from \"./provider.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type {\n    BlockTag, Provider, TransactionRequest, TransactionResponse\n} from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\n\nfunction checkProvider(signer: AbstractSigner, operation: string): Provider {\n    if (signer.provider) { return signer.provider; }\n    assert(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", { operation });\n}\n\nasync function populate(signer: AbstractSigner, tx: TransactionRequest): Promise<TransactionLike<string>> {\n    let pop: any = copyRequest(tx);\n\n    if (pop.to != null) { pop.to = resolveAddress(pop.to, signer); }\n\n    if (pop.from != null) {\n        const from = pop.from;\n        pop.from = Promise.all([\n            signer.getAddress(),\n            resolveAddress(from, signer)\n        ]).then(([ address, from ]) => {\n            assertArgument(address.toLowerCase() === from.toLowerCase(),\n                \"transaction from mismatch\", \"tx.from\", from);\n            return address;\n        });\n    } else {\n        pop.from = signer.getAddress();\n    }\n\n    return await resolveProperties(pop);\n}\n\n\n/**\n *  An **AbstractSigner** includes most of teh functionality required\n *  to get a [[Signer]] working as expected, but requires a few\n *  Signer-specific methods be overridden.\n *\n */\nexport abstract class AbstractSigner<P extends null | Provider = null | Provider> implements Signer {\n    /**\n     *  The provider this signer is connected to.\n     */\n    readonly provider!: P;\n\n    /**\n     *  Creates a new Signer connected to %%provider%%.\n     */\n    constructor(provider?: P) {\n        defineProperties<AbstractSigner>(this, { provider: (provider || null) });\n    }\n\n    /**\n     *  Resolves to the Signer address.\n     */\n    abstract getAddress(): Promise<string>;\n\n    /**\n     *  Returns the signer connected to %%provider%%.\n     *\n     *  This may throw, for example, a Signer connected over a Socket or\n     *  to a specific instance of a node may not be transferrable.\n     */\n    abstract connect(provider: null | Provider): Signer;\n\n    async getNonce(blockTag?: BlockTag): Promise<number> {\n        return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n    }\n\n    async populateCall(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        const pop = await populate(this, tx);\n        return pop;\n    }\n\n    async populateTransaction(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        const provider = checkProvider(this, \"populateTransaction\");\n\n        const pop = await populate(this, tx);\n\n        if (pop.nonce == null) {\n            pop.nonce = await this.getNonce(\"pending\");\n        }\n\n        if (pop.gasLimit == null) {\n            pop.gasLimit = await this.estimateGas(pop);\n        }\n\n        // Populate the chain ID\n        const network = await (<Provider>(this.provider)).getNetwork();\n        if (pop.chainId != null) {\n            const chainId = getBigInt(pop.chainId);\n            assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n        } else {\n            pop.chainId = network.chainId;\n        }\n\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = (pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null);\n        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n            assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n        } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n            assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n        }\n\n        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            pop.type = 2;\n\n        } else if (pop.type === 0 || pop.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n\n            assert(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getGasPrice\" });\n\n            // Populate missing gasPrice\n            if (pop.gasPrice == null) { pop.gasPrice = feeData.gasPrice; }\n\n        } else {\n\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n\n            if (pop.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n\n                    // Upgrade transaction from null to eip-1559\n                    pop.type = 2;\n\n                    if (pop.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = pop.gasPrice;\n                        delete pop.gasPrice;\n                        pop.maxFeePerGas = gasPrice;\n                        pop.maxPriorityFeePerGas = gasPrice;\n\n                    } else {\n                        // Populate missing fee data\n\n                        if (pop.maxFeePerGas == null) {\n                            pop.maxFeePerGas = feeData.maxFeePerGas;\n                        }\n\n                        if (pop.maxPriorityFeePerGas == null) {\n                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                        }\n                    }\n\n                } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n\n                    // ...but they are trying to use EIP-1559 properties\n                    assert(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"populateTransaction\" });\n\n                    // Populate missing fee data\n                    if (pop.gasPrice == null) {\n                        pop.gasPrice = feeData.gasPrice;\n                    }\n\n                    // Explicitly set untyped transaction to legacy\n                    // @TODO: Maybe this shold allow type 1?\n                    pop.type = 0;\n\n               } else {\n                    // getFeeData has failed us.\n                    assert(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"signer.getFeeData\" });\n                }\n\n            } else if (pop.type === 2 || pop.type === 3) {\n                // Explicitly using EIP-1559 or EIP-4844\n\n                // Populate missing fee data\n                if (pop.maxFeePerGas == null) {\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\n                }\n\n                if (pop.maxPriorityFeePerGas == null) {\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                }\n            }\n        }\n\n//@TOOD: Don't await all over the place; save them up for\n// the end for better batching\n        return await resolveProperties(pop);\n    }\n\n    async estimateGas(tx: TransactionRequest): Promise<bigint> {\n        return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n    }\n\n    async call(tx: TransactionRequest): Promise<string> {\n        return checkProvider(this, \"call\").call(await this.populateCall(tx));\n    }\n\n    async resolveName(name: string): Promise<null | string> {\n        const provider = checkProvider(this, \"resolveName\");\n        return await provider.resolveName(name);\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        const provider = checkProvider(this, \"sendTransaction\");\n\n        const pop = await this.populateTransaction(tx);\n        delete pop.from;\n        const txObj = Transaction.from(pop);\n        return await provider.broadcastTransaction(await this.signTransaction(txObj));\n    }\n\n    abstract signTransaction(tx: TransactionRequest): Promise<string>;\n    abstract signMessage(message: string | Uint8Array): Promise<string>;\n    abstract signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;\n}\n\n/**\n *  A **VoidSigner** is a class deisgned to allow an address to be used\n *  in any API which accepts a Signer, but for which there are no\n *  credentials available to perform any actual signing.\n *\n *  This for example allow impersonating an account for the purpose of\n *  static calls or estimating gas, but does not allow sending transactions.\n */\nexport class VoidSigner extends AbstractSigner {\n    /**\n     *  The signer address.\n     */\n    readonly address!: string;\n\n    /**\n     *  Creates a new **VoidSigner** with %%address%% attached to\n     *  %%provider%%.\n     */\n    constructor(address: string, provider?: null | Provider) {\n        super(provider);\n        defineProperties<VoidSigner>(this, { address });\n    }\n\n    async getAddress(): Promise<string> { return this.address; }\n\n    connect(provider: null | Provider): VoidSigner {\n        return new VoidSigner(this.address, provider);\n    }\n\n    #throwUnsupported(suffix: string, operation: string): never {\n        assert(false, `VoidSigner cannot sign ${ suffix }`, \"UNSUPPORTED_OPERATION\", { operation });\n    }\n\n    async signTransaction(tx: TransactionRequest): Promise<string> {\n        this.#throwUnsupported(\"transactions\", \"signTransaction\");\n    }\n\n    async signMessage(message: string | Uint8Array): Promise<string> {\n        this.#throwUnsupported(\"messages\", \"signMessage\");\n    }\n\n    async signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        this.#throwUnsupported(\"typed-data\", \"signTypedData\");\n    }\n}\n\n","import { isError } from \"../utils/index.js\";\n\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\n\nimport type { AbstractProvider, Subscriber } from \"./abstract-provider.js\";\nimport type { Network } from \"./network.js\";\nimport type { EventFilter } from \"./provider.js\";\nimport type { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n\nfunction copy(obj: any): any {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n *  Some backends support subscribing to events using a Filter ID.\n *\n *  When subscribing with this technique, the node issues a unique\n *  //Filter ID//. At this point the node dedicates resources to\n *  the filter, so that periodic calls to follow up on the //Filter ID//\n *  will receive any events since the last call.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class FilterIdSubscriber implements Subscriber {\n    #provider: JsonRpcApiProvider;\n\n    #filterIdPromise: null | Promise<string>;\n    #poller: (b: number) => Promise<void>;\n\n    #running: boolean;\n\n    #network: null | Network;\n\n    #hault: boolean;\n\n    /**\n     *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]\n     *  and [[_emitResults]] to setup the subscription and provide the event\n     *  to the %%provider%%.\n     */\n    constructor(provider: JsonRpcApiProvider) {\n        this.#provider = provider;\n\n        this.#filterIdPromise = null;\n        this.#poller = this.#poll.bind(this);\n\n        this.#running = false;\n\n        this.#network = null;\n\n        this.#hault = false;\n    }\n\n    /**\n     *  Sub-classes **must** override this to begin the subscription.\n     */\n    _subscribe(provider: JsonRpcApiProvider): Promise<string> {\n        throw new Error(\"subclasses must override this\");\n    }\n\n    /**\n     *  Sub-classes **must** override this handle the events.\n     */\n    _emitResults(provider: AbstractProvider, result: Array<any>): Promise<void> {\n        throw new Error(\"subclasses must override this\");\n    }\n\n    /**\n     *  Sub-classes **must** override this handle recovery on errors.\n     */\n    _recover(provider: AbstractProvider): Subscriber {\n        throw new Error(\"subclasses must override this\");\n    }\n\n    async #poll(blockNumber: number): Promise<void> {\n        try {\n            // Subscribe if necessary\n            if (this.#filterIdPromise == null) {\n                this.#filterIdPromise = this._subscribe(this.#provider);\n            }\n\n            // Get the Filter ID\n            let filterId: null | string = null;\n            try {\n                filterId = await this.#filterIdPromise;\n            } catch (error) {\n                if (!isError(error, \"UNSUPPORTED_OPERATION\") || error.operation !== \"eth_newFilter\") {\n                    throw error;\n                }\n            }\n\n            // The backend does not support Filter ID; downgrade to\n            // polling\n            if (filterId == null) {\n                this.#filterIdPromise = null;\n                this.#provider._recoverSubscriber(this, this._recover(this.#provider));\n                return;\n            }\n\n            const network = await this.#provider.getNetwork();\n            if (!this.#network) { this.#network = network; }\n\n            if ((this.#network as Network).chainId !== network.chainId) {\n                throw new Error(\"chaid changed\");\n            }\n\n            if (this.#hault) { return; }\n\n            const result = await this.#provider.send(\"eth_getFilterChanges\", [ filterId ]);\n            await this._emitResults(this.#provider, result);\n        } catch (error) { console.log(\"@TODO\", error); }\n\n        this.#provider.once(\"block\", this.#poller);\n    }\n\n    #teardown(): void {\n        const filterIdPromise = this.#filterIdPromise;\n        if (filterIdPromise) {\n            this.#filterIdPromise = null;\n            filterIdPromise.then((filterId) => {\n                if (this.#provider.destroyed) { return; }\n                this.#provider.send(\"eth_uninstallFilter\", [ filterId ]);\n            });\n        }\n    }\n\n    start(): void {\n        if (this.#running) { return; }\n        this.#running = true;\n\n        this.#poll(-2);\n    }\n\n    stop(): void {\n        if (!this.#running) { return; }\n        this.#running = false;\n\n        this.#hault = true;\n        this.#teardown();\n        this.#provider.off(\"block\", this.#poller);\n    }\n\n    pause(dropWhilePaused?: boolean): void {\n        if (dropWhilePaused){ this.#teardown(); }\n        this.#provider.off(\"block\", this.#poller);\n    }\n\n    resume(): void { this.start(); }\n}\n\n/**\n *  A **FilterIdSubscriber** for receiving contract events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class FilterIdEventSubscriber extends FilterIdSubscriber {\n    #event: EventFilter;\n\n    /**\n     *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%\n     *  listening for %%filter%%.\n     */\n    constructor(provider: JsonRpcApiProvider, filter: EventFilter) {\n        super(provider);\n        this.#event = copy(filter);\n    }\n\n    _recover(provider: AbstractProvider): Subscriber {\n        return new PollingEventSubscriber(provider, this.#event);\n    }\n\n    async _subscribe(provider: JsonRpcApiProvider): Promise<string> {\n        const filterId = await provider.send(\"eth_newFilter\", [ this.#event ]);\n        return filterId;\n    }\n\n    async _emitResults(provider: JsonRpcApiProvider, results: Array<any>): Promise<void> {\n        for (const result of results) {\n            provider.emit(this.#event, provider._wrapLog(result, provider._network));\n        }\n    }\n}\n\n/**\n *  A **FilterIdSubscriber** for receiving pending transactions events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nexport class FilterIdPendingSubscriber extends FilterIdSubscriber {\n    async _subscribe(provider: JsonRpcApiProvider): Promise<string> {\n        return await provider.send(\"eth_newPendingTransactionFilter\", [ ]);\n    }\n\n    async _emitResults(provider: JsonRpcApiProvider, results: Array<any>): Promise<void> {\n        for (const result of results) {\n            provider.emit(\"pending\", result);\n        }\n    }\n}\n","/**\n *  One of the most common ways to interact with the blockchain is\n *  by a node running a JSON-RPC interface which can be connected to,\n *  based on the transport, using:\n *\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\n *  - WebSocket - [[WebSocketProvider]]\n *  - IPC - [[IpcSocketProvider]]\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */\n\n// @TODO:\n// - Add the batching API\n\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\n\nimport { AbiCoder } from \"../abi/index.js\";\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { TypedDataEncoder } from \"../hash/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nimport {\n    defineProperties, getBigInt, hexlify, isHexString, toQuantity, toUtf8Bytes,\n    isError, makeError, assert, assertArgument,\n    FetchRequest, resolveProperties\n} from \"../utils/index.js\";\n\nimport { AbstractProvider, UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\nimport { Network } from \"./network.js\";\nimport { FilterIdEventSubscriber, FilterIdPendingSubscriber } from \"./subscriber-filterid.js\";\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type { PerformActionRequest, Subscriber, Subscription } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\nimport type { Provider, TransactionRequest, TransactionResponse } from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\ntype Timer = ReturnType<typeof setTimeout>;\n\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy<T = any>(value: T): T {\n    if (value == null || Primitive.indexOf(typeof(value)) >= 0) {\n        return value;\n    }\n\n    // Keep any Addressable\n    if (typeof((<any>value).getAddress) === \"function\") {\n        return value;\n    }\n\n    if (Array.isArray(value)) { return <any>(value.map(deepCopy)); }\n\n    if (typeof(value) === \"object\") {\n        return Object.keys(value).reduce((accum, key) => {\n            accum[key] = (<any>value)[key];\n            return accum;\n        }, <any>{ });\n    }\n\n    throw new Error(`should not happen: ${ value } (${ typeof(value) })`);\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\ninterface Pollable {\n    pollingInterval: number;\n}\n\nfunction isPollable(value: any): value is Pollable {\n    return (value && typeof(value.pollingInterval) === \"number\");\n}\n\n/**\n *  A JSON-RPC payload, which are sent to a JSON-RPC server.\n */\nexport type JsonRpcPayload = {\n    /**\n     *  The JSON-RPC request ID.\n     */\n    id: number;\n\n    /**\n     *  The JSON-RPC request method.\n     */\n    method: string;\n\n    /**\n     *  The JSON-RPC request parameters.\n     */\n    params: Array<any> | Record<string, any>;\n\n    /**\n     *  A required constant in the JSON-RPC specification.\n     */\n    jsonrpc: \"2.0\";\n};\n\n/**\n *  A JSON-RPC result, which are returned on success from a JSON-RPC server.\n */\nexport type JsonRpcResult = {\n    /**\n     *  The response ID to match it to the relevant request.\n     */\n    id: number;\n\n    /**\n     *  The response result.\n     */\n    result: any;\n};\n\n/**\n *  A JSON-RPC error, which are returned on failure from a JSON-RPC server.\n */\nexport type JsonRpcError = {\n    /**\n     *  The response ID to match it to the relevant request.\n     */\n    id: number;\n\n    /**\n     *  The response error.\n     */\n    error: {\n        code: number;\n        message?: string;\n        data?: any;\n    }\n};\n\n/**\n *  When subscribing to the ``\"debug\"`` event, the [[Listener]] will\n *  receive this object as the first parameter.\n */\nexport type DebugEventJsonRpcApiProvider = {\n    action: \"sendRpcPayload\",\n    payload: JsonRpcPayload | Array<JsonRpcPayload>\n} | {\n    action: \"receiveRpcResult\",\n    result: Array<JsonRpcResult | JsonRpcError>\n} | {\n    action: \"receiveRpcError\",\n    error: Error\n};\n\n/**\n *  Options for configuring a [[JsonRpcApiProvider]]. Much of this\n *  is targetted towards sub-classes, which often will not expose\n *  any of these options to their consumers.\n *\n *  **``polling``** - use the polling strategy is used immediately\n *  for events; otherwise, attempt to use filters and fall back onto\n *  polling (default: ``false``)\n *\n *  **``staticNetwork``** - do not request chain ID on requests to\n *  validate the underlying chain has not changed (default: ``null``)\n *\n *  This should **ONLY** be used if it is **certain** that the network\n *  cannot change, such as when using INFURA (since the URL dictates the\n *  network). If the network is assumed static and it does change, this\n *  can have tragic consequences. For example, this **CANNOT** be used\n *  with MetaMask, since the user can select a new network from the\n *  drop-down at any time.\n *\n *  **``batchStallTime``** - how long (ms) to aggregate requests into a\n *  single batch. ``0`` indicates batching will only encompass the current\n *  event loop. If ``batchMaxCount = 1``, this is ignored. (default: ``10``)\n *\n *  **``batchMaxSize``** - target maximum size (bytes) to allow per batch\n *  request (default: 1Mb)\n *\n *  **``batchMaxCount``** - maximum number of requests to allow in a batch.\n *  If ``batchMaxCount = 1``, then batching is disabled. (default: ``100``)\n *\n *  **``cacheTimeout``** - passed as [[AbstractProviderOptions]].\n */\nexport type JsonRpcApiProviderOptions = {\n    polling?: boolean;\n    staticNetwork?: null | boolean | Network;\n    batchStallTime?: number;\n    batchMaxSize?: number;\n    batchMaxCount?: number;\n\n    cacheTimeout?: number;\n    pollingInterval?: number;\n};\n\nconst defaultOptions = {\n    polling: false,\n    staticNetwork: null,\n\n    batchStallTime: 10,      // 10ms\n    batchMaxSize: (1 << 20), // 1Mb\n    batchMaxCount: 100,      // 100 requests\n\n    cacheTimeout: 250,\n    pollingInterval: 4000\n}\n\n/**\n *  A **JsonRpcTransactionRequest** is formatted as needed by the JSON-RPC\n *  Ethereum API specification.\n */\nexport interface JsonRpcTransactionRequest {\n     /**\n      *  The sender address to use when signing.\n      */\n     from?: string;\n\n     /**\n      *  The target address.\n      */\n     to?: string;\n\n     /**\n      *  The transaction data.\n      */\n     data?: string;\n\n     /**\n      *  The chain ID the transaction is valid on.\n      */\n     chainId?: string;\n\n     /**\n      *  The [[link-eip-2718]] transaction type.\n      */\n     type?: string;\n\n     /**\n      *  The maximum amount of gas to allow a transaction to consume.\n      *\n      *  In most other places in ethers, this is called ``gasLimit`` which\n      *  differs from the JSON-RPC Ethereum API specification.\n      */\n     gas?: string;\n\n     /**\n      *  The gas price per wei for transactions prior to [[link-eip-1559]].\n      */\n     gasPrice?: string;\n\n     /**\n      *  The maximum fee per gas for [[link-eip-1559]] transactions.\n      */\n     maxFeePerGas?: string;\n\n     /**\n      *  The maximum priority fee per gas for [[link-eip-1559]] transactions.\n      */\n     maxPriorityFeePerGas?: string;\n\n     /**\n      *  The nonce for the transaction.\n      */\n     nonce?: string;\n\n     /**\n      *  The transaction value (in wei).\n      */\n     value?: string;\n\n     /**\n      *  The transaction access list.\n      */\n     accessList?: Array<{ address: string, storageKeys: Array<string> }>;\n}\n\n// @TODO: Unchecked Signers\n\nexport class JsonRpcSigner extends AbstractSigner<JsonRpcApiProvider> {\n    address!: string;\n\n    constructor(provider: JsonRpcApiProvider, address: string) {\n        super(provider);\n        address = getAddress(address);\n        defineProperties<JsonRpcSigner>(this, { address });\n    }\n\n    connect(provider: null | Provider): Signer {\n        assert(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"signer.connect\"\n        });\n    }\n\n    async getAddress(): Promise<string> {\n        return this.address;\n    }\n\n    // JSON-RPC will automatially fill in nonce, etc. so we just check from\n    async populateTransaction(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        return await this.populateCall(tx);\n    }\n\n    // Returns just the hash of the transaction after sent, which is what\n    // the bare JSON-RPC API does;\n    async sendUncheckedTransaction(_tx: TransactionRequest): Promise<string> {\n        const tx = deepCopy(_tx);\n\n        const promises: Array<Promise<void>> = [];\n\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const _from = tx.from;\n            promises.push((async () => {\n                const from = await resolveAddress(_from, this.provider);\n                assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(),\n                    \"from address mismatch\", \"transaction\", _tx);\n                tx.from = from;\n            })());\n        } else {\n            tx.from = this.address;\n        }\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (tx.gasLimit == null) {\n            promises.push((async () => {\n                tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address});\n            })());\n        }\n\n        // The address may be an ENS name or Addressable\n        if (tx.to != null) {\n            const _to = tx.to;\n            promises.push((async () => {\n                tx.to = await resolveAddress(_to, this.provider);\n            })());\n        }\n\n        // Wait until all of our properties are filled in\n        if (promises.length) { await Promise.all(promises); }\n\n        const hexTx = this.provider.getRpcTransaction(tx);\n\n        return this.provider.send(\"eth_sendTransaction\", [ hexTx ]);\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider.getBlockNumber();\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(tx);\n\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return await (new Promise((resolve, reject) => {\n            const timeouts = [ 1000, 100 ];\n            let invalids = 0;\n\n            const checkTx = async () => {\n\n                try {\n                    // Try getting the transaction\n                    const tx = await this.provider.getTransaction(hash);\n\n                    if (tx != null) {\n                        resolve(tx.replaceableTransaction(blockNumber));\n                        return;\n                    }\n\n                } catch (error) {\n\n                    // If we were cancelled: stop polling.\n                    // If the data is bad: the node returns bad transactions\n                    // If the network changed: calling again will also fail\n                    // If unsupported: likely destroyed\n                    if (isError(error, \"CANCELLED\") || isError(error, \"BAD_DATA\") ||\n                        isError(error, \"NETWORK_ERROR\") || isError(error, \"UNSUPPORTED_OPERATION\")) {\n\n                        if (error.info == null) { error.info = { }; }\n                        error.info.sendTransactionHash = hash;\n\n                        reject(error);\n                        return;\n                    }\n\n                    // Stop-gap for misbehaving backends; see #4513\n                    if (isError(error, \"INVALID_ARGUMENT\")) {\n                        invalids++;\n                        if (error.info == null) { error.info = { }; }\n                        error.info.sendTransactionHash = hash;\n                        if (invalids > 10) {\n                            reject(error);\n                            return;\n                        }\n                    }\n\n                    // Notify anyone that cares; but we will try again, since\n                    // it is likely an intermittent service error\n                    this.provider.emit(\"error\", makeError(\"failed to fetch transation after sending (will try again)\", \"UNKNOWN_ERROR\", { error }));\n                }\n\n                // Wait another 4 seconds\n                this.provider._setTimeout(() => { checkTx(); }, timeouts.pop() || 4000);\n            };\n            checkTx();\n        }));\n    }\n\n    async signTransaction(_tx: TransactionRequest): Promise<string> {\n        const tx = deepCopy(_tx);\n\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const from = await resolveAddress(tx.from, this.provider);\n            assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(),\n                \"from address mismatch\", \"transaction\", _tx);\n            tx.from = from;\n        } else {\n            tx.from = this.address;\n        }\n\n        const hexTx = this.provider.getRpcTransaction(tx);\n        return await this.provider.send(\"eth_signTransaction\", [ hexTx ]);\n    }\n\n\n    async signMessage(_message: string | Uint8Array): Promise<string> {\n        const message = ((typeof(_message) === \"string\") ? toUtf8Bytes(_message): _message);\n        return await this.provider.send(\"personal_sign\", [\n            hexlify(message), this.address.toLowerCase() ]);\n    }\n\n    async signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, _value: Record<string, any>): Promise<string> {\n        const value = deepCopy(_value);\n\n        // Populate any ENS names (in-place)\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (value: string) => {\n            const address = await resolveAddress(value);\n            assertArgument(address != null, \"TypedData does not support null address\", \"value\", value);\n            return address;\n        });\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            this.address.toLowerCase(),\n            JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        return this.provider.send(\"personal_unlockAccount\", [\n            this.address.toLowerCase(), password, null ]);\n    }\n\n    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n    async _legacySignMessage(_message: string | Uint8Array): Promise<string> {\n        const message = ((typeof(_message) === \"string\") ? toUtf8Bytes(_message): _message);\n        return await this.provider.send(\"eth_sign\", [\n            this.address.toLowerCase(), hexlify(message) ]);\n    }\n}\n\ntype ResolveFunc = (result: JsonRpcResult) => void;\ntype RejectFunc = (error: Error) => void;\n\ntype Payload = { payload: JsonRpcPayload, resolve: ResolveFunc, reject: RejectFunc };\n\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */\nexport abstract class JsonRpcApiProvider extends AbstractProvider {\n\n    #options: Required<JsonRpcApiProviderOptions>;\n\n    // The next ID to use for the JSON-RPC ID field\n    #nextId: number;\n\n    // Payloads are queued and triggered in batches using the drainTimer\n    #payloads: Array<Payload>;\n    #drainTimer: null | Timer;\n\n    #notReady: null | {\n        promise: Promise<void>,\n        resolve: null | ((v: void) => void)\n    };\n\n    #network: null | Network;\n    #pendingDetectNetwork: null | Promise<Network>;\n\n    #scheduleDrain(): void {\n        if (this.#drainTimer) { return; }\n\n        // If we aren't using batching, no harm in sending it immediately\n        const stallTime = (this._getOption(\"batchMaxCount\") === 1) ? 0: this._getOption(\"batchStallTime\");\n\n        this.#drainTimer = setTimeout(() => {\n            this.#drainTimer = null;\n\n            const payloads = this.#payloads;\n            this.#payloads = [ ];\n\n            while (payloads.length) {\n\n                // Create payload batches that satisfy our batch constraints\n                const batch = [ <Payload>(payloads.shift()) ];\n                while (payloads.length) {\n                    if (batch.length === this.#options.batchMaxCount) { break; }\n                    batch.push(<Payload>(payloads.shift()));\n                    const bytes = JSON.stringify(batch.map((p) => p.payload));\n                    if (bytes.length > this.#options.batchMaxSize) {\n                        payloads.unshift(<Payload>(batch.pop()));\n                        break;\n                    }\n                }\n\n                // Process the result to each payload\n                (async () => {\n                    const payload = ((batch.length === 1) ? batch[0].payload: batch.map((p) => p.payload));\n\n                    this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n\n                    try {\n                        const result = await this._send(payload);\n                        this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n\n                        // Process results in batch order\n                        for (const { resolve, reject, payload } of batch) {\n\n                            if (this.destroyed) {\n                                reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n                                continue;\n                            }\n\n                            // Find the matching result\n                            const resp = result.filter((r) => (r.id === payload.id))[0];\n\n                            // No result; the node failed us in unexpected ways\n                            if (resp == null) {\n                                const error = makeError(\"missing response for request\", \"BAD_DATA\", {\n                                    value: result, info: { payload }\n                                });\n                                this.emit(\"error\", error);\n                                reject(error);\n                                continue;\n                            }\n\n                            // The response is an error\n                            if (\"error\" in resp) {\n                                reject(this.getRpcError(payload, resp));\n                                continue;\n                            }\n\n                            // All good; send the result\n                            resolve(resp.result);\n                        }\n\n                    } catch (error: any) {\n                        this.emit(\"debug\", { action: \"receiveRpcError\", error });\n\n                        for (const { reject } of batch) {\n                            // @TODO: augment the error with the payload\n                            reject(error);\n                        }\n                    }\n                })();\n            }\n        }, stallTime);\n    }\n\n    constructor(network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        super(network, options);\n\n        this.#nextId = 1;\n        this.#options = Object.assign({ }, defaultOptions, options || { });\n\n        this.#payloads = [ ];\n        this.#drainTimer = null;\n\n        this.#network = null;\n        this.#pendingDetectNetwork = null;\n\n        {\n            let resolve: null | ((value: void) => void) = null;\n            const promise = new Promise((_resolve: (value: void) => void) => {\n                resolve = _resolve;\n            });\n            this.#notReady = { promise, resolve };\n        }\n\n        const staticNetwork = this._getOption(\"staticNetwork\");\n        if (typeof(staticNetwork) === \"boolean\") {\n            assertArgument(!staticNetwork || network !== \"any\", \"staticNetwork cannot be used on special network 'any'\", \"options\", options);\n            if (staticNetwork && network != null) {\n                this.#network = Network.from(network);\n            }\n\n        } else if (staticNetwork) {\n            // Make sure any static network is compatbile with the provided netwrok\n            assertArgument(network == null || staticNetwork.matches(network),\n                \"staticNetwork MUST match network object\", \"options\", options);\n            this.#network = staticNetwork;\n        }\n    }\n\n    /**\n     *  Returns the value associated with the option %%key%%.\n     *\n     *  Sub-classes can use this to inquire about configuration options.\n     */\n    _getOption<K extends keyof JsonRpcApiProviderOptions>(key: K): JsonRpcApiProviderOptions[K] {\n        return this.#options[key];\n    }\n\n    /**\n     *  Gets the [[Network]] this provider has committed to. On each call, the network\n     *  is detected, and if it has changed, the call will reject.\n     */\n    get _network(): Network {\n        assert (this.#network, \"network is not available yet\", \"NETWORK_ERROR\");\n        return this.#network;\n    }\n\n    /**\n     *  Sends a JSON-RPC %%payload%% (or a batch) to the underlying channel.\n     *\n     *  Sub-classes **MUST** override this.\n     */\n    abstract _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult | JsonRpcError>>;\n\n\n    /**\n     *  Resolves to the non-normalized value by performing %%req%%.\n     *\n     *  Sub-classes may override this to modify behavior of actions,\n     *  and should generally call ``super._perform`` as a fallback.\n     */\n    async _perform(req: PerformActionRequest): Promise<any> {\n\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            let tx = req.transaction;\n            if (tx && tx.type != null && getBigInt(tx.type)) {\n                // If there are no EIP-1559 or newer properties, it might be pre-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        req = Object.assign({ }, req, {\n                            transaction: Object.assign({ }, tx, { type: undefined })\n                        });\n                    }\n                }\n            }\n        }\n\n        const request = this.getRpcRequest(req);\n\n        if (request != null) {\n            return await this.send(request.method, request.args);\n        }\n\n        return super._perform(req);\n    }\n\n    /**\n     *  Sub-classes may override this; it detects the *actual* network that\n     *  we are **currently** connected to.\n     *\n     *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n     *  _send primitive must be used instead.\n     */\n    async _detectNetwork(): Promise<Network> {\n        const network = this._getOption(\"staticNetwork\");\n        if (network) {\n            if (network === true) {\n                if (this.#network) { return this.#network; }\n            } else {\n                return network;\n            }\n        }\n\n        if (this.#pendingDetectNetwork) {\n            return await this.#pendingDetectNetwork;\n        }\n\n        // If we are ready, use ``send``, which enabled requests to be batched\n        if (this.ready) {\n            this.#pendingDetectNetwork = (async () => {\n                try {\n                    const result = Network.from(getBigInt(await this.send(\"eth_chainId\", [ ])));\n                    this.#pendingDetectNetwork = null;\n                    return result;\n                } catch (error) {\n                    this.#pendingDetectNetwork = null;\n                    throw error;\n                }\n            })();\n            return await this.#pendingDetectNetwork;\n        }\n\n        // We are not ready yet; use the primitive _send\n        this.#pendingDetectNetwork = (async () => {\n            const payload: JsonRpcPayload = {\n                id: this.#nextId++, method: \"eth_chainId\", params: [ ], jsonrpc: \"2.0\"\n            };\n\n            this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n\n            let result: JsonRpcResult | JsonRpcError;\n            try {\n                result = (await this._send(payload))[0];\n                this.#pendingDetectNetwork = null;\n            } catch (error) {\n                this.#pendingDetectNetwork = null;\n                this.emit(\"debug\", { action: \"receiveRpcError\", error });\n                throw error;\n            }\n\n            this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n\n            if (\"result\" in result) {\n                return Network.from(getBigInt(result.result));\n            }\n\n            throw this.getRpcError(payload, result);\n        })();\n\n        return await this.#pendingDetectNetwork;\n    }\n\n    /**\n     *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n     *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n     *  ``super._start()`` **MUST** be called.\n     *\n     *  Calling it multiple times is safe and has no effect.\n     */\n    _start(): void {\n        if (this.#notReady == null || this.#notReady.resolve == null) { return; }\n\n        this.#notReady.resolve();\n        this.#notReady = null;\n\n        (async () => {\n\n            // Bootstrap the network\n            while (this.#network == null && !this.destroyed) {\n                try {\n                    this.#network = await this._detectNetwork();\n                } catch (error) {\n                    if (this.destroyed) { break; }\n                    console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n                    this.emit(\"error\", makeError(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", { event: \"initial-network-discovery\", info: { error } }));\n                    await stall(1000);\n                }\n            }\n\n            // Start dispatching requests\n            this.#scheduleDrain();\n        })();\n    }\n\n    /**\n     *  Resolves once the [[_start]] has been called. This can be used in\n     *  sub-classes to defer sending data until the connection has been\n     *  established.\n     */\n    async _waitUntilReady(): Promise<void> {\n        if (this.#notReady == null) { return; }\n        return await this.#notReady.promise;\n    }\n\n\n    /**\n     *  Return a Subscriber that will manage the %%sub%%.\n     *\n     *  Sub-classes may override this to modify the behavior of\n     *  subscription management.\n     */\n    _getSubscriber(sub: Subscription): Subscriber {\n\n        // Pending Filters aren't availble via polling\n        if (sub.type === \"pending\") { return new FilterIdPendingSubscriber(this); }\n\n        if (sub.type === \"event\") {\n            if (this._getOption(\"polling\")) {\n                return new PollingEventSubscriber(this, sub.filter);\n            }\n            return new FilterIdEventSubscriber(this, sub.filter);\n        }\n\n        // Orphaned Logs are handled automatically, by the filter, since\n        // logs with removed are emitted by it\n        if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n            return new UnmanagedSubscriber(\"orphan\");\n        }\n\n        return super._getSubscriber(sub);\n    }\n\n    /**\n     *  Returns true only if the [[_start]] has been called.\n     */\n    get ready(): boolean { return this.#notReady == null; }\n\n    /**\n     *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n     *  which has all values hexlified and any numeric values converted\n     *  to Quantity values.\n     */\n    getRpcTransaction(tx: TransactionRequest): JsonRpcTransactionRequest {\n        const result: JsonRpcTransactionRequest = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            let dstKey = key;\n            if (key === \"gasLimit\") { dstKey = \"gas\"; }\n            (<any>result)[dstKey] = toQuantity(getBigInt((<any>tx)[key], `tx.${ key }`));\n        });\n\n        // Make sure addresses and data are lowercase\n        [\"from\", \"to\", \"data\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            (<any>result)[key] = hexlify((<any>tx)[key]);\n        });\n\n        // Normalize the access list object\n        if (tx.accessList) {\n            result[\"accessList\"] = accessListify(tx.accessList);\n        }\n\n        if (tx.blobVersionedHashes) {\n            // @TODO: Remove this <any> case once EIP-4844 added to prepared tx\n            (<any>result)[\"blobVersionedHashes\"] = tx.blobVersionedHashes.map(h => h.toLowerCase());\n        }\n\n        // @TODO: blobs should probably also be copied over, optionally\n        // accounting for the kzg property to backfill blobVersionedHashes\n        // using the commitment. Or should that be left as an exercise to\n        // the caller?\n\n        return result;\n    }\n\n    /**\n     *  Returns the request method and arguments required to perform\n     *  %%req%%.\n     */\n    getRpcRequest(req: PerformActionRequest): null | { method: string, args: Array<any> } {\n        switch (req.method) {\n            case \"chainId\":\n                return { method: \"eth_chainId\", args: [ ] };\n\n            case \"getBlockNumber\":\n                return { method: \"eth_blockNumber\", args: [ ] };\n\n            case \"getGasPrice\":\n                return { method: \"eth_gasPrice\", args: [] };\n\n            case \"getPriorityFee\":\n                return { method: \"eth_maxPriorityFeePerGas\", args: [ ] };\n\n            case \"getBalance\":\n                return {\n                    method: \"eth_getBalance\",\n                    args: [ getLowerCase(req.address), req.blockTag ]\n                };\n\n            case \"getTransactionCount\":\n                return {\n                    method: \"eth_getTransactionCount\",\n                    args: [ getLowerCase(req.address), req.blockTag ]\n                };\n\n            case \"getCode\":\n                return {\n                    method: \"eth_getCode\",\n                    args: [ getLowerCase(req.address), req.blockTag ]\n                };\n\n            case \"getStorage\":\n                return {\n                    method: \"eth_getStorageAt\",\n                    args: [\n                        getLowerCase(req.address),\n                        (\"0x\" + req.position.toString(16)),\n                        req.blockTag\n                    ]\n                };\n\n            case \"broadcastTransaction\":\n                return {\n                    method: \"eth_sendRawTransaction\",\n                    args: [ req.signedTransaction ]\n                };\n\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return {\n                        method: \"eth_getBlockByNumber\",\n                        args: [ req.blockTag, !!req.includeTransactions ]\n                    };\n                } else if (\"blockHash\" in req) {\n                    return {\n                        method: \"eth_getBlockByHash\",\n                        args: [ req.blockHash, !!req.includeTransactions ]\n                    };\n                }\n                break;\n\n            case \"getTransaction\":\n                return {\n                    method: \"eth_getTransactionByHash\",\n                    args: [ req.hash ]\n                };\n\n            case \"getTransactionReceipt\":\n                return {\n                    method: \"eth_getTransactionReceipt\",\n                    args: [ req.hash ]\n                };\n\n            case \"call\":\n                return {\n                    method: \"eth_call\",\n                    args: [ this.getRpcTransaction(req.transaction), req.blockTag ]\n                };\n\n            case \"estimateGas\": {\n                return {\n                    method: \"eth_estimateGas\",\n                    args: [ this.getRpcTransaction(req.transaction) ]\n                };\n            }\n\n            case \"getLogs\":\n                if (req.filter && req.filter.address != null) {\n                    if (Array.isArray(req.filter.address)) {\n                        req.filter.address = req.filter.address.map(getLowerCase);\n                    } else {\n                        req.filter.address = getLowerCase(req.filter.address);\n                    }\n                }\n                return { method: \"eth_getLogs\", args: [ req.filter ] };\n        }\n\n        return null;\n    }\n\n    /**\n     *  Returns an ethers-style Error for the given JSON-RPC error\n     *  %%payload%%, coalescing the various strings and error shapes\n     *  that different nodes return, coercing them into a machine-readable\n     *  standardized error.\n     */\n    getRpcError(payload: JsonRpcPayload, _error: JsonRpcError): Error {\n        const { method } = payload;\n        const { error } = _error;\n\n        if (method === \"eth_estimateGas\" && error.message) {\n            const msg = error.message;\n            if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n                return makeError(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: ((<any>payload).params[0]),\n                    info: { payload, error }\n                });\n            }\n        }\n\n        if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n            const result = spelunkData(error);\n\n            const e = AbiCoder.getBuiltinCallException(\n                (method === \"eth_call\") ? \"call\": \"estimateGas\",\n                ((<any>payload).params[0]),\n                (result ? result.data: null)\n            );\n            e.info = { error, payload };\n            return e;\n        }\n\n        // Only estimateGas and call can return arbitrary contract-defined text, so now we\n        // we can process text safely.\n\n        const message = JSON.stringify(spelunkMessage(error));\n\n        if (typeof(error.message) === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n            const actionMap: Record<string, \"requestAccess\" | \"sendTransaction\" | \"signMessage\" | \"signTransaction\" | \"signTypedData\"> = {\n                eth_sign: \"signMessage\",\n                personal_sign: \"signMessage\",\n                eth_signTypedData_v4: \"signTypedData\",\n                eth_signTransaction: \"signTransaction\",\n                eth_sendTransaction: \"sendTransaction\",\n                eth_requestAccounts: \"requestAccess\",\n                wallet_requestAccounts: \"requestAccess\",\n            };\n\n            return makeError(`user rejected action`, \"ACTION_REJECTED\", {\n                action: (actionMap[method] || \"unknown\") ,\n                reason: \"rejected\",\n                info: { payload, error }\n            });\n        }\n\n        if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n            const transaction = <TransactionLike<string>>((<any>payload).params[0]);\n\n            if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n                return makeError(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                    transaction, info: { error }\n                });\n            }\n\n            if (message.match(/nonce/i) && message.match(/too low/i)) {\n                return makeError(\"nonce has already been used\", \"NONCE_EXPIRED\", { transaction, info: { error } });\n            }\n\n            // \"replacement transaction underpriced\"\n            if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n                return makeError(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", { transaction, info: { error } });\n            }\n\n            if (message.match(/only replay-protected/i)) {\n                return makeError(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n                    operation: method, info: { transaction, info: { error } }\n                });\n            }\n        }\n\n        let unsupported = !!message.match(/the method .* does not exist/i);\n        if (!unsupported) {\n            if (error && (<any>error).details && (<any>error).details.startsWith(\"Unauthorized method:\")) {\n                unsupported = true;\n            }\n        }\n\n        if (unsupported) {\n            return makeError(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n                operation: payload.method, info: { error, payload }\n            });\n        }\n\n        return makeError(\"could not coalesce error\", \"UNKNOWN_ERROR\", { error, payload });\n    }\n\n\n    /**\n     *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n     *  over the underlying channel. This can be used to call methods\n     *  on the backend that do not have a high-level API within the Provider\n     *  API.\n     *\n     *  This method queues requests according to the batch constraints\n     *  in the options, assigns the request a unique ID.\n     *\n     *  **Do NOT override** this method in sub-classes; instead\n     *  override [[_send]] or force the options values in the\n     *  call to the constructor to modify this method's behavior.\n     */\n    send(method: string, params: Array<any> | Record<string, any>): Promise<any> {\n        // @TODO: cache chainId?? purge on switch_networks\n\n        // We have been destroyed; no operations are supported anymore\n        if (this.destroyed) {\n            return Promise.reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: method }));\n        }\n\n        const id = this.#nextId++;\n        const promise = new Promise((resolve, reject) => {\n            this.#payloads.push({\n                resolve, reject,\n                payload: { method, params, id, jsonrpc: \"2.0\" }\n            });\n        });\n\n        // If there is not a pending drainTimer, set one\n        this.#scheduleDrain();\n\n        return <Promise<JsonRpcResult>>promise;\n    }\n\n    /**\n     *  Resolves to the [[Signer]] account for  %%address%% managed by\n     *  the client.\n     *\n     *  If the %%address%% is a number, it is used as an index in the\n     *  the accounts from [[listAccounts]].\n     *\n     *  This can only be used on clients which manage accounts (such as\n     *  Geth with imported account or MetaMask).\n     *\n     *  Throws if the account doesn't exist.\n     */\n    async getSigner(address?: number | string): Promise<JsonRpcSigner> {\n        if (address == null) { address = 0; }\n\n        const accountsPromise = this.send(\"eth_accounts\", [ ]);\n\n        // Account index\n        if (typeof(address) === \"number\") {\n            const accounts = <Array<string>>(await accountsPromise);\n            if (address >= accounts.length) { throw new Error(\"no such account\"); }\n            return new JsonRpcSigner(this, accounts[address]);\n        }\n\n        const { accounts } = await resolveProperties({\n            network: this.getNetwork(),\n            accounts: accountsPromise\n        });\n\n        // Account address\n        address = getAddress(address);\n        for (const account of accounts) {\n            if (getAddress(account) === address) {\n                return new JsonRpcSigner(this, address);\n            }\n        }\n\n        throw new Error(\"invalid account\");\n    }\n\n    async listAccounts(): Promise<Array<JsonRpcSigner>> {\n        const accounts: Array<string> = await this.send(\"eth_accounts\", [ ]);\n        return accounts.map((a) => new JsonRpcSigner(this, a));\n    }\n\n    destroy(): void {\n\n        // Stop processing requests\n        if (this.#drainTimer) {\n            clearTimeout(this.#drainTimer);\n            this.#drainTimer = null;\n        }\n\n        // Cancel all pending requests\n        for (const { payload, reject } of this.#payloads) {\n            reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n        }\n\n        this.#payloads = [ ];\n\n        // Parent clean-up\n        super.destroy();\n\n    }\n}\n\n// @TODO: remove this in v7, it is not exported because this functionality\n// is exposed in the JsonRpcApiProvider by setting polling to true. It should\n// be safe to remove regardless, because it isn't reachable, but just in case.\n/**\n *  @_ignore:\n */\nexport abstract class JsonRpcApiPollingProvider extends JsonRpcApiProvider {\n    #pollingInterval: number;\n    constructor(network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        super(network, options);\n\n        let pollingInterval = this._getOption(\"pollingInterval\");\n        if (pollingInterval == null) { pollingInterval = defaultOptions.pollingInterval; }\n\n        this.#pollingInterval = pollingInterval;\n    }\n\n    _getSubscriber(sub: Subscription): Subscriber {\n        const subscriber = super._getSubscriber(sub);\n        if (isPollable(subscriber)) {\n            subscriber.pollingInterval = this.#pollingInterval;\n        }\n        return subscriber;\n    }\n\n    /**\n     *  The polling interval (default: 4000 ms)\n     */\n    get pollingInterval(): number { return this.#pollingInterval; }\n    set pollingInterval(value: number) {\n        if (!Number.isInteger(value) || value < 0) { throw new Error(\"invalid interval\"); }\n        this.#pollingInterval = value;\n        this._forEachSubscriber((sub) => {\n            if (isPollable(sub)) {\n                sub.pollingInterval = this.#pollingInterval;\n            }\n        });\n    }\n}\n\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */\nexport class JsonRpcProvider extends JsonRpcApiPollingProvider {\n    #connect: FetchRequest;\n\n    constructor(url?: string | FetchRequest, network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        if (url == null) { url = \"http:/\\/localhost:8545\"; }\n        super(network, options);\n\n        if (typeof(url) === \"string\") {\n            this.#connect = new FetchRequest(url);\n        } else {\n            this.#connect = url.clone();\n        }\n    }\n\n    _getConnection(): FetchRequest {\n        return this.#connect.clone();\n    }\n\n    async send(method: string, params: Array<any> | Record<string, any>): Promise<any> {\n        // All requests are over HTTP, so we can just start handling requests\n        // We do this here rather than the constructor so that we don't send any\n        // requests to the network (i.e. eth_chainId) until we absolutely have to.\n        await this._start();\n\n        return await super.send(method, params);\n    }\n\n    async _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult>> {\n        // Configure a POST connection for the requested method\n        const request = this._getConnection();\n        request.body = JSON.stringify(payload);\n        request.setHeader(\"content-type\", \"application/json\");\n        const response = await request.send();\n        response.assertOk();\n\n        let resp = response.bodyJson;\n        if (!Array.isArray(resp)) { resp = [ resp ]; }\n\n        return resp;\n    }\n}\n\nfunction spelunkData(value: any): null | { message: string, data: string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(/revert/i) && isHexString(value.data)) {\n        return { message: value.message, data: value.data };\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunkData(value[key]);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunkData(JSON.parse(value));\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction _spelunkMessage(value: any, result: Array<string>): void {\n    if (value == null) { return; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\") {\n        result.push(value.message);\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            _spelunkMessage(value[key], result);\n        }\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return _spelunkMessage(JSON.parse(value), result);\n        } catch (error) { }\n    }\n}\n\nfunction spelunkMessage(value: any): Array<string> {\n    const result: Array<string> = [ ];\n    _spelunkMessage(value, result);\n    return result;\n}\n","import { assertArgument } from \"../utils/index.js\";\n\nimport { JsonRpcApiPollingProvider } from \"./provider-jsonrpc.js\";\n\nimport type {\n    JsonRpcApiProviderOptions,\n    JsonRpcError, JsonRpcPayload, JsonRpcResult,\n    JsonRpcSigner\n} from \"./provider-jsonrpc.js\";\nimport type { Network, Networkish } from \"./network.js\";\n\n/**\n *  The interface to an [[link-eip-1193]] provider, which is a standard\n *  used by most injected providers, which the [[BrowserProvider]] accepts\n *  and exposes the API of.\n */\nexport interface Eip1193Provider {\n    /**\n     *  See [[link-eip-1193]] for details on this method.\n     */\n    request(request: { method: string, params?: Array<any> | Record<string, any> }): Promise<any>;\n};\n\n/**\n *  The possible additional events dispatched when using the ``\"debug\"``\n *  event on a [[BrowserProvider]].\n */\nexport type DebugEventBrowserProvider = {\n    action: \"sendEip1193Payload\",\n    payload: { method: string, params: Array<any> }\n} | {\n    action: \"receiveEip1193Result\",\n    result: any\n} | {\n    action: \"receiveEip1193Error\",\n    error: Error\n};\n\nexport type BrowserProviderOptions = {\n    polling?: boolean;\n    staticNetwork?: null | boolean | Network;\n\n    cacheTimeout?: number;\n    pollingInterval?: number;\n};\n\n/**\n *  A **BrowserProvider** is intended to wrap an injected provider which\n *  adheres to the [[link-eip-1193]] standard, which most (if not all)\n *  currently do.\n */\nexport class BrowserProvider extends JsonRpcApiPollingProvider {\n    #request: (method: string, params: Array<any> | Record<string, any>) => Promise<any>;\n\n    /**\n     *  Connnect to the %%ethereum%% provider, optionally forcing the\n     *  %%network%%.\n     */\n    constructor(ethereum: Eip1193Provider, network?: Networkish, _options?: BrowserProviderOptions) {\n        // Copy the options\n        const options: JsonRpcApiProviderOptions = Object.assign({ },\n          ((_options != null) ? _options: { }),\n          { batchMaxCount: 1 });\n\n        assertArgument(ethereum && ethereum.request, \"invalid EIP-1193 provider\", \"ethereum\", ethereum);\n\n        super(network, options);\n\n        this.#request = async (method: string, params: Array<any> | Record<string, any>) => {\n            const payload = { method, params };\n            this.emit(\"debug\", { action: \"sendEip1193Request\", payload });\n            try {\n                const result = await ethereum.request(payload);\n                this.emit(\"debug\", { action: \"receiveEip1193Result\", result });\n                return result;\n            } catch (e: any) {\n                const error = new Error(e.message);\n                (<any>error).code = e.code;\n                (<any>error).data = e.data;\n                (<any>error).payload = payload;\n                this.emit(\"debug\", { action: \"receiveEip1193Error\", error });\n                throw error;\n            }\n        };\n    }\n\n    async send(method: string, params: Array<any> | Record<string, any>): Promise<any> {\n        await this._start();\n\n        return await super.send(method, params);\n    }\n\n    async _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult | JsonRpcError>> {\n        assertArgument(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\n\n        try {\n            const result = await this.#request(payload.method, payload.params || [ ]);\n            return [ { id: payload.id, result } ];\n        } catch (e: any) {\n            return [ {\n                id: payload.id,\n                error: { code: e.code, data: e.data, message: e.message }\n            } ];\n        }\n    }\n\n    getRpcError(payload: JsonRpcPayload, error: JsonRpcError): Error {\n\n        error = JSON.parse(JSON.stringify(error));\n\n        // EIP-1193 gives us some machine-readable error codes, so rewrite\n        // them into \n        switch (error.error.code || -1) {\n            case 4001:\n                error.error.message = `ethers-user-denied: ${ error.error.message }`;\n                break;\n            case 4200:\n                error.error.message = `ethers-unsupported: ${ error.error.message }`;\n                break;\n        }\n\n        return super.getRpcError(payload, error);\n    }\n\n    /**\n     *  Resolves to ``true`` if the provider manages the %%address%%.\n     */\n    async hasSigner(address: number | string): Promise<boolean> {\n        if (address == null) { address = 0; }\n\n        const accounts = await this.send(\"eth_accounts\", [ ]);\n        if (typeof(address) === \"number\") {\n            return (accounts.length > address);\n        }\n\n        address = address.toLowerCase();\n        return accounts.filter((a: string) => (a.toLowerCase() === address)).length !== 0;\n    }\n\n    async getSigner(address?: number | string): Promise<JsonRpcSigner> {\n        if (address == null) { address = 0; }\n\n        if (!(await this.hasSigner(address))) {\n            try {\n                //const resp = \n                await this.#request(\"eth_requestAccounts\", [ ]);\n                //console.log(\"RESP\", resp);\n\n            } catch (error: any) {\n                const payload = error.payload;\n                throw this.getRpcError(payload, { id: payload.id, error });\n            }\n        }\n\n        return await super.getSigner(address);\n    }\n}\n"],"names":["padding","Uint8Array","fill","BN__1","BigInt","BN_0","BN_1","BN_MAX_UINT256","hexTrue","toBeHex","hexFalse","domainFieldTypes","name","version","chainId","verifyingContract","salt","domainFieldNames","checkString","key","value","assertArgument","JSON","stringify","domainChecks","_value","getBigInt","Number","isSafeInteger","toQuantity","getAddress","toLowerCase","error","bytes","getBytes","length","hexlify","getBaseEncoder","type","match","signed","width","parseInt","String","boundsUpper","mask","boundsLower","toTwos","padOffset","concat","slice","hexPadRight","zeroPadValue","keccak256","id","encodeType","fields","map","join","splitArray","base","index","array","prefix","count","TypedDataEncoder","primaryType","types","parse","this","constructor","_types","Map","links","parents","subtypes","Object","keys","forEach","set","Set","uniqueNames","field","has","add","baseType","get","push","primaryTypes","Array","from","filter","n","t","defineProperties","checkCircular","found","child","subtype","delete","st","sort","getEncoder","encoder","subEncoder","result","encodedType","values","unshift","encodeData","hashStruct","encode","hash","_visit","callback","v","reduce","accum","visit","getPrimaryType","hashDomain","domain","domainFields","a","b","indexOf","EIP712Domain","resolveNames","resolveName","assign","ensCache","isHexString","getPayload","domainValues","domainTypes","typesWithDomain","message","toString","createGetUrl","options","async","req","_signal","assert","cancelled","protocol","url","split","info","operation","credentials","allowInsecureAuthentication","controller","AbortController","timer","setTimeout","makeError","abort","timeout","addListener","init","method","headers","Headers","body","undefined","signal","resp","fetch","_error","clearTimeout","respBody","arrayBuffer","statusCode","status","statusMessage","statusText","defaultGetUrlFunc","reData","RegExp","reIpfs","locked","dataGatewayFunc","Error","FetchResponse","textData","atob","data","i","charCodeAt","decodeBase64","toUtf8Bytes","replace","all","code","fromCharCode","FetchRequest","getIpfsGatewayFunc","baseUrl","Gateways","fetchSignals","WeakMap","FetchCancelSignal","request","listener","checkSignal","hasBody","toUpperCase","_data","btoa","encodeBase64","allowGzip","getHeader","setHeader","clearHeaders","Symbol","iterator","next","done","setCredentials","username","password","preflightFunc","preflight","processFunc","process","retryFunc","retry","getUrlFunc","slotInterval","maxAttempts","setThrottleParams","params","attempt","expires","delay","_request","_response","makeServerError","getTime","reason","Promise","resolve","wait","clone","scheme","response","throttle","stall","assertOk","location","redirect","retryAfter","Math","trunc","random","pow","send","cancel","current","target","lockConfig","getGateway","registerGateway","func","registerGetUrl","getUrl","createGetUrlFunc","createDataGateway","createIpfsGatewayFunc","bodyText","toUtf8String","bodyJson","k","throwThrottleError","isInteger","ok","requestUrl","responseBody","e","responseStatus","Date","ZeroAddress","Zeros","checkComponent","comp","ensNameSplit","ens_normalize","ensNormalize","comps","last","namehash","pop","dnsEncode","_maxLength","SHA2","Hash","blockLen","outputLen","isLE","super","finished","pos","destroyed","buffer","view","createView","update","exists","len","toBytes","take","min","subarray","dataView","roundClean","digestInto","out","output","byteOffset","setBigUint64","_32n","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","digest","res","destroy","_cloneInto","to","Maj","c","SHA256_K","Uint32Array","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","Chi","sha256","wrapConstructor","SHA512_Kh","SHA512_Kl","u64","SHA512_W_H","SHA512_W_L","SHA512","Ah","Al","Bh","Bl","Ch","Cl","Dh","Dl","Eh","El","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","anyGlobal","self","window","global","getGlobal","crypto","msCrypto","createHash","algo","create","_sha256","_sha512","__sha256","__sha512","locked256","locked512","_","lock","register","freeze","ZeroHash","BN_2","BN_27","BN_28","BN_35","_guard","toUint256","toBeArray","Signature","r","dataLength","s","substring","getNumber","networkV","legacyChainId","getChainId","yParity","yParityAndS","compactSerialized","serialized","guard","assertPrivate","for","toJSON","_type","bv","getChainIdV","getNormalizedV","sig","assertError","check","_r","_v","_1n","_2n","u8a","hexes","padStart","bytesToHex","hex","hexToNumber","hexToBytes","j","hexByte","byte","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","concatBytes","arrays","sum","pad","bitMask","u8n","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","reset","reseed","seed","gen","sl","genUntil","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isArray","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","isOptional","checkVal","entries","_0n","_3n","_4n","_5n","_8n","mod","num","power","modulo","pow2","x","invert","number","y","u","q","m","FpSqrt","P","p1div4","root","eql","sqr","c1","n2","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","HMAC","_key","assertHash","iHash","oHash","buf","assertExists","assertBytes","getPrototypeOf","hmac","validateBasic","curve","ORDER","MASK","BYTES","BITS","Gx","Gy","p","b2n","h2b","ut","DER","Err","_parseInt","d","toSig","sBytes","rBytesLeft","hexFromSig","shl","rhl","rl","weierstrassPoints","opts","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","endo","beta","splitScalar","validatePointOpts","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","lengths","includes","pointPrecomputes","assertPrjPoint","other","Point","px","py","pz","fromAffine","is0","normalizeZ","points","toInv","invertBatch","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","left","right","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","iz","z","inv","ax","ay","zz","cofactor","toRawBytes","isCompressed","toHex","_bits","bits","condition","item","W","windows","elm","precomputeWindow","precomputes","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","ProjectivePoint","weierstrass","curveDef","randomBytes","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","y2","sqrt","numToNByteStr","isBiggerThanHalfOrder","slcNum","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","precompute","isProbPub","str","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","prehash","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","drbg","verify","signature","publicKey","sg","_sig","derError","is","getHash","msgs","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","bitLen","redef","sqrtP","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","lst","nums","tmp","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","cmov","Field","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c2","SigningKey","computePublicKey","compressedPublicKey","getBytesCopy","computeSharedSecret","pubKey","compressed","pub","secpSig","addPoints","p0","p1","pub0","pub1","hexlifyByte","unarrayifyInteger","_decodeChildren","childOffset","decoded","_decode","consumed","checkOffset","lengthLength","decodeRlp","arrayifyInteger","_encode","payload","prototype","call","nibbles","encodeRlp","recoverAddress","pubkey","computeAddress","BN_MAX_UINT","BLOB_SIZE","getVersionedHash","versioned","handleAddress","handleAccessList","param","accessListify","handleNumber","handleUint","formatNumber","formatAccessList","address","storageKeys","formatHashes","_parseEipSignature","tx","Transaction","typeName","nonce","gasLimit","gasPrice","maxPriorityFeePerGas","maxFeePerGas","accessList","maxFeePerBlobGas","blobVersionedHashes","blobs","_blobs","versionedHashes","blob","isBytesLike","padded","commit","blobToKzgCommitment","proof","computeBlobKzgProof","commitment","kzg","unsignedHash","unsignedSerialized","fromPublicKey","isSigned","sidecar","inferType","legacy","_serializeLegacy","_serializeEip2930","_serializeEip1559","_serializeEip4844","inferTypes","hasGasPrice","hasFee","hasAccessList","hasBlob","isLegacy","isBerlin","isLondon","isCancun","_parseLegacy","_parseEip2930","_parseEip1559","fBlobs","fCommits","fProofs","_parseEip4844","Alphabet","BN_58","getIpfsLink","link","MulticoinProviderPlugin","connect","proivder","supportsCoinType","coinType","encodeAddress","decodeAddress","matcherIpfs","matchers","EnsResolver","provider","Contract","supportsWildcard","supportsInterface","isError","funcName","iface","interface","fragment","getFunction","encodeFunctionData","enableCcipRead","decodeFunctionResult","ethCoinType","coinPlugin","plugin","plugins","getText","getContentHash","ipfs","toBigInt","encodeBase58","swarm","getAvatar","_getAvatar","linkage","avatar","selector","owner","tokenId","contract","tokenOwner","ownerOf","balance","balanceOf","metadataUrl","metadata","imageUrl","image","getEnsAddress","network","getNetwork","ensPlugin","getPlugin","ensAddr","addr","resolver","fromName","currentName","allowNull","format","nullValue","arrayOf","altNames","srcKey","altKey","formatData","formatHash","_formatLog","blockHash","blockNumber","removed","topics","transactionHash","transactionIndex","_formatBlock","parentHash","parentBeaconBlockRoot","timestamp","difficulty","gasUsed","stateRoot","receiptsRoot","blobGasUsed","excessBlobGas","miner","prevRandao","extraData","baseFeePerGas","_formatReceiptLog","_formatTransactionReceipt","contractAddress","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","blobGasPrice","formatTransactionResponse","creates","nonceHex","dataSlice","getCreateAddress","NetworkPlugin","GasCostPlugin","effectiveBlock","txBase","txCreate","txDataZero","txDataNonzero","txAccessListStorageKey","txAccessListAddress","costs","props","nullish","EnsPlugin","targetNetwork","FetchUrlFeeDataNetworkPlugin","Networks","Network","matches","attachPlugin","getPlugins","basename","computeIntrinsicGas","gas","injected","registerEth","ensNetwork","getGasStationPlugin","injectCommonNetworks","networkFunc","custom","ensAddress","nameOrChainId","existing","parseUnits","decimals","frac","fetchFeeData","_feeData","standard","maxFee","maxPriorityFee","copy","obj","PollingBlockSubscriber","pollingInterval","getBlockNumber","emit","_setTimeout","bind","start","stop","_clearTimeout","pause","dropWhilePaused","resume","OnBlockSubscriber","_poll","on","off","PollingBlockTagSubscriber","tag","block","getBlock","PollingOrphanSubscriber","PollingTransactionSubscriber","getTransactionReceipt","PollingEventSubscriber","fromBlock","toBlock","getLogs","log","then","isPromise","getTag","UnmanagedSubscriber","concisify","items","getSubscription","_event","orphan","event","addresses","promises","addAddress","resolveAddress","defaultOptions","cacheTimeout","AbstractProvider","_network","disableCcipRead","_perform","perform","ccipReadFetch","calldata","urls","sender","errorMessages","href","action","errorMessage","transaction","_wrapBlock","Block","transactions","formatBlock","_wrapLog","Log","formatLog","_wrapTransactionReceipt","TransactionReceipt","formatTransactionReceipt","_wrapTransactionResponse","TransactionResponse","_detectNetwork","_getAddress","_getBlockTag","blockTag","_getFilter","_address","_getTransactionRequest","copyRequest","detectNetwork","networkPromise","expected","actual","getFeeData","getFeeDataFunc","_block","priorityFee","resolveProperties","FeeData","feeData","estimateGas","_tx","isCallException","txSender","ccipArgs","errorArgs","zeros","urlsOffset","urlsLength","urlsData","_parseString","_parseBytes","parseOffchainLookup","invocation","revert","args","ccipResult","encodeBytes","promise","_blockTag","getBalance","getTransactionCount","getCode","getStorage","_position","position","broadcastTransaction","signedTx","signedTransaction","replaceableTransaction","includeTransactions","prefetchTxs","getTransaction","getTransactionResult","_filter","_getProvider","getResolver","lookupAddress","node","ensContract","resolverContract","waitForTransaction","_confirms","confirms","reject","receipt","console","once","waitForBlock","timerId","_func","paused","time","_forEachSubscriber","subscriber","_getSubscriber","_recoverSubscriber","oldSub","newSub","started","emitArgs","subscription","addressableMap","nameMap","listeners","EventPayload","listenerCount","total","splice","removeAllListeners","removeListener","numPad","bytesPad","empty","datas","byteCount","checkProvider","signer","populate","AbstractSigner","getNonce","populateCall","populateTransaction","hasEip1559","sendTransaction","txObj","signTransaction","FilterIdSubscriber","_subscribe","_emitResults","_recover","filterId","filterIdPromise","FilterIdEventSubscriber","results","FilterIdPendingSubscriber","Primitive","deepCopy","duration","getLowerCase","isPollable","polling","staticNetwork","batchStallTime","batchMaxSize","batchMaxCount","JsonRpcSigner","sendUncheckedTransaction","_from","_to","hexTx","getRpcTransaction","timeouts","invalids","checkTx","sendTransactionHash","signMessage","_message","signTypedData","populated","unlock","_legacySignMessage","JsonRpcApiProvider","stallTime","_getOption","payloads","batch","shift","_send","getRpcError","_resolve","getRpcRequest","ready","jsonrpc","_start","_waitUntilReady","dstKey","msg","spelunkData","AbiCoder","getBuiltinCallException","_spelunkMessage","spelunkMessage","actionMap","eth_sign","personal_sign","eth_signTypedData_v4","eth_signTransaction","eth_sendTransaction","eth_requestAccounts","wallet_requestAccounts","unsupported","details","startsWith","getSigner","accountsPromise","accounts","account","listAccounts","JsonRpcApiPollingProvider","BrowserProvider","ethereum","_options","hasSigner"],"sourceRoot":""}